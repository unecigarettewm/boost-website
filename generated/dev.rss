<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:boostbook="urn:boost.org:boostbook">
  <channel>
    <generator>Boost Website Site Tools</generator>
    <title>Release notes for work in progress boost</title>
    <link>http://www.boost.org/</link>
    <description></description>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)</copyright>
<item><title>Version 1.55.0</title><link>http://www.boost.org/users/history/version_1_55_0.html</link><guid>http://www.boost.org/users/history/version_1_55_0.html</guid><pubDate>In Progress</pubDate><description>


  &lt;div id=&quot;version_1_55_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/predef/&quot;&gt;Predef&lt;/a&gt;:&lt;/span&gt; This library defines a
          set of compiler, architecture, operating system, library, and other version
          numbers from the information it can gather of C, C++, Objective C, and
          Objective C++ predefined macros or those defined in generally available
          headers, from Rene Rivera.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7915&quot;&gt;#7915&lt;/a&gt; Fix silly typos.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8850&quot;&gt;#8850&lt;/a&gt; Fix MSVC warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8262&quot;&gt;#8262&lt;/a&gt; Rename &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;average&lt;/span&gt;&lt;/code&gt;
                to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fdiv&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_any_cast&lt;/span&gt;&lt;/code&gt; exception is now visible
                across modules &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8751&quot;&gt;#8751&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                member function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NOEXCEPT&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented a limited port to Windows Runtime. This support requires
                that the language extensions be enabled. Due to the restricted facilities
                exposed by the Windows Runtime API, the port also comes with the
                following caveats:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The core facilities such as the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;/code&gt;, buffers,
                      composed operations, timers, etc., should all work as normal.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      For sockets, only client-side TCP is supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Explicit binding of a client-side TCP socket is not supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function is not supported
                      for sockets. Asynchronous operations may only be cancelled
                      by closing the socket.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Operations that use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
                      are not supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Only &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;no_delay&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;socket_base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;keep_alive&lt;/span&gt;&lt;/code&gt; options are supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Resolvers do not support service names, only numbers. I.e.
                      you must use &amp;quot;80&amp;quot; rather than &amp;quot;http&amp;quot;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Most resolver query flags have no effect.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a regression (introduced in Boost 1.54) where, on some platforms,
                errors from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_connect&lt;/span&gt;&lt;/code&gt;
                were not correctly propagated through to the completion handler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8795&quot;&gt;#8795&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a Windows-specific regression (introduced in Boost 1.54) that
                occurs when multiple threads are running an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;.
                When the bug occurs, the result of an asynchronous operation (error
                and bytes tranferred) is incorrectly discarded and zero values used
                instead. For TCP sockets this results in spurious end-of-file notifications
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8933&quot;&gt;#8933&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug in handler tracking, where it was not correctly printing
                out some handler IDs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8808&quot;&gt;#8808&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed the comparison used to test for successful synchronous accept
                operations so that it works correctly with unsigned socket descriptors
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8752&quot;&gt;#8752&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured the signal number is correctly passed to the completion handler
                when starting an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_wait&lt;/span&gt;&lt;/code&gt;
                on a signal that is already raised (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8738&quot;&gt;#8738&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppressed a g++ 4.8+ warning about unused typedefs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8980&quot;&gt;#8980&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled the move optimisation for handlers that use the default invocation
                hook (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8624&quot;&gt;#8624&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clarified that programs must not issue overlapping &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_write_at&lt;/span&gt;&lt;/code&gt; operations (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8669&quot;&gt;#8669&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the Windows &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;
                backend to treat &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ERROR_MORE_DATA&lt;/span&gt;&lt;/code&gt;
                as a non-fatal error when returned by &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;GetOverlappedResult&lt;/span&gt;&lt;/code&gt;
                for a synchronous read (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8722&quot;&gt;#8722&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ language extensions use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;/code&gt;
                as a keyword. Added a workaround that renames the namespace to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_generic&lt;/span&gt;&lt;/code&gt; when those language
                extensions are in effect.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some asynchronous operations that missed out on getting &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_result&lt;/span&gt;&lt;/code&gt; support in Boost 1.54.
                In particular, the buffered stream templates have been updated so
                that they adhere to current handler patterns (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9000&quot;&gt;#9000&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9001&quot;&gt;#9001&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled move support for Microsoft Visual Studio 2012 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8959&quot;&gt;#8959&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;/code&gt;
                support for Microsoft Visual Studio 2012.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed a use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;min&lt;/span&gt;&lt;/code&gt;
                in the Windows IOCP backend to avoid a dependency on the &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; header (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8758&quot;&gt;#8758&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Eliminated some unnecessary handler copies.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various minor and cosmetic issues in code and documentation
                (including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8347&quot;&gt;#8347&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8950&quot;&gt;#8950&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8953&quot;&gt;#8953&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8965&quot;&gt;#8965&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8997&quot;&gt;#8997&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for 64-bit atomic operations on x86 target for GCC,
                MSVC and compatible compilers. The support is enabled when it is
                known at compile time that the target CPU supports required instructions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for 128-bit atomic operations on x86-64 target for
                GCC and compatible compilers. The support is enabled when it is known
                at compile time that the target CPU supports required instructions.
                The support can be tested for with the new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ATOMIC_INT128_LOCK_FREE&lt;/span&gt;&lt;/code&gt;
                macro.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a more efficient implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; based on GCC &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__atomic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;
                intrinsics available since GCC 4.7.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for more ARM v7 CPUs, improved detection of Thumb 2.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for x32 (i.e. 64-bit x86 with 32-bit pointers) target
                on GCC and compatible compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed dependency on Boost.Thread.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Internal lock pool now includes proper padding and alignment to avoid
                false sharing.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with Intel compiler on Windows. Removed internal
                macro duplication when compiled on Windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some code refactoring to use C++11 features when available.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7868&quot;&gt;#7868&lt;/a&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;chrono_io&lt;/span&gt;&lt;/code&gt; parses
                      time incorrectly (1.53 and 1.52)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9028&quot;&gt;#9028&lt;/a&gt;
                      Typo in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stopwatches&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;formatters&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;base_formatter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9147&quot;&gt;#9147&lt;/a&gt;
                      uninitialized &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tm&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer/&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for rvalue references and rvalue references emulation
                using Boost.Move. Values are moved only if value type has noexcept
                move constructor and noexcept move assignment operator &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7888&quot;&gt;#7888&lt;/a&gt;.
                Now Circular Buffer is usable with move-only types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Much better documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5362&quot;&gt;#5362&lt;/a&gt;
                circular_buffer does not compile with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7025&quot;&gt;#7025&lt;/a&gt;
                circular buffer reports warning: &amp;quot; type qualifiers ignored on
                function return type&amp;quot; while compile.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7950&quot;&gt;#7950&lt;/a&gt;
                Eliminate W4-warnings under VS2005 - warning C4913: user defined
                binary operator ',' exists but no overload could convert all operands,
                default built-in binary operator ',' used.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;span class=&quot;link&quot;&gt;SCARY
                iterators&lt;/span&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8269&quot;&gt;#8269&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8473&quot;&gt;#8473&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8892&quot;&gt;#8892&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9009&quot;&gt;#9009&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9064&quot;&gt;#9064&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9092&quot;&gt;#9092&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9108&quot;&gt;#9108&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8650&quot;&gt;#8650&lt;/a&gt;
                SSE2 intrinsics
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New interface (unidirectional data transfer).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8782&quot;&gt;#8782&lt;/a&gt;
                no best alternative
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8801&quot;&gt;#8801&lt;/a&gt;
                auto-linking
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/filesystem/&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Android compilation &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8706&quot;&gt;#8706&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8759&quot;&gt;#8759&lt;/a&gt; specialization of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;convert_impl&lt;/span&gt;&lt;/code&gt;
                for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;map_tag&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/index.html&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added centroid for segment type
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added intersects() and disjoints() for Segment-Box and Linestring-Box
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added rtree creation using packing algorithm
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added contains() and covers() spatial query predicates
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added iterative queries
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      In some cases .back() or .clear() was called, violating the
                      usage of Concepts. Fixed for the reported cases
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6958&quot;&gt;6958&lt;/a&gt;
                      Intersection generates self-intersection. Caused by spike,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8364&quot;&gt;8364&lt;/a&gt;
                      Invalid input exception, caused by spikes in previous steps,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8365&quot;&gt;8365&lt;/a&gt;
                      Invalid input exception, caused by spikes in previous steps,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8969&quot;&gt;8969&lt;/a&gt;
                      boost::geometry::model::point single argument constructor should
                      be explicit
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8825&quot;&gt;8825&lt;/a&gt;
                      Patch adding member variable documentation to doxygen_xml2qbk
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8652&quot;&gt;8652&lt;/a&gt;
                      Intersection fails for triangle-triangle intersection. Caused
                      by spike, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9047&quot;&gt;9047&lt;/a&gt;
                      Boost files that include themselves (strategies/intersection.hpp),
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/code&gt; is no longer allowed
                as a bundled property type (for example, in the VertexProperties
                template parameters to graph types); it did not work reliably before,
                but a static assertion now forbids it entirely. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;no_property&lt;/span&gt;&lt;/code&gt; instead.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;finish_edge&lt;/span&gt;&lt;/code&gt;
                visitor event point in depth-first search; the change should be backward-compatible
                with visitors that do not have that member function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disabled building of tests on Sun compiler.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multiple source vertices are supported in non-named-parameter versions
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth_first_visit&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth_first_search&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;,
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths_no_init&lt;/span&gt;&lt;/code&gt;.
                This feature is not yet documented; to use it, replace the single
                parameter for the source vertex in each of these functions by two
                input iterators of the same type containing the source vertices to
                use.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Hawick circuits algorithm; contributed by Louis Dionne.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added edge coloring algorithm; contributed by Maciej Piechotka.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added min-cost max-flow algorithm; contributed by Piotr Wygocki.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs and feature requests from Trac fixed: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5269&quot;&gt;#5269&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8317&quot;&gt;#8317&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8433&quot;&gt;#8433&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8791&quot;&gt;#8791&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8877&quot;&gt;#8877&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8986&quot;&gt;#8986&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9012&quot;&gt;#9012&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9080&quot;&gt;#9080&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Simplify a SFINAE check so that it will hopefully work on Sun 5.9
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8822&quot;&gt;#8822&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppress Visual C++ infinite loop warning (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8568&quot;&gt;#8568&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7156&quot;&gt;#7156&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7164&quot;&gt;#7164&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8277&quot;&gt;#8277&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8976&quot;&gt;#8976&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9065&quot;&gt;#9065&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9073&quot;&gt;#9073&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8277&quot;&gt;#9908&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Source breaking&lt;/strong&gt;: Deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xxx_dont_splay&lt;/span&gt;&lt;/code&gt; functions from splay
                containers. Deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splay_set_hook&lt;/span&gt;&lt;/code&gt;
                from splay containers, use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bs_set_hook&lt;/span&gt;&lt;/code&gt;
                instead. Both will be removed in Boost 1.56.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;ABI breaking&lt;/strong&gt;: Hash containers' end
                iterator was implemented pointing to one-past the end of the bucket
                array (see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8698&quot;&gt;#8698&lt;/a&gt;)
                causing severe bugs when values to be inserted where allocated next
                to the bucket array. End iterator implementation was changed to point
                to the beginning of the bucket array.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Big refactoring in order to reduce template and debug symbol bloat.
                Test object files have been slashed to half in MSVC compilers in
                Debug mode. Toolchains without Identical COMDAT Folding (ICF) should
                notice size improvements.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;span class=&quot;link&quot;&gt;SCARY iterators&lt;/span&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_alloc&lt;/span&gt;&lt;/code&gt; exceptions are now are
                not converted to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_lexical_cast&lt;/span&gt;&lt;/code&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8966&quot;&gt;#8966&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added static assert that checks for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;numeric_limits&lt;/span&gt;&lt;/code&gt;
                specializations if they are required for conversion. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HAS_INT128&lt;/span&gt;&lt;/code&gt; for detecting
                128 bit integers support &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8790&quot;&gt;#8790&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation improved and more usage examples added.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                General changes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a new configuration macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_LOG_WITHOUT_DEFAULT_FACTORIES&lt;/span&gt;&lt;/code&gt;.
                      By defining this macro the user can disable compilation of
                      the default filter and formatter factories used by settings
                      parsers. This can substantially reduce binary sizes while still
                      retaining support for settings parsers.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Rewritten some of the parsers to reduce the compiled binary
                      size. The rewritten parsers are more robust in detecting ambiguous
                      and incorrect input.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The following headers are deprecated: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ref_counter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;explicit_operator_bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;.
                      These headers will be removed in future releases. The contents
                      of these headers were moved to other libraries.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timer&lt;/span&gt;&lt;/code&gt;
                      attribute generating incorrect time readings on Windows on
                      heavy thread contention when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;QueryPerformanceCounter&lt;/span&gt;&lt;/code&gt;
                      API was used.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed a bug in the filter parser that prevented using parsed
                      filters with some attributes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed thread id formatting discrepancies between the default
                      sink and formatters.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Closed tickets: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8815&quot;&gt;#8815&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8819&quot;&gt;#8819&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8915&quot;&gt;#8915&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8917&quot;&gt;#8917&lt;/a&gt;,
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9139&quot;&gt;#9139&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9140&quot;&gt;#9140&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9153&quot;&gt;#9153&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9155&quot;&gt;#9155&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href=&quot;http://www.boost.org/libs/log/doc/html/log/changelog.html&quot;&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppress numerous warnings (mostly from GCC-4.8 and MSVC) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8384&quot;&gt;#8384&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8855&quot;&gt;#8855&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9107&quot;&gt;#9107&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9109&quot;&gt;#9109&lt;/a&gt;..
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed PGI compilation issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8333&quot;&gt;#8333&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed PGI constant value initialization issue that caused erf to
                generate incorrect results &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8621&quot;&gt;#8621&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Prevent macro expansion of some C99 macros that are also C++ functions
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8732&quot;&gt;#8732&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8733&quot;&gt;#8733&lt;/a&gt;..
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Student's T distribution to behave correctly with huge degrees
                of freedom (larger than the largest representable integer) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8837&quot;&gt;#8837&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make some core functions usable with &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&lt;/code&gt; even when the platform
                has no standard library &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&lt;/code&gt; support &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8940&quot;&gt;#8940&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix error handling of distributions to catch invalid scale and location
                parameters when the random variable is infinite &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9042&quot;&gt;#9042&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9126&quot;&gt;#9126&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add workaround for broken &amp;lt;tuple&amp;gt; in Intel C++ 14 &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9087&quot;&gt;#9087&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve consistency of argument reduction in the elliptic integrals
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9104&quot;&gt;#9104&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bug in inverse incomplete beta that results in cancellation errors
                when the beta function is really an arcsine or Student's T distribution.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix issue in Bessel I and K function continued fractions that causes
                spurious over/underflow.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7952&quot;&gt;#7952&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8764&quot;&gt;#8764&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8765&quot;&gt;#8765&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8842&quot;&gt;#8842&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8979&quot;&gt;#8979&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for Boost.Serialization.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppressed some GCC warnings. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8872&quot;&gt;8872&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in pow for large integer arguments. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8809&quot;&gt;8809&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in pow for calculation of 0[super N]. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8798&quot;&gt;8798&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in fixed precision cpp_int IO code that causes conversion
                to string to fail when the bit count is very small (less than CHAR_BIT).
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8745&quot;&gt;8745&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in cpp_int that causes left shift to fail when a fixed
                precision type would overflow. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8741&quot;&gt;8741&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some cosmetic warnings from cpp_int. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8748&quot;&gt;8748&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed calls to functions which are required to be macros in C99.
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8732&quot;&gt;8732&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug that causes construction from INT_MIN, LONG_MIN etc to
                fail in cpp_int. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8711&quot;&gt;8711&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Boost.MultiIndex has been brought to a higher level of compliance
                with C++11.
              &lt;/div&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;
                    is now efficiently movable.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Initializer lists supported.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Emplace functions provided.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Non-copyable elements (such as &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;) supported. This includes
                    insertion of a range [&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;first&lt;/span&gt;&lt;/code&gt;,&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;last&lt;/span&gt;&lt;/code&gt;) where the iterators point
                    to a type that is convertible to that of the element: no copy
                    construction happens in the process.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Random access indices provide &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shrink_to_fit&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
                  &lt;/div&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
              &lt;div&gt;
                Refer to the &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/compiler_specifics.html&quot;&gt;compiler
                specifics&lt;/a&gt; section for limitations on pre-C++11 compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The following classes are deprecated:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#member_offset&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;member_offset&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;const_mem_fun_explicit&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mem_fun_explicit&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_equal_to&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_equal_to&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_less&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_less&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_greater&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_greater&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_hash&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_hash&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/mpi/&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced calls to deprecated MPI functions
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for multi-threaded initialization
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added in-place collectives
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/phoenix/&quot;&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9049&quot;&gt;#9049&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;phoenix&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt;
                constructor is constexpr.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_map/index.html&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                dynamic_properties objects can now be built by non-destructively
                chaining &lt;code&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;pm&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; calls. Example:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;dynamic_properties&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;color_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;pos&amp;quot;&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;position_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The use of raw pointers as property maps is deprecated; it often
                failed on Visual Studio in the past. This usage has been removed
                from all tests and examples in Boost.Graph. The replacement to use
                for vertex properties in graphs (the most common use for this feature)
                is:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;make_iterator_property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class=&quot;identifier&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;vertex_index&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;))&lt;/span&gt;
&lt;/pre&gt;
              &lt;div&gt;
                (Note: the lack of namespace qualification on get() in this code
                is necessary for generic code). Outside a graph context, the closest
                equivalent is:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;make_iterator_property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;typed_identity_property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;())&lt;/span&gt;
&lt;/pre&gt;
              &lt;div&gt;
                There are commented-out static assertions on lines 151 and 159 of
                &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; that can be un-commented to find
                deprecated uses of pointers in user code.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/rational&quot;&gt;Rational&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lowest&lt;/span&gt;&lt;/code&gt; and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;max_digits10&lt;/span&gt;&lt;/code&gt;, members
                of std::numeric_limits added in C++11, to the unit-test code. Needed
                since Boost.Test refers to one of them when compiled in C++11 mode.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed initialization of some internal variables to something that
                cannot be a narrowing conversion, which fixes issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5855&quot;&gt;#5855&lt;/a&gt;. Needed
                since narrowing conversions are an error in C++11.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/index.html&quot;&gt;SmartPtr&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;smart_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ref_counter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; header, extracted from Boost.Log.
                The header implements a mixin base class that adds support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ptr&lt;/span&gt;&lt;/code&gt; to user's classes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/Thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8519&quot;&gt;#8519&lt;/a&gt;
                      Synchro: Update class barrier with a completion function.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8515&quot;&gt;#8515&lt;/a&gt;
                      Async: Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;then&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8519&quot;&gt;#8519&lt;/a&gt;
                      Synchro: Update class barrier with a completion function
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8615&quot;&gt;#8615&lt;/a&gt;
                      Async: Replace make_future/make_shared_future by make_ready_future.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8627&quot;&gt;#8627&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;::unwrap and unwrapping constructor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8677&quot;&gt;#8677&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;::get_or.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8678&quot;&gt;#8678&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;::fallback_to.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8891&quot;&gt;#8891&lt;/a&gt;
                      upgrade_to_unique_lock: missing mutex() function.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8955&quot;&gt;#8955&lt;/a&gt;
                      Request for more efficient way to get exception_ptr from future.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7461&quot;&gt;#7461&lt;/a&gt;
                      detail::win32::ReleaseSemaphore may be called with count_to_release
                      equal to 0 Boost 1.55.0 closed viboes Bugs
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8070&quot;&gt;#8070&lt;/a&gt;
                      prefer GetTickCount64 over GetTickCount
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8768&quot;&gt;#8768&lt;/a&gt;
                      win32 condition_variable::wait_until infinite wait in rare
                      cases.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8817&quot;&gt;#8817&lt;/a&gt;
                      Boost Thread Windows CE _createthreadex handling breaks mingw
                      w64.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8943&quot;&gt;#8943&lt;/a&gt;
                      Failed to compile code using boost::call_once with Intel C++
                      Composer XE 2013 on Windows.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8931&quot;&gt;#8931&lt;/a&gt;
                      Typos in external_locking reference.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9029&quot;&gt;#9029&lt;/a&gt;
                      Misprint in documentation.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9037&quot;&gt;#9037&lt;/a&gt;
                      gcc -Wshadow gives warnings in condition_variable{,_fwd}.hpp.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9041&quot;&gt;#9041&lt;/a&gt;
                      Boost.Thread DSO's may need to link with Boost.Atomic.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9048&quot;&gt;#9048&lt;/a&gt;
                      boost::scoped_thread useless ctor with variadic template arguments.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9079&quot;&gt;#9079&lt;/a&gt;
                      Condition variable will wait forever for some timepoint values
                      (Win).
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/timer/&quot;&gt;Timer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation on Intel compiler &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8956&quot;&gt;#8956&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_copy_contructible&lt;/span&gt;&lt;/code&gt;
                trait &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8802&quot;&gt;#8802&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8851&quot;&gt;#8851&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8874&quot;&gt;#8874&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid exposing some detail functions via. ADL on the iterators.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; can be set to use TR1
                protocol by default and fall back to &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;
                if the function object does not support it (like C++11 lambda functions,
                for example). Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_RESULT_OF_USE_TR1_WITH_DECLTYPE_FALLBACK&lt;/span&gt;&lt;/code&gt;
                configuration macro to enable this mode.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved support for C++11 in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;base_from_member&lt;/span&gt;&lt;/code&gt;
                class template. The class implements perfect forwarding for the constructor
                arguments, if the compiler supports rvalue references, variadic templates
                and function template default arguments.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;explicit_operator_bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                headers, which were extracted from Boost.Log. The headers implement
                utilities for defining explicit conversion operators to &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; and a deleter function object
                that does nothing, respectively.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation of constructor and assignment operator with const
                rvalues input parameters &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8988&quot;&gt;#8988&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation of move assignment operator for situations when
                one of the variant template classes has nothrow copy constructor
                and throwing move constructor &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8772&quot;&gt;#8772&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix compilation on exception-disabled environments &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8717&quot;&gt;#8717&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix unreachable code warnings &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8665&quot;&gt;#8665&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed duplicate code &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7601&quot;&gt;#7601&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8843&quot;&gt;#8843&lt;/a&gt; throw instead of assert at incomplete charset
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8880&quot;&gt;#8880&lt;/a&gt; remove unused local typedef
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8882&quot;&gt;#8882&lt;/a&gt; use RAII instead of try/catch in sequence_stack.hpp
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8474&quot;&gt;#8474&lt;/a&gt; make xpressive play nice with clang's -Wimplicit-fallthrough
                diagnostic
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/tools/quickbook&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Quickbook 1.6 finalized, see the &lt;a href=&quot;http://www.boost.org/doc/html/quickbook/versions.html#quickbook.versions.1_6&quot;&gt;Quickbook
                documentation for details&lt;/a&gt;. &lt;em&gt;(TODO: Will be out of
                date until the beta documentation has been uploaded)&lt;/em&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11 mode: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;em&gt;TODO&lt;/em&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;em&gt;TODO&lt;/em&gt;
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.54.0</title><link>http://www.boost.org/users/history/version_1_54_0.html</link><guid>http://www.boost.org/users/history/version_1_54_0.html</guid><pubDate>Mon, 1 Jul 2013 10:10:02 -0700</pubDate><description>



  &lt;div id=&quot;version_1_54_0.patches&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Patches&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      These are patches from library authors which were found too late to be fixed
      in the 1.54.0 release. Be careful as they have not been through the normal
      testing process.
    &lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/001-coroutine.patch&quot;&gt;Coroutine patch&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/002-date-time.patch&quot;&gt;Date Time patch&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/003-log.patch&quot;&gt;Log patch&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/004-thread.patch&quot;&gt;Thread patch&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.news&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;News&lt;/span&gt;&lt;/h3&gt;
    &lt;div id=&quot;version_1_54_0.news.supported_cpus&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported CPUs&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        Boost no longer supports the 80386 target CPU, the minimum x86 32-bit target
        is i486. The 80386 target was not properly supported by &lt;a href=&quot;http://www.boost.org/libs/smart_ptr/&quot;&gt;Boost.SmartPtr&lt;/a&gt;
        and &lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Boost.Atomic&lt;/a&gt; (as well as the libraries
        that used them internally) even before this release. Some Boost libraries
        may have higher requirements on the minimum target CPU (like &lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Boost.Log&lt;/a&gt;
        for example), see the respective library documentation for details.
      &lt;/p&gt;
      &lt;p&gt;
        Also by default, when building Boost for x86 32-bit targets it will compile
        for i686 (Pentium Pro) and later CPUs. This can be changed by specifying
        the &lt;tt&gt;instruction-set&lt;/tt&gt; property in &lt;tt&gt;b2&lt;/tt&gt;
        or &lt;tt&gt;bjam&lt;/tt&gt; command line, for example:
      &lt;/p&gt;
&lt;pre&gt;b2 variant=release architecture=x86 instruction-set=i486 stage
&lt;/pre&gt;
      &lt;p&gt;
        Possible values for the &lt;tt&gt;instruction-set&lt;/tt&gt; are:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            Target for the host CPU: &lt;tt&gt;native&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Generic x86 CPUs: &lt;tt&gt;i486&lt;/tt&gt;, &lt;tt&gt;i586&lt;/tt&gt;,
            &lt;tt&gt;i686&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Intel CPUs: &lt;tt&gt;pentium&lt;/tt&gt;, &lt;tt&gt;pentium-mmx&lt;/tt&gt;,
            &lt;tt&gt;pentiumpro&lt;/tt&gt;, &lt;tt&gt;pentium2&lt;/tt&gt;, &lt;tt&gt;pentium3&lt;/tt&gt;,
            &lt;tt&gt;pentium3m&lt;/tt&gt;, &lt;tt&gt;pentium-m&lt;/tt&gt;, &lt;tt&gt;pentium4&lt;/tt&gt;,
            &lt;tt&gt;pentium4m&lt;/tt&gt;, &lt;tt&gt;prescott&lt;/tt&gt;, &lt;tt&gt;nocona&lt;/tt&gt;,
            &lt;tt&gt;core2&lt;/tt&gt;, &lt;tt&gt;corei7&lt;/tt&gt;, &lt;tt&gt;corei7-avx&lt;/tt&gt;,
            &lt;tt&gt;core-avx-i&lt;/tt&gt;, &lt;tt&gt;conroe&lt;/tt&gt;, &lt;tt&gt;conroe-xe&lt;/tt&gt;,
            &lt;tt&gt;conroe-l&lt;/tt&gt;, &lt;tt&gt;allendale&lt;/tt&gt;, &lt;tt&gt;merom&lt;/tt&gt;,
            &lt;tt&gt;merom-xe&lt;/tt&gt;, &lt;tt&gt;kentsfield&lt;/tt&gt;, &lt;tt&gt;kentsfield-xe&lt;/tt&gt;,
            &lt;tt&gt;penryn&lt;/tt&gt;, &lt;tt&gt;wolfdale&lt;/tt&gt;, &lt;tt&gt;yorksfield&lt;/tt&gt;,
            &lt;tt&gt;nehalem&lt;/tt&gt;, &lt;tt&gt;sandy-bridge&lt;/tt&gt;, &lt;tt&gt;ivy-bridge&lt;/tt&gt;,
            &lt;tt&gt;haswell&lt;/tt&gt;, &lt;tt&gt;atom&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            AMD CPUs: &lt;tt&gt;k6&lt;/tt&gt;, &lt;tt&gt;k6-2&lt;/tt&gt;, &lt;tt&gt;k6-3&lt;/tt&gt;,
            &lt;tt&gt;athlon&lt;/tt&gt;, &lt;tt&gt;athlon-tbird&lt;/tt&gt;, &lt;tt&gt;athlon-4&lt;/tt&gt;,
            &lt;tt&gt;athlon-xp&lt;/tt&gt;, &lt;tt&gt;athlon-mp&lt;/tt&gt;, &lt;tt&gt;k8&lt;/tt&gt;,
            &lt;tt&gt;opteron&lt;/tt&gt;, &lt;tt&gt;athlon64&lt;/tt&gt;, &lt;tt&gt;athlon-fx&lt;/tt&gt;,
            &lt;tt&gt;k8-sse3&lt;/tt&gt;, &lt;tt&gt;opteron-sse3&lt;/tt&gt;, &lt;tt&gt;athlon64-sse3&lt;/tt&gt;,
            &lt;tt&gt;amdfam10&lt;/tt&gt;, &lt;tt&gt;barcelona&lt;/tt&gt;, &lt;tt&gt;bdver1&lt;/tt&gt;,
            &lt;tt&gt;bdver2&lt;/tt&gt;, &lt;tt&gt;bdver3&lt;/tt&gt;, &lt;tt&gt;btver1&lt;/tt&gt;,
            &lt;tt&gt;btver2&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            VIA CPUs: &lt;tt&gt;c3&lt;/tt&gt;, &lt;tt&gt;c3-2&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            IDT CPUs: &lt;tt&gt;winchip-c6&lt;/tt&gt;, &lt;tt&gt;winchip2&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
        Note that not all these values may be supported by a particular compiler.
      &lt;/p&gt;
    &lt;/div&gt;
    &lt;div id=&quot;version_1_54_0.news.signals_deprecated&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Signals deprecated&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        Boost.Signals is no longer being actively maintained, so it has been deprecated.
        Do not use Boost.Signals for new development (use &lt;a href=&quot;http://www.boost.org/libs/signals2/&quot;&gt;Boost.Signals2&lt;/a&gt;
        instead). If you have existing Boost.Signals-based code, it will continue
        to work, but consider moving to Boost.Signals2. There is &lt;a href=&quot;http://www.boost.org/doc/html/signals2/api_changes.html#signals2.porting&quot;&gt;a
        porting guide&lt;/a&gt; in the Signals2 documentation.
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
  Logging library, from Andrey
          Semashev.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/tti/&quot;&gt;TTI&lt;/a&gt;:&lt;/span&gt;
  Type Traits Introspection library,
          from Edward Diener.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_erasure/&quot;&gt;Type Erasure&lt;/a&gt;:&lt;/span&gt;
  Runtime polymorphism
          based on concepts.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes comment typos (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7917&quot;&gt;#7917&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Silence unused variable warnings (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6926&quot;&gt;#6926&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The return types for copy_while and copy_until have been changed.
                This is an interface change. If you were using the return values
                from these functions, then you will have to modify your code. Instead
                of just returning the modified &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;OutputIterator&lt;/span&gt;&lt;/code&gt;,
                these functions now return a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;InputIterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;OutputIterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;. If this change affects your
                code, the simplest change is to add a &lt;code&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;second&lt;/span&gt;&lt;/code&gt; to the end of the call,
                which will get you the same behavior that you had before.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++14 versions of 'is_permutation', 'equal' and 'mismatch'.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++11 features support &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6999&quot;&gt;#6999&lt;/a&gt;:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Move assignment and move constructors.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                      modifiers.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new traits classes, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;handler_type&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_result&lt;/span&gt;&lt;/code&gt;,
                that allow the customisation of the return type of an initiating
                function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                function, a high-level wrapper for running stackful coroutines, based
                on the Boost.Coroutine library. The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function enables programs to implement
                asynchronous logic in a synchronous manner. For example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;
                &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_some&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_buffer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;/code&gt; special value, which
                provides first-class support for returning a C++11 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;/code&gt; from an asynchronous operation's
                initiating function. For example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;
                &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_some&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_buffer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Promoted the stackless coroutine class and macros to be part of Asio's
                documented interface, rather than part of the HTTP server 4 example.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a new handler hook called &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio_handler_is_continuation&lt;/span&gt;&lt;/code&gt;.
                Asynchronous operations may represent a continuation of the asynchronous
                control flow associated with the current executing handler. The
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio_handler_is_continuation&lt;/span&gt;&lt;/code&gt;
                hook can be customised to return &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/code&gt;
                if this is the case, and Asio's implementation can use this knowledge
                to optimise scheduling of the new handler. To cover common cases,
                Asio customises the hook for strands, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and composed asynchronous operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added four new generic protocol classes, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;datagram_protocol&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;raw_protocol&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;seq_packet_protocol&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;/code&gt;, which implement
                the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Protocol&lt;/span&gt;&lt;/code&gt; type
                requirements, but allow the user to specify the address family (e.g.
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;AF_INET&lt;/span&gt;&lt;/code&gt;) and protocol
                type (e.g. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;/code&gt;)
                at runtime.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++11 move constructors that allow the conversion of a socket
                (or acceptor) into a more generic type. For example, an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; can be converted into a
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; via move construction.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Extended the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_socket_acceptor&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; class's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_accept&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; functions to allow a new connection
                to be accepted directly into a socket of a more generic type. For
                example, an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;acceptor&lt;/span&gt;&lt;/code&gt; can be used to accept
                into a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; object.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Moved existing examples into a C++03-specific directory, and added
                a new directory for C++11-specific examples. A limited subset of
                the C++03 examples have been converted to their C++11 equivalents.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various SSL enhancements. Thanks go to Nick Jones, on whose work
                these changes are based.
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for SSL handshakes with re-use of data already
                      read from the wire. New overloads of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; class's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;handshake&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_handshake&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; functions have been added.
                      These accept a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConstBufferSequence&lt;/span&gt;&lt;/code&gt;
                      to be used as initial input to the ssl engine for the handshake
                      procedure.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for creation of TLSv1.1 and TLSv1.2 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; objects.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;set_verify_depth&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                      classes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added the ability to load SSL certificate and key data from
                      memory buffers. New functions, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;add_certificate_authority&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_certificate&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_certificate_chain&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_private_key&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_rsa_private_key&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_tmp_dh&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, have been added to the
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt;
                      to automatically disable SSL compression by default. To enable,
                      use the new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;clear_options&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function, as in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;my_context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;clear_options&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;no_compression&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a potential deadlock in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal_set&lt;/span&gt;&lt;/code&gt;
                implementation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an error in acceptor example in documentation &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8421&quot;&gt;#8421&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed copy-paste errors in waitable timer documentation &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8602&quot;&gt;#8602&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added assertions to satisfy some code analysis tools &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7739&quot;&gt;#7739&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a malformed &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#warning&lt;/span&gt;&lt;/code&gt;
                directive &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7939&quot;&gt;#7939&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a potential data race in the Linux &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll&lt;/span&gt;&lt;/code&gt;
                implementation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a Windows-specific bug, where certain operations might generate
                an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt; with
                an invalid (i.e. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;NULL&lt;/span&gt;&lt;/code&gt;)
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_category&lt;/span&gt;&lt;/code&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8613&quot;&gt;#8613&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_waitable_timer&lt;/span&gt;&lt;/code&gt;'s
                underlying implementation so that it can handle any &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;time_point&lt;/span&gt;&lt;/code&gt; value without overflowing
                the intermediate duration objects.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a problem with lost thread wakeups that can occur when making
                concurrent calls to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; on the same &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                object &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8354&quot;&gt;#8354&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed implementation of asynchronous connect operation so that it
                can cope with spurious readiness notifications from the reactor &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7961&quot;&gt;#7961&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8079&quot;&gt;#8079&lt;/a&gt;
                      Chrono memory leak
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8318&quot;&gt;#8318&lt;/a&gt;
                      BOOST_FORCEINLINE constructors of time_point and duration
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8367&quot;&gt;#8367&lt;/a&gt;
                      chrono does not compile with clang from XCode 4.5.2 with -std=c++11
                      -stdlib=libc++ and -arch armv7
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8370&quot;&gt;#8370&lt;/a&gt;
                      typo in chrono reference
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8435&quot;&gt;#8435&lt;/a&gt;
                      Can't compile Chrono on HP-UX due to no CLOCK_REALTIME macro.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8032&quot;&gt;#8032&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added experimental &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;static_vector&lt;/span&gt;&lt;/code&gt;
                class, based on Andrew Hundt's and Adam Wulkiewicz's high-performance
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;varray&lt;/span&gt;&lt;/code&gt; class.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Speed improvements in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;
                constructors/copy/move/swap, dispatching to memcpy when possible.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7227&quot;&gt;#7227&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7921&quot;&gt;#7921&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7969&quot;&gt;#7969&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8118&quot;&gt;#8118&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8294&quot;&gt;#8294&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8553&quot;&gt;#8553&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for SPARC architecture added.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for segmented stacks (stack grows on demand) added.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7805&quot;&gt;#7805&lt;/a&gt;
                Typo
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7972&quot;&gt;#7972&lt;/a&gt;
                GCC warnings
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7988&quot;&gt;#7988&lt;/a&gt;
                C++11 range-for
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8023&quot;&gt;#8023&lt;/a&gt;
                Using iterator traits
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8024&quot;&gt;#8024&lt;/a&gt;
                Create const_iterator
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8101&quot;&gt;#8101&lt;/a&gt;
                Postfix operator++ for iterator
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8526&quot;&gt;#8526&lt;/a&gt;
                memory leak
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8544&quot;&gt;#8544&lt;/a&gt;
                calling managed DLL
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      added Spatial Index, developed for Boost.Geometry by Adam Wulkiewicz.
                      The spatial index was originally started by Federico J. Fernandez
                      during the Google Summer of Code 2008 program, mentored by
                      Hartmut Kaiser.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      added SVG-output, this was already in extensions for several
                      years
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Documentation&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      small fixes of missing words
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      collinear opposite segments did sometimes (in circles) have
                      a robustness issue, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixed insertion of false intersection point (found by buffer)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      applied patch of Vladimir Petrovic for debugging traversals
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7462&quot;&gt;7462&lt;/a&gt;
                      degenerate union result for float, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7465&quot;&gt;7465&lt;/a&gt;
                      wrong construtors access type in scale_transformer class, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7802&quot;&gt;7802&lt;/a&gt;
                      cart_intersect.hpp unused parameter warnings, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8254&quot;&gt;8254&lt;/a&gt;
                      faulty intersection, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8393&quot;&gt;8393&lt;/a&gt;
                      polygon model doesn't adhere to stated Polygon concept rules,
                      doc updated.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8403&quot;&gt;8403&lt;/a&gt;
                      silenced compiler warning C4127: conditional expression is
                      constant
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8405&quot;&gt;8405&lt;/a&gt;
                      silenced compiler warning C4189: '...' : local variable is
                      initialized but not referenced
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Internal changes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Made several algorithms variant-aware (append, area, clear,
                      convert, equals, length, num_points)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6780&quot;&gt;#6780&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7016&quot;&gt;#7016&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7155&quot;&gt;#7155&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7845&quot;&gt;#7845&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7863&quot;&gt;#7863&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7877&quot;&gt;#7877&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8166&quot;&gt;#8166&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8192&quot;&gt;#8192&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8398&quot;&gt;#8398&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8411&quot;&gt;#8411&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8427&quot;&gt;#8427&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8428&quot;&gt;#8428&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8434&quot;&gt;#8434&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8490&quot;&gt;#8490&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8681&quot;&gt;#8681&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added updates to VF2 subgraph isomorphism from Jakob Lykke Andersen
                and Flavio De Lorenzi.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added maximum adjacency search from Fernando Vilas.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added timeout support from Brammert Ottens to resource-constrained
                shortest paths (r_c_shortest_paths) algorithm.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various fixes to documentation and examples and removal of outdated
                compiler workarounds.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for platform-specific flags to mapped_region (ticket
                #8030)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7484&quot;&gt;#7484&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7598&quot;&gt;#7598&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7682&quot;&gt;#7682&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7923&quot;&gt;#7923&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7924&quot;&gt;#7924&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7928&quot;&gt;#7928&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7936&quot;&gt;#7936&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8521&quot;&gt;#8521&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8595&quot;&gt;#8595&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;ABI breaking&lt;/strong&gt;: Changed bootstamp
                function in Windows to use EventLog service start time as system
                bootup time. Previously used &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;LastBootupTime&lt;/span&gt;&lt;/code&gt;
                from WMI was unstable with time synchronization and hibernation and
                unusable in practice. If you really need to obtain pre Boost 1.54
                behaviour define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_BOOTSTAMP_IS_LASTBOOTUPTIME&lt;/span&gt;&lt;/code&gt;
                from command line or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;workaround&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
                support (bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7849&quot;&gt;#7849&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iostreams/&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tee&lt;/span&gt;&lt;/code&gt; now works correctly
                for std::streams (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8315&quot;&gt;#8315&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8385&quot;&gt;#8385&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8460&quot;&gt;#8460&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid warning from Clang's &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wimplicit&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fallthrough&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8482&quot;&gt;#8482&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Converting to character pointer now triggers compile time assert
                instead of runtime &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8334&quot;&gt;#8334&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Lexical cast is now capable of converting &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;int128_type&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;uint128_type&lt;/span&gt;&lt;/code&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7909&quot;&gt;#7909&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed internal stream buffer handling, now works with libc++ &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8267&quot;&gt;#8267&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7704&quot;&gt;#7704&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restored getting address of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;/code&gt;
                function that was broken in 1.53.0 &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7421&quot;&gt;#7421&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed warnings, internals and tests &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2558&quot;&gt;#2558&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7949&quot;&gt;#7949&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8162&quot;&gt;#8162&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8369&quot;&gt;#8369&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8547&quot;&gt;#8547&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Major reorganization to incorporate other Boost.Math like Integer
                Utilities (Greatest Common Divisor and Least Common Multiple), quaternions
                and octonions. Making new chapter headings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added many references to Boost.Multiprecision and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_dec_float_50&lt;/span&gt;&lt;/code&gt;
                as an example of a User-defined Type (UDT).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Clang to list of supported compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed constants to use a thread-safe cache of computed values when
                used at arbitrary precision.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added finding zeros of Bessel functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cyl_bessel_j_zero&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cyl_neumann_zero&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;airy_ai_zeros&lt;/span&gt;&lt;/code&gt; and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;airy_bi_zeros&lt;/span&gt;&lt;/code&gt;(by
                Christopher Kormanyos).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                More accuracy improvements to the Bessel J and Y functions from Rocco
                Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed nasty cyclic dependency bug that caused some headers to not
                compile &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7999&quot;&gt;#7999&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in __tgamma that caused spurious overflow for arguments
                between 142.5 and 143.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in raise_rounding_error that caused it to return an incorrect
                result when throwing an exception is turned off &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7905&quot;&gt;#7905&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added minimal __float128 support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in edge-cases of poisson quantile &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8308&quot;&gt;#8308&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Adjusted heuristics used in Halley iteration to cope with inverting
                the incomplete beta in tricky regions where the derivative is flatlining.
                Example is computing the quantile of the Fisher F distribution for
                probabilities smaller than machine epsilon. See ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8314&quot;&gt;#8314&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: Exit points broken for the favor_compile_time policy.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: copy breaks exit points of subsubmachines.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8046&quot;&gt;#8046&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7969&quot;&gt;#7969&lt;/a&gt;),
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8231&quot;&gt;#8231&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change&lt;/strong&gt; renamed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rational_adapter&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rational_adaptor&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for &lt;a href=&quot;http://perso.ens-lyon.fr/nathalie.revol/software.html&quot;&gt;MPFI&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add logged_adaptor.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for 128-bit floats via GCC's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__float128&lt;/span&gt;&lt;/code&gt;
                or Intel's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_Quad&lt;/span&gt;&lt;/code&gt;
                data types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for user-defined literals in cpp_int, improve &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;constexpr&lt;/span&gt;&lt;/code&gt; support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in integer division of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                that results in incorrect sign of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                when both arguments are small enough to fit in a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;double_limb_type&lt;/span&gt;&lt;/code&gt;.
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8126&quot;&gt;8126&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in subtraction of a single limb in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                that results in incorrect value when the result should have a 0 in
                the last limb: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8133&quot;&gt;8133&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                where division of 0 by something doesn't get zero in the result:
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8160&quot;&gt;8160&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in some transcendental functions that caused incorrect
                return values when variables are reused, for example with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8326&quot;&gt;8326&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updates and fixes to the Voronoi documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8026&quot;&gt;#8026&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8197&quot;&gt;#8197&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8257&quot;&gt;#8257&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_map/&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compose_property_map&lt;/span&gt;&lt;/code&gt;
                from Guillaume Pinot.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/range/&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bug fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6944&quot;&gt;#6944&lt;/a&gt; Some Range concepts use the incorrect Iterator concept
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7407&quot;&gt;#7407&lt;/a&gt; istream_range does not compile with wcin
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7408&quot;&gt;#7408&lt;/a&gt; istream_range should not pull istream
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7731&quot;&gt;#7731&lt;/a&gt; irange doesn't end iteration properly when step_size
                      is 3 or more
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7827&quot;&gt;#7827&lt;/a&gt; [range] cant compile r | indexed to range algorithm
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8338&quot;&gt;#8338&lt;/a&gt; Iterator range does not work with pointer to array
                      as iterator
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8453&quot;&gt;#8453&lt;/a&gt; Incorrect configuration macro BOOST_NO_PARTIAL_TEMPLATE_SPECIALIZATION
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/signals/&quot;&gt;Signals&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                No longer actively maintained, so it is deprecated. Use &lt;a href=&quot;http://www.boost.org/libs/signals2&quot;&gt;Signals2&lt;/a&gt;
                for new development.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7285&quot;&gt;#7285&lt;/a&gt;
                      C++11 compliance: Allow to pass movable arguments for call_once.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7445&quot;&gt;#7445&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;.then
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7449&quot;&gt;#7449&lt;/a&gt;
                      Synchro: Add a synchronized value class
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4878&quot;&gt;#4878&lt;/a&gt;
                      MinGW 4.5.0 undefined reference to bool interruptible_wait(detail::win32::handle
                      handle_to_wait_for,detail::t imeout target_time).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4882&quot;&gt;#4882&lt;/a&gt;
                      Win32 shared_mutex does not handle timeouts correctly.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5752&quot;&gt;#5752&lt;/a&gt;
                      boost::call_once() is unreliable on some platforms
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6652&quot;&gt;#6652&lt;/a&gt;
                      Boost.Thread shared_mutex.hpp:50:99: warning: dereferencing
                      type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6843&quot;&gt;#6843&lt;/a&gt;
                      [Intel C++] Compile Errors with '#include &amp;lt;atomic&amp;gt;'
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6966&quot;&gt;#6966&lt;/a&gt;
                      future boost::future_category inconsistent dll linkage
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7720&quot;&gt;#7720&lt;/a&gt;
                      exception lock_error while intensive locking/unlocking of mutex
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7755&quot;&gt;#7755&lt;/a&gt;
                      Thread: deadlock with shared_mutex on Windows
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7980&quot;&gt;#7980&lt;/a&gt;
                      Build error: msvc-11.0 and BOOST_THREAD_DONT_USE_DATETIME
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7982&quot;&gt;#7982&lt;/a&gt;
                      pthread_delay_np() parm compile error on AIX
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8027&quot;&gt;#8027&lt;/a&gt;
                      thread library fails to compile with Visual Studio 2003
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8070&quot;&gt;#8070&lt;/a&gt;
                      prefer GetTickCount64 over GetTickCount
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8136&quot;&gt;#8136&lt;/a&gt;
                      boost::this_thread::sleep_for() sleeps longer than it should
                      in Windows
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8212&quot;&gt;#8212&lt;/a&gt;
                      Boost thread compilation error on Solaris 10
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8237&quot;&gt;#8237&lt;/a&gt;
                      fix documentation for 'thread_group'
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8239&quot;&gt;#8239&lt;/a&gt;
                      barrier::wait() not marked as interruption_point
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8323&quot;&gt;#8323&lt;/a&gt;
                      boost::thread::try_join_for/try_join_until may block indefinitely
                      due to a combination of problems in Boost.Thread and Boost.Chrono
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8337&quot;&gt;#8337&lt;/a&gt;
                      The internal representation of &amp;quot;std::string(this-&amp;gt;code()-&amp;gt;message())&amp;quot;
                      escapes, but is destroyed when it exits scope.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8371&quot;&gt;#8371&lt;/a&gt;
                      C++11 once_flag enabled when constexpr is not available
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8443&quot;&gt;#8443&lt;/a&gt;
                      Header file inclusion order may cause crashes
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8451&quot;&gt;#8451&lt;/a&gt;
                      Missing documented function 'boost::scoped_thread::joinable'
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8530&quot;&gt;#8530&lt;/a&gt;
                      [Coverity] Unused variable thread_handle, uninitialized variable
                      cond_mutex in thread/pthread/thread_data.hpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8596&quot;&gt;#8596&lt;/a&gt;
                      With C++0x enabled, boost::packaged_task stores a reference
                      to function objects, instead of a copy.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New type traits implemented &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8189&quot;&gt;#8189&lt;/a&gt;:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      is_nothrow_move_constructible
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      is_nothrow_move_assignable
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      has_trivial_move_assign
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      has_trivial_move_constructor
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/ublas&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6511&quot;&gt;#6511&lt;/a&gt; Division by scalar should use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;enable_if&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7297&quot;&gt;#7297&lt;/a&gt; Make the free functions 'num_columns' and 'num_rows' support
                the uBLAS traits system and better work with expression types
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6010&quot;&gt;#6010&lt;/a&gt; fixed linkage problems in assignment.hpp
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                updated doc
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some very basic &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                support.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_string_ref&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8067&quot;&gt;#8067&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;string_ref&lt;/span&gt;&lt;/code&gt;'s
                logical operators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Update noncopyable for C++11 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6578&quot;&gt;#6578&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix noncopyable compiler warning when used in DLL interface (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6935&quot;&gt;#6935&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;/code&gt; with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt;
                on SolarisStudio compiler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7079&quot;&gt;#7079&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disable annoying MSVC warning about operator comma (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7663&quot;&gt;#7663&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Now uses new type traits from Boost.TypeTrait to detect &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt; constructors and assignment
                operators &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8296&quot;&gt;#8296&lt;/a&gt;. This shall increase performance of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;variant&lt;/span&gt;&lt;/code&gt; for many types in C++11.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multivisitation implemented &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8459&quot;&gt;#8459&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation updated to reflect C++11 features support.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove unused variables, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8039&quot;&gt;#8039&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid name clash with macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;None&lt;/span&gt;&lt;/code&gt;
                in glx.h, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8204&quot;&gt;#8204&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Silence a gcc warning, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8138&quot;&gt;#8138&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98 mode: 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.7.2, 4.7.3, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11 mode: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.2, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2, from Subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, with libc++: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.2, 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98 mode: 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.7.3, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11 mode: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from Subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from Subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.2, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 9.0, 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: 12.1.0.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.53.0</title><link>http://www.boost.org/users/history/version_1_53_0.html</link><guid>http://www.boost.org/users/history/version_1_53_0.html</guid><pubDate>Mon, 4 Feb 2013 10:29:19 -0800</pubDate><description>



  &lt;div id=&quot;version_1_53_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
  C++11-style &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
          from Helge Bahmann, maintained by Tim Blechmann.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
  Coroutine library,
          from Oliver Kowalke.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lockfree/&quot;&gt;Lockfree&lt;/a&gt;:&lt;/span&gt;
  Lockfree data structures,
          from Tim Blechmann.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
  Extended
          precision arithmetic types for floating point, integer and rational arithmetic
          from John Maddock and Christopher Kormanyos.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/odeint/&quot;&gt;Odeint&lt;/a&gt;:&lt;/span&gt;
  Solving ordinary
          differential equations, from Karsten Ahnert and Mario Mulansky.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.news&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;News&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      This release contains a fix for ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7743&quot;&gt;#7743&lt;/a&gt;, in Boost.Locale. For more
      details, see the &lt;a href=&quot;http://www.boost.org/users/news/boost_locale_security_notice.html&quot;&gt;security
      notice&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed non-ASCII char in comment (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7781&quot;&gt;#7781&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the Knuth-Morris-Pratt docs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7656&quot;&gt;#7656&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/array/&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for boost::get and std::get (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7652&quot;&gt;#7652&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some 64-to-32-bit conversion warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7459&quot;&gt;#7459&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some small errors in documentation and comments (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7761&quot;&gt;#7761&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an error in the example embedded in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_option&lt;/span&gt;&lt;/code&gt;'s
                documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7562&quot;&gt;#7562&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&lt;/code&gt;
                rather than &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/code&gt; for
                SSL_CTX options, to match OpenSSL (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7209&quot;&gt;#7209&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_snwprintf&lt;/span&gt;&lt;/code&gt;
                to address a compile error due to the changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swprintf&lt;/span&gt;&lt;/code&gt;
                signature in recent versions of MinGW (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7373&quot;&gt;#7373&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a deadlock that can occur on Windows when shutting down a pool
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt; threads
                due to running out of work (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7552&quot;&gt;#7552&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                qualifier for error categories (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7797&quot;&gt;#7797&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed UNIX domain socket example to treat errors from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;accept&lt;/span&gt;&lt;/code&gt; as non-fatal (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7488&quot;&gt;#7488&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a small block recycling optimisation to improve default memory
                allocation behaviour.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/bimap/&quot;&gt;Bimap&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Refactor map_view_iterator to improve error messages.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed replace_(left/right/key/data) bug when using relations with
                info.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed vector_of and list_of views &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; bug.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed vector_of views &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; functions return value.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The chrono i/o version included in Boost.Chrono 1.2.x has been
                      completly refactored in version 2.0.0
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The manipulators __duration_short, __duration_long
                      are depreceated. You should use the parameterized form __duration_fmt
                      or the renamed manipulators __duration_symbol and __duration_prefix
                      instead.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The __duration_punct&amp;lt;&amp;gt; facet is depreceated.
                      You should use the __get_duration_style free function to get
                      the informations and use the __duration_units facet for localization
                      purposes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      When BOOST_CHRONO_VERSION==2 the preceding deprecated functions
                      are not available.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7546&quot;&gt;#7546&lt;/a&gt;
                      time_point&amp;lt;system_clock&amp;gt; output version 2 fails to compile
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7547&quot;&gt;#7547&lt;/a&gt;
                      time_point&amp;lt;system_clock&amp;gt; input version 2 fails to compile
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7868&quot;&gt;#7868&lt;/a&gt;
                      chrono_io parses time incorrectly (1.53 and 1.52)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7650&quot;&gt;#7650&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;'s
                insertion performance.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed again experimental multiallocation interface for better performance
                (still experimental).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added no exception support for those willing to disable exceptions
                in their compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed GCC -Wshadow warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for iOS on ARM and MacOS X on x86 (32bit) added.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for SEH Overwrite Protection on Win32.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      avoid generating output polygons with interior rings below
                      minimum size (e.g. one or two points)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;disjoint&lt;/span&gt;&lt;/code&gt; for degenerate segments
                      (patched by Karsten Ahnert)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      problem in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;difference&lt;/span&gt;&lt;/code&gt;
                      for missing handling tangency, reported by H2
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;for_each&lt;/span&gt;&lt;/code&gt;
                      for use with Lambda's
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;comparable_distance&lt;/span&gt;&lt;/code&gt;
                      point-linestring (and -range, -polygon)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      combinations for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;disjoint&lt;/span&gt;&lt;/code&gt;:
                      point/ring, point/polygon, point/multi_polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      combinations for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intersects&lt;/span&gt;&lt;/code&gt;:
                      point/ring, point/polygon, point/multi_polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Internal changes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      updates in specializations/not_implemented for various algorithms
                      (as in an earlier version, these changes are still going on;
                      they take care for simplified structs, better error reporting,
                      and automatized documentation)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixes in unit tests
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/gil/&quot;&gt;GIL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed self-assignment warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4919&quot;&gt;#4919&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed the following bugs from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3468&quot;&gt;#3468&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4386&quot;&gt;#4386&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5269&quot;&gt;#5269&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7428&quot;&gt;#7428&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7457&quot;&gt;#7457&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7467&quot;&gt;#7467&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7600&quot;&gt;#7600&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7648&quot;&gt;#7648&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7684&quot;&gt;#7684&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7728&quot;&gt;#7728&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7741&quot;&gt;#7741&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7766&quot;&gt;#7766&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7771&quot;&gt;#7771&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7773&quot;&gt;#7773&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7780&quot;&gt;#7780&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7787&quot;&gt;#7787&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7801&quot;&gt;#7801&lt;/a&gt;
    plus other bugs not in Trac.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for reading from GraphML files containing multiple
                graphs.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added versions of A* search specifically for trees, removing the
                need for a color map when it is acceptable to visit the same vertex
                multiple times.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added VF2 subgraph isomorphism algorithm (contributed by Flavio De
                Lorenzi).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;int128_type&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;uint128_type&lt;/span&gt;&lt;/code&gt; where available.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On platforms that are known to have standard floating point functions,
                don't use the automatic detection (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7221&quot;&gt;#7221&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7470&quot;&gt;#7470&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed GCC -Wshadow warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Experimental multiple allocation interface improved and changed again.
                Still unstable.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;ABI breaking&lt;/em&gt;: changed node pool
                allocators internals for improved efficiency.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7795&quot;&gt;#7795&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7174&quot;&gt;#7174&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7529&quot;&gt;#7529&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7815&quot;&gt;#7815&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed GCC -Wshadow warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt;&lt;/code&gt;
                keyword in several intrusive container constructors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Small documentation fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New character type detection algorithm for user defined types &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6786&quot;&gt;#6786&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation updates (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7582&quot;&gt;#7582&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7831&quot;&gt;#7831&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs with std::array &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7799&quot;&gt;#7799&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with -ftrapv and numeric to numeric conversions
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7814&quot;&gt;#7814&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/locale/&quot;&gt;Locale&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Security related bug fix, some invalid UTF-8 sequences where accepted
                as valid &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7743&quot;&gt;#7743&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Invalid Windows codepage names used &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7386&quot;&gt;#7386&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed missing documentation, caused by a error in Doxygen formatting
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7734&quot;&gt;#7734&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed missing std:: in some places &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7701&quot;&gt;#7701&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Spelling, grammar, typos fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7368&quot;&gt;#7368&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7762&quot;&gt;#7762&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7325&quot;&gt;#7325&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7415&quot;&gt;#7415&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7416&quot;&gt;#7416&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7183&quot;&gt;#7183&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7649&quot;&gt;#7649&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7694&quot;&gt;#7694&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4445&quot;&gt;#4445&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7492&quot;&gt;#7492&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed mistake in calculating pooled standard deviation in two-sample
                students t example &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7402&quot;&gt;#7402&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve complex acos/asin/atan, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7290&quot;&gt;#7290&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7291&quot;&gt;#7291&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve accuracy in some corner cases of cyl_bessel_j and gamma_p/gamma_q
                thanks to suggestions from Rocco Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve accuracy in Bessel J and Y with integer orders thanks to
                suggestions from Rocco Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/minmax/&quot;&gt;MinMax&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a misuse of the comma operator (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7752&quot;&gt;#7752&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the docs to fix broken link (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7751&quot;&gt;#7751&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better header segregation (bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6524&quot;&gt;#6524&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Small documentation fixes
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7830&quot;&gt;#7830&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7832&quot;&gt;#7832&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6366&quot;&gt;#6366&lt;/a&gt; Bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;contains&lt;/span&gt;&lt;/code&gt;
                      for polygon_90 type.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7678&quot;&gt;#7678&lt;/a&gt; multiple definitions of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;
                      &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;belongs&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(...)&lt;/span&gt;&lt;/code&gt;
                      by multiple &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Internal changes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      refactored point/segment/interval data/concept/traits.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      added unit tests for point and interval data/concept/traits.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      simplified &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      to operate only in 2D.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      removed point_3d data/concept/traits.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/random/&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Now compiles with exceptions disabled (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5399&quot;&gt;#5399&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/range/&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bug fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5603&quot;&gt;#5603&lt;/a&gt; the &amp;quot;range/any_range.hpp&amp;quot; header is not
                      self-sufficient
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6103&quot;&gt;#6103&lt;/a&gt; boost::range_detail vs. boost::range::range_detail
                      compiler error
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Documentation fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5160&quot;&gt;#5160&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5314&quot;&gt;#5314&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5440&quot;&gt;#5440&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5775&quot;&gt;#5775&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6212&quot;&gt;#6212&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7585&quot;&gt;#7585&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7843&quot;&gt;#7843&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7916&quot;&gt;#7916&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7926&quot;&gt;#7926&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7616&quot;&gt;#7616&lt;/a&gt;
                      br_mul::nan - warning C4293: '&amp;lt;&amp;lt;' : shift count negative
                      or too big, undefined behavior`.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
   Fixed Issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7744&quot;&gt;#7744&lt;/a&gt;,
          &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7644&quot;&gt;#7644&lt;/a&gt;.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/&quot;&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Glen Fernandes provided implementations of make_shared and
                      allocate_shared for arrays. They achieve a single allocation
                      for an array that can be initialized with constructor arguments
                      or initializer lists as well as overloads for default initialization
                      and no value initialization. See the '&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/make_shared_array.html&quot;&gt;make_shared
                      and allocate_shared for arrays&lt;/a&gt;' page for more information.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;
                      can now be used to hold a pointer to a dynamically allocated
                      array. This is accomplished by using an array type (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt;
                      or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;)
                      as the template parameter.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Smart pointers now use &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt;
                      &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt;
                      on C++11 compilers. This can break code that passes a smart
                      pointer to a function taking a &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt;,
                      or that returns a smart pointer from a function with a &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; return type. Please use
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;!=&lt;/span&gt;
                      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span class=&quot;special&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;p&lt;/span&gt;&lt;/code&gt; in such cases.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/string&quot;&gt;StringAlgo&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug where it wouldn't find overlapping patterns (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7784&quot;&gt;#7784&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disambiguated some calls to insert (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7346&quot;&gt;#7346&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Deprecated features since boost 1.53 will be available only
                      until boost 1.58.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      C++11 compliance: packaged_task&amp;lt;R&amp;gt; is deprecated, use
                      instead packaged_task&amp;lt;R()&amp;gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7537&quot;&gt;#7537&lt;/a&gt;
                      deprecate Mutex::scoped_lock and scoped_try_lock and boost::condition
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6270&quot;&gt;#6270&lt;/a&gt;
                      C++11 compliance: Add thread constructor from movable callable
                      and movable arguments
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7279&quot;&gt;#7279&lt;/a&gt;
                      C++11 compliance: Add noexcept in system related functions
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7280&quot;&gt;#7280&lt;/a&gt;
                      C++11 compliance: Add promise::...at_thread_exit functions
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7281&quot;&gt;#7281&lt;/a&gt;
                      C++11 compliance: Add ArgTypes to packaged_task template.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7282&quot;&gt;#7282&lt;/a&gt;
                      C++11 compliance: Add packaged_task::make_ready_at_thread_exit
                      function
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7412&quot;&gt;#7412&lt;/a&gt;
                      C++11 compliance: Add async from movable callable and movable
                      arguments
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7413&quot;&gt;#7413&lt;/a&gt;
                      C++11 compliance: Add async when the launch policy is deferred.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7414&quot;&gt;#7414&lt;/a&gt;
                      C++11 compliance: future::get post-condition should be valid()==false.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7422&quot;&gt;#7422&lt;/a&gt;
                      Provide a condition variable with zero-overhead performance
                      penality.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7444&quot;&gt;#7444&lt;/a&gt;
                      Async: Add make_future/make_shared_future.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7540&quot;&gt;#7540&lt;/a&gt;
                      Threads: Add a helper class that join a thread on destruction.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7541&quot;&gt;#7541&lt;/a&gt;
                      Threads: Add a thread wrapper class that joins on destruction.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7575&quot;&gt;#7575&lt;/a&gt;
                      C++11 compliance: A future created by async should &amp;quot;join&amp;quot;
                      in the destructor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7587&quot;&gt;#7587&lt;/a&gt;
                      Synchro: Add strict_lock and nested_strict_lock.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7588&quot;&gt;#7588&lt;/a&gt;
                      Synchro: Split the locks.hpp in several files to limit dependencies.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7590&quot;&gt;#7590&lt;/a&gt;
                      Synchro: Add lockable concept checkers based on Boost.ConceptCheck.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7591&quot;&gt;#7591&lt;/a&gt;
                      Add lockable traits that can be used with enable_if.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7592&quot;&gt;#7592&lt;/a&gt;
                      Synchro: Add a null_mutex that is a no-op and that is a model
                      of UpgardeLockable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7593&quot;&gt;#7593&lt;/a&gt;
                      Synchro: Add a externally_locked class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7590&quot;&gt;#7594&lt;/a&gt;
                      Threads: Allow to disable thread interruptions.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7464&quot;&gt;#7464&lt;/a&gt;
                      BOOST_TEST(n_alive == 1); fails due to race condition in a
                      regression test tool.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7657&quot;&gt;#7657&lt;/a&gt;
                      Serious performance and memory consumption hit if condition_variable
                      methods condition notify_one or notify_all is used repeatedly.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7665&quot;&gt;#7665&lt;/a&gt;
                      this_thread::sleep_for no longer uses steady_clock in thread.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7668&quot;&gt;#7668&lt;/a&gt;
                      thread_group::join_all() should check whether its threads are
                      joinable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7669&quot;&gt;#7669&lt;/a&gt;
                      thread_group::join_all() should catch resource_deadlock_would_occur.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7671&quot;&gt;#7671&lt;/a&gt;
                      Error including boost/thread.hpp header on iOS.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7672&quot;&gt;#7672&lt;/a&gt;
                      lockable_traits.hpp syntax error: &amp;quot;defined&amp;quot; token
                      misspelled.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7798&quot;&gt;#7798&lt;/a&gt;
                      boost::future set_wait_callback thread safety issues.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7808&quot;&gt;#7808&lt;/a&gt;
                      Incorrect description of effects for this_thread::sleep_for
                      and this_thread::sleep_until.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7812&quot;&gt;#7812&lt;/a&gt;
                      Returns: cv_status::no_timeout if the call is returning because
                      the time period specified by rel_time has elapsed, cv_status::timeout
                      otherwise.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7874&quot;&gt;#7874&lt;/a&gt;
                      compile warning: thread.hpp:342: warning: type attributes are
                      honored only at type definition.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7875&quot;&gt;#7875&lt;/a&gt;
                      BOOST_THREAD_THROW_IF_PRECONDITION_NOT_SATISFIED should not
                      be enabled by default.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7882&quot;&gt;#7882&lt;/a&gt;
                      wrong exception text from condition_variable::wait(unique_lock&amp;lt;mutex&amp;gt;&amp;amp;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7890&quot;&gt;#7890&lt;/a&gt;
                      thread::do_try_join_until() is missing a return type.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove support for the old pre-standard variadic pair constructors,
                and equality implementation. Both have been deprecated since Boost
                1.48.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                More internal implementation changes, including a much simpler implementation
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;/code&gt;, and removed
                more deprecated config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;a href=&quot;http://www.boost.org/libs/utility/doc/html/string_ref.html&quot;&gt;string_ref&lt;/a&gt;,
                a non-owning reference to a contiguous sequence of characters.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added rvalue constructors and rvalue assignment operators (for C++11
                compatible compilers only). Library now can be used with move-only
                types (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7620&quot;&gt;#7620&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7718&quot;&gt;#7718&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Accomodate recent smart pointer changes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7809&quot;&gt;#7809&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/tools/build/index.html&quot;&gt;Boost Build System&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Qt5 toolset
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                improved rcc support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7576&quot;&gt;#7576&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.1.2, 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang: 2.8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang, with libc++: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cray: 4.6.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang, with libc++: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.1, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.9
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++11 mode: 13.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age:
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: V12.1.0.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.52.0</title><link>http://www.boost.org/users/history/version_1_52_0.html</link><guid>http://www.boost.org/users/history/version_1_52_0.html</guid><pubDate>Mon, 5 Nov 2012 08:05:58 -0800</pubDate><description>



  &lt;div id=&quot;version_1_52_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix long-standing dependency tracking bug, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7409&quot;&gt;#7409&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_SFINAE_EXPR&lt;/span&gt;&lt;/code&gt;
                for gcc-4.4, since the support was found to be too buggy.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5980&quot;&gt;#5980&lt;/a&gt; Enhance chrono I/O with H. Hinnant proposal &lt;a href=&quot;http://home.roadrunner.com/~hinnant/bloomington/chrono_io.html&quot;&gt;proposal&lt;/a&gt;
                      which has the advantage to provide I/O for system clocks using
                      the Gregorian Calendar.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5981&quot;&gt;#5981&lt;/a&gt; Add i/o state savers for duration and time_point formatting
                      state.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7059&quot;&gt;#7059&lt;/a&gt; Add low level i/o facilities.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The chrono i/o version included in Boost.Chrono 1.2.x has been
                      completly refactored in version 2.0.0
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The manipulators &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_short&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_long&lt;/span&gt;&lt;/code&gt;
                      are depreceated. You should use the parameterized form &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_fmt&lt;/span&gt;&lt;/code&gt; or the renamed
                      manipulators &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_symbol&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_prefix&lt;/span&gt;&lt;/code&gt;
                      instead.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_punct&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; facet is deprecated.
                      You should use the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__get_duration_style&lt;/span&gt;&lt;/code&gt;
                      free function to get the informations and use the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_units&lt;/span&gt;&lt;/code&gt; facet for
                      localization purposes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      When &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_CHRONO_VERSION&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;
                      the preceding deprecated functions are not available.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7381&quot;&gt;#7381&lt;/a&gt; C++11 compliance: unresolved symbol when assigning
                      a constexpr duration to a non-const local variable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7479&quot;&gt;#7479&lt;/a&gt;
                      Compile fails with compilers supporting constexpr fails if
                      the standard library doesn't provides the constexpr interface
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Would not fix:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6871&quot;&gt;#6871&lt;/a&gt; chrono_io.hpp: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;...)&lt;/span&gt;&lt;/code&gt;
                      modifies the state of os. The neww io interface provided in
                      version 2 solves this issue. You should move to the new version.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;stable_vector&lt;/span&gt;&lt;/code&gt;'s
                template code bloat and type safety.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed typedefs and reordered functions of sequence containers to
                improve doxygen documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6615&quot;&gt;#6615&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7139&quot;&gt;#7139&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7215&quot;&gt;#7215&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7232&quot;&gt;#7232&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7269&quot;&gt;#7269&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7439&quot;&gt;#7439&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented LWG Issue #149 (range insertion now returns an iterator)
                &amp;amp; cleaned up insertion code in most containers
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Corrected aliasing errors.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/date_time/&quot;&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Document &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_DATE_TIME_NO_LIB&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6077&quot;&gt;#6077&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;nth_as_str&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7022&quot;&gt;#7022&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7234&quot;&gt;#7234&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/foreach/&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix alignment warning on gcc.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/function/&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Move constructors and move assignment operators added (only for compilers
                with C++11 rvalue references support) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7330&quot;&gt;#7330&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6950&quot;&gt;#6950&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7226&quot;&gt;#7226&lt;/a&gt;,&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7308&quot;&gt;#7308&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7327&quot;&gt;#7327&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7338&quot;&gt;#7338&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7341&quot;&gt;#7341&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7378&quot;&gt;#7378&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7380&quot;&gt;#7380&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7398&quot;&gt;#7398&lt;/a&gt;, and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7428&quot;&gt;#7428&lt;/a&gt;, plus others
                not in Trac.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restore &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt;&lt;/code&gt; support,
                which was accidentally removed in the last version (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7437&quot;&gt;#7437&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New floating point hasher - will hash the binary representation on
                more platforms, which should be faster.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shrink_by&lt;/span&gt;&lt;/code&gt; and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;advise&lt;/span&gt;&lt;/code&gt; functions
                in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mapped_region&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;ABI breaking:&lt;/em&gt; Reimplemented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;message_queue&lt;/span&gt;&lt;/code&gt; with a circular buffer
                index (the old behavior used an ordered array, leading to excessive
                copies). This should greatly increase performance but breaks ABI.
                Old behaviour/ABI can be used undefining macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_MSG_QUEUE_CIRCULAR_INDEX&lt;/span&gt;&lt;/code&gt;
                in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;interprocess&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;workaround&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;message_queue&lt;/span&gt;&lt;/code&gt;
                insertion time avoiding priority search for common cases (both array
                and circular buffer configurations).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;interproces_sharable_mutex&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;interproces_condition_any&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;offset_ptr&lt;/span&gt;&lt;/code&gt;
                performance.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added integer overflow checks.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iterator/&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5825&quot;&gt;#5825&lt;/a&gt; constructing function_input_iterator without consuming
                      an item
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7194&quot;&gt;#7194&lt;/a&gt; Error in documentation of make_function_input_iterator
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Breaking changes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Due to the fix for &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5825&quot;&gt;#5825&lt;/a&gt;, a function_input_iterator will
                      no longer make unnecessary invokations to the wrapped nullary
                      function. For example, constructing an end iterator will now
                      not trigger an invokation; and dereferencing-and-incrementing
                      an iterator N times will trigger N invokations, not N+1 as
                      before. User code that relied on the old behavior will need
                      to be adjusted.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restored compilation on MSVC-2003 (was broken in 1.51.0) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7255&quot;&gt;#7255&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;CharType&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; function overload. &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6663&quot;&gt;#6663&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7228&quot;&gt;#7228&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Airy functions and Jacobi Elliptic functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In several distributions (particulary the Students T) corrected moments
                for small degrees of freedom &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7177&quot;&gt;#7177&lt;/a&gt;
                (reported by Thomas Mang).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Corrected failure to detect bad parameters in many distributions
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6934&quot;&gt;#6934&lt;/a&gt;
                (reported by Florian Schoppmann) by adding a function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;check_out_of_range&lt;/span&gt;&lt;/code&gt; to test many
                possible bad parameters. This test revealed several distributions
                where the checks for bad parameters were ineffective, and these have
                been rectified.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issue in Hankel functions that causes incorrect values to be
                returned for &lt;em&gt;x &amp;lt; 0&lt;/em&gt; and &lt;em&gt;ν&lt;/em&gt;
                odd, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7135&quot;&gt;#7135&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In non-central T permitted infinite degrees of freedom &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7259&quot;&gt;#7259&lt;/a&gt;
                implemented using the normal distribution (requested by Thomas Mang).
                Also much enhanced accuracy for large degrees of freedom and/or large
                non-centrality parameters by switching to use the Students t distribution
                (or Normal distribution for infinite degrees of freedom) centered
                at delta, when delta / (4 * v) &amp;lt; epsilon for the floating-point
                type in use. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7259&quot;&gt;#7259&lt;/a&gt;.
                It was also found that the incomplete beta was suffering from serious
                cancellation errors when degrees of freedom was very large. (That
                has now been fixed in our code, but any code based on Didonato and
                Morris's original papers (probably every implementation out there
                actually) will have the same issue).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed minor issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6517&quot;&gt;#6517&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6362&quot;&gt;#6362&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7053&quot;&gt;#7053&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2693&quot;&gt;#2693&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6937&quot;&gt;#6937&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7099&quot;&gt;#7099&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/phoenix/&quot;&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make Phoenix work with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;-based
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Included Voronoi diagram extensions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Introduced new Segment concept.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation issues.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The data parameter to primitive transforms can now optionally have
                slots indexed by key.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Primitive transforms can now operatate on temporary expressions that
                are non-const qualified.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add callable function object types for the free functions in &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and also for some Boost.Range
                functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Boost.MPL algorithms work on Proto expression nodes.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pass_through&lt;/span&gt;&lt;/code&gt; primitive transform
                now accepts an optional &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Domain&lt;/span&gt;&lt;/code&gt;
                template parameter for specifying the target domain of the resulting
                expression.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Replace the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;short_name&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;long_name&lt;/span&gt;&lt;/code&gt;
                      functions by symbol and prefix functions respectively.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;short_name&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;long_name&lt;/span&gt;&lt;/code&gt;
                      are deprecated. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;symbol&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;prefix&lt;/span&gt;&lt;/code&gt;
                      respectively. These functions be removed in 1.55.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7478&quot;&gt;#7478&lt;/a&gt;
                      Compiles fails with compilers supporting char16_t and char32_t
                      fails if the library doesn't provides std::u16string and std::u32string.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/utility.htm#result_of&quot;&gt;Result_of&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Switch &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt; on compilers for which
                support is deemed &amp;quot;good enough&amp;quot;. That means if the compiler
                implements &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf&quot;&gt;n3276&lt;/a&gt;.
                (For now, that only includes very recent versions of clang.)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; is now &amp;quot;sfinae-friendly&amp;quot;
                when it uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;.
                See &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3436.html&quot;&gt;n3436&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated Features&lt;/em&gt;: Deprecated
                features since boost 1.50 available only until boost 1.55. These
                deprecated features will be provided by default up to boost 1.52.
                If you don't want to include the deprecated features you could define
                BOOST_THREAD_DONT_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0. Since
                1.53 these features will not be included any more by default. Since
                this version, if you want to include the deprecated features yet
                you could define BOOST_THREAD_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0.
                These deprecated features will be only available until boost 1.55,
                that is you have yet 1 year to move to the new features.
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Time related functions don't using the Boost.Chrono library,
                      use the chrono overloads instead.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Breaking changes when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THREAD_VERSION&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;
                (Default value since Boost 1.53): There are some new features which
                share the same interface but with different behavior. These breaking
                features are provided by default when BOOST_THREAD_VERSION is 3,
                but the user can however choose the version 2 behavior by defining
                the corresponding macro. As for the deprecated features, these broken
                features will be only available until boost 1.55.
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6229&quot;&gt;#6229&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: Rename the
                      unique_future to future following the c++11.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6266&quot;&gt;#6266&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: thread destructor
                      should call terminate if joinable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6269&quot;&gt;#6269&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: thread move
                      assignment should call terminate if joinable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4710&quot;&gt;#4710&lt;/a&gt; C++11 compliance: Missing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7283&quot;&gt;#7283&lt;/a&gt; C++11 compliance: Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;notify_all_at_thread_exit&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7345&quot;&gt;#7345&lt;/a&gt; C++11 compliance: Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                      to recursive mutex &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;try_lock&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2361&quot;&gt;#2361&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread_specific_ptr&lt;/span&gt;&lt;/code&gt;:
                      document nature of the key, complexity and rationale.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2797&quot;&gt;#2797&lt;/a&gt; Two problems with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread_specific_ptr&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5274&quot;&gt;#5274&lt;/a&gt; failed to compile &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      with stlport 5.1.5 under msvc8.1, because of undefined class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5431&quot;&gt;#5431&lt;/a&gt; compile error in Windows CE 6.0(interlocked).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5752&quot;&gt;#5752&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;call_once&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; is unreliable on some platforms.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7045&quot;&gt;#7045&lt;/a&gt; Thread library does not automatically compile date_time.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7173&quot;&gt;#7173&lt;/a&gt; wrong function name &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;interrupt_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7200&quot;&gt;#7200&lt;/a&gt; Unable to build boost.thread modularized.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7220&quot;&gt;#7220&lt;/a&gt; gcc 4.6.2 warns about inline+dllimport functions.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7238&quot;&gt;#7238&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;sleep_for&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; does not respond to interrupt().
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7245&quot;&gt;#7245&lt;/a&gt; Minor typos on documentation related to version 3.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7272&quot;&gt;#7272&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;win32&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread_primitives&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;:
                      (Unneccessary) Warning.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7284&quot;&gt;#7284&lt;/a&gt; Clarify that there is no access priority between lock
                      and shared_lock on shared mutex.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7329&quot;&gt;#7329&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      does not compile on HPUX.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7336&quot;&gt;#7336&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THREAD_DONT_USE_SYSTEM&lt;/span&gt;&lt;/code&gt;
                      doesn't work.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7349&quot;&gt;#7349&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;packaged_task&lt;/span&gt;&lt;/code&gt;
                      holds reference to temporary.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7350&quot;&gt;#7350&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_destructor&lt;/span&gt;&lt;/code&gt;
                      does not destroy object
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/ublas/&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                improved performance of inplace_solve (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4024&quot;&gt;#4024&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                fixed coordinate_matrix for use with gcc 4.7 (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7363&quot;&gt;#7363&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                In assignment, reuse existing nodes where possible.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bugs when erasing ranges (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7471&quot;&gt;#7471&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some work on the implementation.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/uuid/&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6118&quot;&gt;#6118&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6788&quot;&gt;#6788&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7375&quot;&gt;#7375&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7128&quot;&gt;#7128&lt;/a&gt; - fixed bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                for messages longer than 536,870,912 bytes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sub_match&lt;/span&gt;&lt;/code&gt; work
                with Boost.Range. Fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7237&quot;&gt;#7237&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_52_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang: 2.8
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cray: 8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang:
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2, 4.6.3, 4.7.0, 4.7.1, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.9
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age: 10.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: V12.1.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun: 5.10
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_52_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.51.0</title><link>http://www.boost.org/users/history/version_1_51_0.html</link><guid>http://www.boost.org/users/history/version_1_51_0.html</guid><pubDate>Mon, 20 Aug 2012 16:00:21 -0700</pubDate><description>



  &lt;div id=&quot;version_1_51_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
  Context switching library,
          from Oliver Kowalke.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_51_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_sorted_until&lt;/span&gt;&lt;/code&gt;
                ; now matches the c++11 standard behavior on ranges with duplicate
                values.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added range support for the rest of the search algorithms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unhex&lt;/span&gt;&lt;/code&gt; now uses Boost.Exception
                to signal bad input.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an incompatibility between &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iostream&lt;/span&gt;&lt;/code&gt;
                and C++11 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7162&quot;&gt;#7162&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Decorated GCC attribute names with underscores to prevent interaction
                with user-defined macros (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6415&quot;&gt;#6415&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;
                &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cctype&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, needed for some versions of
                MinGW.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use &lt;tt&gt;gcc&lt;/tt&gt;'s atomic builtins on ARM CPUs,
                when available (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7140&quot;&gt;#7140&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed strand destruction to be a no-op, to allow strand objects
                to be destroyed after their associated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                has been destroyed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for some newer versions of glibc which provide the
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_create1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                function but always fail with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ENOSYS&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7012&quot;&gt;#7012&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the SSL implementation to throw an exception if SSL engine
                initialisation fails (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6303&quot;&gt;#6303&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed another regression in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;buffered_write_stream&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6310&quot;&gt;#6310&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented various minor performance improvements, primarily targeted
                at Linux x86 and x86-64 platforms.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Deprecated a whole bunch of macros that were c++11 specific, but
                not named to show that they were c++11 specific. Made new macros
                with better names, and paired the old macros with the new ones. Updated
                the documentation to list the deprecated macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6918&quot;&gt;#6918&lt;/a&gt;
                Boost Chrono compilation failure on HP uX due to undefined pthread_getcpuclockid.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6241&quot;&gt;#6241&lt;/a&gt;
                boost::chrono compilation problems without std::wstring support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6987&quot;&gt;#6987&lt;/a&gt;
                Documentation &amp;amp; C++11.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7041&quot;&gt;#7041&lt;/a&gt;
                time_point.hpp depends on Boost.System.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7042&quot;&gt;#7042&lt;/a&gt;
                Avoiding time_point and duration dependency on time.h and CLOCK_REALTIME.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7058&quot;&gt;#7058&lt;/a&gt;
                Make it work when BOOST_NO_EXCEPTIONS is defined.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7069&quot;&gt;#7069&lt;/a&gt;
                Misspellings in clock_string&amp;lt;thread_clock&amp;gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7081&quot;&gt;#7081&lt;/a&gt;
                WinError.h capitalization in boost/detail/win/basic_types.hpp.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                points accessed through a pointer (e.g. in a linestring) should now
                be specialized without the pointer. In previous versions a type
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;/code&gt; used like
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;linestring&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt;
                had to be specalized like: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt;.
                Now the library itself removes the pointer before calling the traits
                class, so now it should be like: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                intersection was sometimes wrong for integer points, fixed
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                documentation, order of parameters in simplify was wrong, fixed
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7030&quot;&gt;7030&lt;/a&gt;
                spherical distance, fixed (by patch of Karsten Ahnert)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Refactored support for internal and bundled properties in Boost.Graph-provided
                graph types, and cleaned up named parameter functionality:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Enabled old-style (non-bundled) internal properties in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compressed_sparse_row_graph&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bundled properties should work correctly for all graph types
                      and adaptors.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6993&quot;&gt;#6993&lt;/a&gt;: Typo Bundled Properties document
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7002&quot;&gt;#7002&lt;/a&gt;: Problem with initialization of CSR bidirectional
                      graph
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7023&quot;&gt;#7023&lt;/a&gt;: Enclose internal type graphml_reader in anonymous
                      namespace
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Other bugs and warnings not in Trac
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support the standard smart pointers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;hash_value&lt;/span&gt;&lt;/code&gt; now implemented
                using SFINAE to avoid implicit casts to built in types when calling
                it.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better performance, less memory usage for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;character_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;character_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; conversions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug with volatile input parameter &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7157&quot;&gt;#7157&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;MSM&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for boost::any &lt;a href=&quot;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s03.html#any-event&quot;&gt;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s03.html#any-event&lt;/a&gt;
                or kleene &lt;a href=&quot;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s04.html#kleene-event&quot;&gt;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s04.html#kleene-event&lt;/a&gt;
                as acceptable events
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: compiler error with fsm internal table and none (compound)
                event.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: euml::defer_ leading to stack overflow.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Proto transforms get pseudo-parameter pack expansion support for
                unpacking expressions. See the &lt;a href=&quot;http://www.boost.org/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_51&quot;&gt;Release
                Notes&lt;/a&gt; for more information.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7075&quot;&gt;#7075&lt;/a&gt;
                Workaround for error: the type of partial specialization template
                parameter constant &amp;quot;n1&amp;quot; depends on another template parameter.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4258&quot;&gt;#4258&lt;/a&gt;
                Linking with boost thread does not work on mingw/gcc 4.5.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4885&quot;&gt;#4885&lt;/a&gt;
                Access violation in set_tss_data at process exit due to invalid assumption
                about TlsAlloc.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6931&quot;&gt;#6931&lt;/a&gt;
                mutex waits forwever with Intel Compiler and /debug:parallel
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7044&quot;&gt;#7044&lt;/a&gt;
                boost 1.50.0 header missing.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7052&quot;&gt;#7052&lt;/a&gt;
                Thread: BOOST_THREAD_PROVIDES_DEPRECATED_FEATURES_SINCE_V3_0_0 only
                masks thread::operator==, thread::operator!= forward declarations,
                not definitions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7066&quot;&gt;#7066&lt;/a&gt;
                An attempt to fix current_thread_tls_key static initialization order.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7074&quot;&gt;#7074&lt;/a&gt;
                Multiply defined symbol boost::allocator_arg.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7078&quot;&gt;#7078&lt;/a&gt;
                Trivial 64-bit warning fix on Windows for thread attribute stack
                size
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7089&quot;&gt;#7089&lt;/a&gt;
                BOOST_THREAD_WAIT_BUG limits functionality without solving anything
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix construction/destruction issue when using a C++11 compiler with
                a C++03 allocator (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7100&quot;&gt;#7100&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove a &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;&lt;/code&gt; to support compiling without
                exceptions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Adjust SFINAE use to try to supprt g++ 3.4 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7175&quot;&gt;#7175&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Work around buggy wide ctype facet on cygwin and mingw.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Work around absence of __isctype on some glibc implementations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;as&lt;/span&gt;&lt;/code&gt; shouldn't assume &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;/code&gt; != &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix assertion in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_regex_traits&lt;/span&gt;&lt;/code&gt;
                on libc++, thanks to John Fletcher.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_51_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2, 4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang 2.8
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang: 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.4, 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.0, 4.7.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.4, 4.5.3, 4.6.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.9
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age: 10.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.6.3, 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: V12.1.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun: 5.10
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_51_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item>
  </channel>
</rss>
