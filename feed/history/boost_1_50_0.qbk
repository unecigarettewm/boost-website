[article Version 1.50.0
    [quickbook 1.5]
    [source-mode c++]
    [purpose New Libraries: Algorithm, Functional/OverloadedFunction, LocalFunction, Utility/IdentityType. Updated Libraries: Program Options, ScopeExit]
    [authors [Dawes, Beman]]
    [last-revision ]
]

[include ext.qbk]

[/

As the release progresses add the 'status' and 'download' elements to
indicate the release status:

Beta status:
[status beta]
[download http://sourceforge.net/projects/boost/files/boost/1.50.0_beta.x/]

Release status:
[status released]
[download http://sourceforge.net/projects/boost/files/boost/1.50.0/]

]

[/
    When adding libraries:

    1. Libraries are listed in alphabetical order.
    2. Besides the dedicated entry, the lib name should be added to the
       [purpose] section at the beginning of the page.
]

[section New Libraries]

* [phrase library..[@/libs/algorithm/ Algorithm]:]
  A collection of useful generic algorithms, from Marshall Clow.
* [phrase library..[@/libs/functional/overloaded_function/ Functional/OverloadedFunction]:]
  Overload different functions into a single function object, from Lorenzo Caminiti.
* [phrase library..[@/libs/local_function/ LocalFunction]:]
  Program functions locally, within other functions, directly within the scope where they are needed, from Lorenzo Caminiti.
* [phrase library..[@/libs/utility/identity_type/ Utility/IdentityType]:]
  Wrap types within round parenthesis so they can always be passed as macro parameters, from Lorenzo Caminiti.

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/accumulators/ Accumulators]:]
  * add missing `#include <boost/throw_exception.hpp>`, fixes [@https://svn.boost.org/trac/boost/ticket/6702 #6702].
  * work around for msvc which allows ctor templates to be copy ctors, fixes [@https://svn.boost.org/trac/boost/ticket/6535 #6535].
  * shorten filenames to meet boost guidelines, fixes [@https://svn.boost.org/trac/boost/ticket/6196 #6196].

* [phrase library..[@/libs/chrono/ Chrono]:]
 * Fixed Bugs:
   * [@http://svn.boost.org/trac/boost/ticket/6361 #6361] integer overflow in boost::chrono::process_real_cpu_clock::now() under Windows 32bits.
   * [@http://svn.boost.org/trac/boost/ticket/6628 #6628] compiler warning in process_cpu_clocks.hpp.
   * [@http://svn.boost.org/trac/boost/ticket/6666 #6666] thread_clock.hpp needs pthread.h.

* [phrase library..[@/libs/foreach/ Foreach]:]
  * Revert fix for [@https://svn.boost.org/trac/boost/ticket/6131 #6131] which caused more harm than good.

* [phrase library..[@/libs/multi_array/ MultiArray]:]
  * Concepts bug fix and Workaround for Visual Studio 2010
    ([@https://svn.boost.org/trac/boost/ticket/4874 #4874])
  * Fix to assert.cpp test case
    ([@https://svn.boost.org/trac/boost/changeset/78498 Patch])

* [phrase library..[@/libs/conversion/lexical_cast.htm Lexical cast]:]
  * `boost::bad_lexical_cast` exception is now globaly visible and can be catched even if code is compiled with -fvisibility=hidden
  * Now it is possible to compile and use library with disabled exceptions [@https://svn.boost.org/trac/boost/ticket/5800 #5800]
  * Better performance, less memory usage and bugfixes for `boost::iterator_range<character_type*>` conversions
  * Fixed bugs and warnings: [@https://svn.boost.org/trac/boost/ticket/6645 #6645], [@https://svn.boost.org/trac/boost/ticket/6562 #6562], [@https://svn.boost.org/trac/boost/ticket/6812 #6812], [@https://svn.boost.org/trac/boost/ticket/6852 #6852], [@https://svn.boost.org/trac/boost/ticket/6717 #6717], [@https://svn.boost.org/trac/boost/ticket/6670 #6770], [@https://svn.boost.org/trac/boost/ticket/6504 #6504].

* [phrase library..[@/libs/locale/ Locale]:]
  * Fixed build issues with STLPort library
  * Boost.System is now required depenency
  * Fixed bugs [@https://svn.boost.org/trac/boost/ticket/6635 #6635], [@https://svn.boost.org/trac/boost/ticket/6833 #6833]
    
* [phrase library..[@/libs/msm/ MSM]:]
  * eUML : better syntax for front-ends defined with eUML as transition table only. Caution: Breaking Change![@http://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table]
  * Bugfix: graph building was only working if initial_state defined as a sequence.
  * Bugfix: flags defined for a Terminate or Interrupt state do not break the blocking function of these states any more.
  * Bugfix: multiple deferred events from several regions were not working in every case.
  * Bugfix: visitor was passed by value to submachines.
  * Bugfix: no_transition was not called for submachines who send an event to themselves.
  * Fixed warnings with gcc.


* [phrase library..[@/libs/program_options/ Program Options]:]
  * Improved error reporting
    ([@ https://svn.boost.org/trac/boost/changeset/77827 Patch from Leo Goodstadt])

* [phrase library..[@/libs/proto/ Proto]:]
  * Use `decltype`-based `result_of` if and only if the compiler implements N3276.
  * For C++11, force parameter to `mpl::eval_if_c` and `mpl::if_c` to be `bool`.
  * Disable [^'__forceinline not inlined'] warning on msvc.

* [phrase library..[@/libs/ratio/ Ratio]:]
 * Fixed Bugs:
   * [@http://svn.boost.org/trac/boost/ticket/6498 #6498] boost::ratio won't compile with default settings.

* [phrase library..[@/libs/scope_exit/ ScopeExit]:]
 * New Features:
   * Use variadic macros to specify captures variables as commas-separated lists (but kept preprocessor sequence syntax for backward compatibility).
   * Capture the object in scope using `this_`.
   * Support empty captures using `void`.
   * Implicit lambda-like captures using `BOOST_SCOPE_EXIT_ALL` on compilers that support C++11 lambda functions.

* [phrase library..[@/libs/thread/ Thread]:]
 * New Features:
   * [@http://svn.boost.org/trac/boost/ticket/1850 #1850] Request for unlock_guard  to compliment lock_guard.
   * [@http://svn.boost.org/trac/boost/ticket/2637 #2637] Request for shared_mutex duration timed_lock and timed_lock_shared.
   * [@http://svn.boost.org/trac/boost/ticket/2741 #2741] Proposal to manage portable and non portable thread attributes.
   * [@http://svn.boost.org/trac/boost/ticket/3567 #3567] Request for shared_lock_guard.
   * [@http://svn.boost.org/trac/boost/ticket/6194 #6194] Adapt to Boost.Move.
   * [@http://svn.boost.org/trac/boost/ticket/6195 #6195] c++11 compliance: Provide the standard time related interface using Boost.Chrono.
   * [@http://svn.boost.org/trac/boost/ticket/6217 #6217] Enhance Boost.Thread shared mutex interface following Howard Hinnant proposal.
   * [@http://svn.boost.org/trac/boost/ticket/6224 #6224] c++11 compliance: Add the use of standard noexcept on compilers supporting them.
   * [@http://svn.boost.org/trac/boost/ticket/6226 #6226] c++11 compliance: Add explicit bool conversion from locks.
   * [@http://svn.boost.org/trac/boost/ticket/6228 #6228] Add promise constructor with allocator following the standard c++11.
   * [@http://svn.boost.org/trac/boost/ticket/6230 #6230] c++11 compliance: Follows the exception reporting mechanism as defined in the c++11.
   * [@http://svn.boost.org/trac/boost/ticket/6266 #6266] Breaking change: thread destructor should call terminate if joinable.
   * [@http://svn.boost.org/trac/boost/ticket/6269 #6269] Breaking change: thread move assignment should call terminate if joinable.
   * [@http://svn.boost.org/trac/boost/ticket/6272 #6272] c++11 compliance: Add thread::id hash specialization.
   * [@http://svn.boost.org/trac/boost/ticket/6273 #6273] c++11 compliance: Add cv_status enum class and use it on the conditions wait functions.
   * [@http://svn.boost.org/trac/boost/ticket/6231 #6231] Add BasicLockable requirements in the documentation to follow c++11.
   * [@http://svn.boost.org/trac/boost/ticket/6342 #6342] c++11 compliance: Adapt the one_flag to the c++11 interface.
   * [@http://svn.boost.org/trac/boost/ticket/6671 #6671] upgrade_lock: missing mutex and release functions.
   * [@http://svn.boost.org/trac/boost/ticket/6672 #6672] upgrade_lock:: missing constructors from time related types.
   * [@http://svn.boost.org/trac/boost/ticket/6675 #6675] upgrade_lock:: missing non-member swap.
   * Added missing packaged_task::result_type and packaged_task:: constructor with allocator.
   * Added packaged_task::reset()
 * Fixed Bugs:
   * [@http://svn.boost.org/trac/boost/ticket/2575 #2575] Bug- Boost 1.36.0 on Itanium platform.
   * [@http://svn.boost.org/trac/boost/ticket/4345 #4345] thread::id and joining problem with cascade of threads.
   * [@http://svn.boost.org/trac/boost/ticket/4921 #4921] BOOST_THREAD_USE_DLL and BOOST_THREAD_USE_LIB are crucial and need to be documented.
   * [@http://svn.boost.org/trac/boost/ticket/5013 #5013] documentation: boost::thread: pthreas_exit causes terminate().
   * [@http://svn.boost.org/trac/boost/ticket/5173 #5173] boost::this_thread::get_id is very slow.
   * [@http://svn.boost.org/trac/boost/ticket/5351 #5351] interrupt a future get boost::unknown_exception.
   * [@http://svn.boost.org/trac/boost/ticket/5516 #5516] Upgrade lock is not acquired when previous upgrade lock releases if another read lock is present.
   * [@http://svn.boost.org/trac/boost/ticket/5990 #5990] shared_future<T>::get() has wrong return type.
   * [@http://svn.boost.org/trac/boost/ticket/6174 #6174] packaged_task doesn't correctly handle moving results.
   * [@http://svn.boost.org/trac/boost/ticket/6222 #6222] Compile error with SunStudio: unique_future move.
   * [@http://svn.boost.org/trac/boost/ticket/6673 #6673] shared_lock: move assign doesn't works with c++11.
   * [@http://svn.boost.org/trac/boost/ticket/6674 #6674] shared_mutex: try_lock_upgrade_until doesn't works.
   * Fix issue signaled on the ML with task_object(task_object const&) in presence of task_object(task_object&&)

* [phrase library..[@/libs/xpressive/ xpressive]:]
  * Remove very ugly `lexical_cast` hack with a slightly less ugly one.
  * Replace MPL assert with static assert since it's problematic in C++11, fixes [@https://svn.boost.org/trac/boost/ticket/6846 #6846].

[/

* /TODO/: [phrase library..[@/libs/spirit/ Spirit]:]
  * Spirit Vx.x, see the
    '[@/doc/libs/1_xx_x/libs/spirit/doc/html/spirit/what_s_new/spirit_x_x.html What's New]'
    section for details.

]

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]

