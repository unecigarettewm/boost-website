[article Version 1.65.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        PolyCollection, Stacktrace.
        Updated Libraries:
        Context, Config, Core, Coroutine2, DLL, Fiber, Hash,
        Log, Predef, Program Options, Smart Pointers, Test, TypeIndex,
        Unordered, Utility, Variant.
    ]
    [authors [Clow, Marshall]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[section New Libraries]

* [phrase library..[@/libs/poly_collection/ PolyCollection]:]
  Fast containers of polymorphic objects, from
  Joaqu'''&#237;'''n M L'''&#243;'''pez Mu'''&#241;'''oz.

* [phrase library..[@/libs/stacktrace/ Stacktrace]:]
  Gather, store, copy and print backtraces, from Antony Polukhin.
  * Note: Library has [@https://github.com/boostorg/stacktrace/issues/14 issue with MinGW] and
  may produce empty backtraces with that compiler.

[endsect]


[section Updated Libraries]

* [phrase library..[@/libs/context/ Context]:]
    * call/cc supports ucontext-API (swapcontext)
    * call/cc supports Windows-Fiber-API
    * call/cc supports on demand growing (segmented/split) stacks
    * [ticket 12719]: context test cases and examples segmentation fault when built with mingw-w64 toolchain 
    * #52: Failing to build callcc test with g++-4.9

* [phrase library..[@/libs/config/ Config]:]
  * Added `BOOST_NO_CXX11_POINTER_TRAITS`, `BOOST_NO_CXX17_FOLD_EXPRESSIONS`,
    `BOOST_NO_CXX17_INLINE_VARIABLES`, `BOOST_NO_CXX17_STRUCTURED_BINDINGS`
    defect detection.
  * BOOST_FALLTHROUGH support for GCC 7 and above. (Glen Fernandes)

* [phrase library..[@/libs/core/ Core]:]
    * Implemented `pointer_traits` for C++03 and higher, that implements
      [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0653r0.html P0653r0]
      (Glen Fernandes). This implementation is now used by Align, Circular
      Buffer, Fiber, Geometry, among other libraries.
    * Added `BOOST_TEST_GT` and `BOOST_TEST_GE` to Lightweight Test.

* [phrase library..[@/libs/coroutine2/ Coroutine2]:]
    * supports ucontext-API (swapcontext)
    * supports Windows-Fiber-API
    * [ticket 13064]: different behavior coroutine and coroutine2 

* [phrase library..[@/libs/dll/ DLL]:]
    * Fix PE parsing on non Windows platforms.

 * [phrase library..[@/libs/fiber/ Fiber]:] 
    * hardware transactional memory (Intel TSX) supported
    * NUMA supported
    * ucontext-API (swapcontext) supported
    * Windows-Fiber-API supported
    * on demand growing stacks
    * #121: failing to build static lib with GCC 4.8 and C++11
    * #123: assertion failure in schedule_from_remote
    * #125: erratic crashes in testsuite
    * #126: incorrect std::memory_order value in compare_exchange_strong?

* [phrase library..[@/libs/functional/hash/ Hash]:]
  * Support for `char16_t`, `char32_t`, `u16string`, `u32string`.

* [phrase library..[@/libs/log/ Log]:]
  * General changes:
    * Improved compatibility with Solaris.
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.

* [phrase library..[@/libs/predef/ Predef]:]
  * Fix Intel C/C++ version 9999 detection to be 12.1.0.
  * Addition of `BOOST_PREDEF_WORKAROUND` and `BOOST_PREDEF_TESTED_AT` macros
    for defect workarounds and detection.
  * Add ARM64 MSVC SIMD detection. (from Minmin Gong)
  * Add detection of iOS simulator vs device as a platform choice. (from Ruslan
    Baratov)
  * Fix MinGW incorrect header guard. (from Ruslan Baratov)

* [phrase library..[@/libs/program_options/ Program Options]:]
  * Support for storing values into `boost::optional`, thanks to Ed Catmur
    ([@https://svn.boost.org/trac/boost/ticket/7495 #7495],
     [@https://github.com/boostorg/program_options/pull/18 PR#18])
  * Parsing of implicit options can now use the value from the next token. Since 1.59,
    unless the value of implicit option was specified in the same token as the option
    itself, the implicit value was used. That proved inconvenient, and now we again
    check the next token and use it as value if it's not an option itself.
    ([@https://github.com/boostorg/program_options/issues/25 #25])

* [phrase library..[@/libs/smart_ptr/ Smart Pointers]:]
  * New class template`atomic_shared_ptr`, that provides thread-safe atomic
    pointer operations over `shared_ptr`. (Peter Dimov)
  * New class template `local_shared_ptr`, where the reference count is
    updated with non-atomic operations. (Peter Dimov)
  * More optimizations in `allocate_shared` and `make_shared` for arrays.
    (Glen Fernandes)
  * Documentation has been completely rewritten in Asciidoc format.

* [phrase library..[@/libs/test/ Test]:]
  * Boost.test v3.6 see the
    [@/doc/libs/1_65_0/libs/test/doc/html/boost_test/change_log.html Change log]
    section for more details.
  * New feature:
    * C++17 compatibility (tested on VS2017), thanks to [@https://github.com/DanielaE Daniela Engert]
    * Direct comparison of C-arrays in `BOOST_TEST`
    * Better global fixtures mechanism, and spitting of responsibilities with
      [@/doc/libs/1_65_0/libs/test/doc/html/boost_test/utf_reference/test_org_reference/test_org_boost_test_global_fixture.html `BOOST_TEST_GLOBAL_FIXTURE`] for global fixtures
      and
      [@/doc/libs/1_65_0/libs/test/doc/html/boost_test/utf_reference/link_references/link_boost_test_global_configuration.html `BOOST_TEST_GLOBAL_CONFIGURATION`]
      for global initialization (compile time configuration).
    * Improved support for fixtures (`setup` / `teardown` member function) which enables better teardown time
      checks
  * Breaking changes
    * Some API changes for the loggers
    * Deprecating `BOOST_GLOBAL_FIXTURE` in favor of `BOOST_TEST_GLOBAL_FIXTURE` and `BOOST_TEST_GLOBAL_CONFIGURATION` (see above)
  * Bug fixes
    * Trac tickets [ticket 5282], [ticket 5563], [ticket 11471], [ticket 11962], [ticket 12228]
    * Trac tickets [ticket 12631], [ticket 13011]
    * Pull request [@https://github.com/boostorg/test/pull/106 PR106]

* [phrase library..[@/libs/type_index/ TypeIndex]:]
  * Include <boost/functional/hash.hpp> if required, thanks to Ed Catmur [ticket 13009].
  * Use native `hash_code()` when possible on GCC-like compilers [ticket 13027].

* [phrase library..[@/libs/unordered/ Unordered]:]
  * Use the same data structure for `unordered_set` and `unordered_multiset`,
    and for`unordered_map` and `unordered_multimap`. This is required for
    C++17, so that nodes can be merged and extracted between compatible
    containers.
  * Add deprecated attributes to long deprecated functions.
  * Improved use of `allocator_traits` `construct` and `destroy`
    on C++11 compilers, using piecewise pair construction when appropriate.
  * Fewer workarounds on newer Oracle compilers.
  * Avoid dereferencing pointers to uninitialized memory
    ([@https://github.com/boostorg/unordered/pull/5 PR #5]).

* [phrase library..[@/libs/utility/ Utility]:]
  * Improved compatibility of `boost::next`/`boost::prior` with SFINAE-unfriendly iterators. [ticket 10847], [ticket 13002].

* [phrase library..[@/libs/variant/ Variant]:]
  * r-value overload for `boost::get` was added by Albert Sverdlov [ticket 13018].
  * Missing include fro `<boost/variant/polymorphic_get.hpp>` header was added by Adam Badura [ticket 13037].

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang: 3.0, 3.8.1
  * Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1
  * Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.8.1, 3.9.1, 4.0.1
  * Clang, C++1z: 4.0.0
  * GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.1.0
  * GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 7.1.0
  * GCC, C++14: 5.4.0, 5.4.1, 6.3.0, 7.1.0
  * GCC, C++17: 7.1.0
  * GCC, C++1z: 6.3.0
  * Intel: 16.0, 17.0
  * Intel, C++11: 16.0, 17.0
  * Intel, C++14: 16.0
* OS X:
  * Clang: 8.1.0
  * Clang, C++11: 8.1.0
  * Clang, C++14: 8.1.0
* Windows:
  * GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
  * GCC, C++11: 4.6.4, 4.7.3, 4.8.1
  * GCC, C++14: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
  * Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
* Android:
  * Clang: 3.6, 3.7, 3.8
  * GCC: 4.9, 5.4
  * GCC, C++14: 6.2
* FreeBSD:
  * Clang: 3.8.0
  * Clang, C++11: 3.8.0
  * Clang, C++14: 3.8.0
  * Clang, C++1z: 3.8.0
* QNX:
  * QCC, C++11: 4.7.3
* SunOS:
  * Oracle Solaris Studio: 12.5_next, 12.5
  * Oracle Solaris Studio, C++11: 12.5_next, 12.5

Boost's additional test compilers include:

* Linux:
  * Clang: 3.0, 3.8.1
  * Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1
  * Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.8.1, 3.9.1, 4.0.1
  * Clang, C++1z: 4.0.0
  * GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.1.0
  * GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 7.1.0
  * GCC, C++14: 5.4.1, 6.2.0, 6.3.0, 7.1.0, 8.0.0
  * GCC, C++17: 7.1.0
  * GCC, C++1z: 6.3.0
  * Intel: 17.0
  * Intel, C++11: 16.0, 17.0
  * Intel, C++14: 16.0
* OS X:
  * Clang: 8.1.0
  * Clang, C++11: 8.1.0
  * Clang, C++14: 8.1.0
  * Clang, C++1z: 8.1.0
* Windows:
  * GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
  * GCC, C++11: 4.6.4, 4.7.3, 4.8.1
  * GCC, C++14: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
  * Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
* Android:
  * Clang: 3.6, 3.7, 3.8
  * GCC: 4.9, 5.4
  * GCC, C++14: 6.2
* FreeBSD:
  * Clang: 3.8.0
  * Clang, C++11: 3.8.0
  * Clang, C++14: 3.8.0
  * Clang, C++1z: 3.8.0
* SunOS:
  * Oracle Solaris Studio: 12.5_next, 12.5
  * Oracle Solaris Studio, C++11: 12.5_next, 12.5

[endsect]

[section Acknowledgements]

[@/users/people/beman_dawes.html Beman Dawes],
Eric Niebler,
[@/users/people/rene_rivera.html Rene Rivera],
Daniel James, Vladimir Prus and Marshall Clow
managed this release.

[endsect]
