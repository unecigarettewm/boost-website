[article Version 1.83.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* [phrase library..[@/libs/compat/ Compat]:] A repository of C++11 implementations of
  standard components added in later C++ standards, from Peter Dimov and contributors.

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/chrono/ Chrono]:]
  * Remove use of deprecated Boost.Ratio features.

* [phrase library..[@/libs/compat/ Compat]:]
  * Added `latch.hpp`, an implementation of `std::latch` (contributed by Christian Mazakas.)
  * Added `shared_lock.hpp`, a (partial) implementation of `std::shared_lock` (contributed by Christian Mazakas.)

* [phrase library..[@/libs/core/ Core]:]
  * Added support for incomplete types to `boost::core::type_name`.
  * Bit manipulation functions in `boost/core/bit.hpp` are now
    `constexpr` on recent MSVC versions (VS2019 update 5 and later.)
  * Added `boost::core::byteswap` (an implementation of `std::byteswap` from
    C++23) to `boost/core/bit.hpp`.
  * Moved the yield primitives `sp_thread_pause`, `sp_thread_yield`, `sp_thread_sleep`
    from SmartPtr implementation details to `boost/core/yield_primitives.hpp`.

* [phrase library..[@/libs/flyweight/index.html Flyweight]:]
  * Added smart-pointer syntax to `boost::flyweight` (`operator*` and 
    `operator->` dereferencing to the underlying value).

* [phrase library..[@/libs/mp11/ Mp11]:]
  * Added an offset/from parameter to `mp_from_sequence`, `mp_iota`, `mp_iota_c`.
  * Added `mp_value`, `mp_list_v`, `mp_rename_v`, `mp_is_value_list`.
  * Added value list support to the primitives in `<boost/mp11/list.hpp>`.
  * Added value list support to `mp_repeat`, `mp_fill`, `mp_at`, `mp_back`, `mp_take`, `mp_pop_back`, `mp_drop`, `mp_insert`, `mp_erase`.

* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * Updated range `insert` in non-unique ordered indices to preserve insertion order
    of equivalent elements (issue [github multi_index 68]). 
  * Serialization now uses `std::size_t` instead of `unsigned long` to save and load
    the size of a `multi_index_container` (`unsigned long` is smaller than
    `std::size_t` in LLP64 data models). `multi_index_container` serialization
    [@/libs/serialization/doc/tutorial.html#versioning class version] has been bumped
    from 3 to 4 to reflect this change. 

* [phrase library..[@/libs/ratio/ Ratio]:]
  * Change default `BOOST_RATIO_VERSION` to 2.
  * Support for `BOOST_RATIO_EXTENSIONS` is now deprecated and will eventually
    be removed when Boost.Ratio is implemented in terms of the standard `<ratio>`
    header.

* [phrase library..[@/libs/timer/ Timer]:]
  * Remove dependency on Boost.Chrono, Boost.System, and others.
  * Disable deprecated headers unless `BOOST_TIMER_ENABLE_DEPRECATED` is defined.

* [phrase library..[@/libs/unordered/ Unordered]:]
  * [*Major update.]
  * Added `boost::concurrent_flat_map`, a fast, thread-safe hashmap based on
    open addressing.
  * Sped up iteration of open-addressing containers.
  * In open-addressing containers, `erase(iterator)`, which previously returned
    nothing, now returns a proxy object convertible to an iterator to the next
    element. This enables the typical `it = c.erase(it)` idiom without incurring
    any performance penalty when the returned proxy is not used.

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/build/ Build]:]
  * Includes release of [@/tools/build/doc/html/#_version_4_10_0 B2 version 4.10.0].

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
