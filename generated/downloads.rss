<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:boostbook="urn:boost.org:boostbook">
  <channel>
    <generator>Boost Website Site Tools</generator>
    <title>Boost Downloads</title>
    <link>http://www.boost.org/users/download/</link>
    <description></description>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)</copyright>
<item><title>Version 1.60.0</title><link>http://www.boost.org/users/history/version_1_60_0.html</link><guid>http://www.boost.org/users/history/version_1_60_0.html</guid><pubDate>Thu, 17 Dec 2015 07:52:06 -0800</pubDate><description>



  &lt;div id="version_1_60_0.new_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/vmd/"&gt;VMD&lt;/a&gt;:&lt;/span&gt;
  Variadic Macro Data library,
          from Edward Diener.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_60_0.updated_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enforced proper alignment of &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; storage. This should fix
                possible issues on platforms that support atomic operations on data
                units larger than the native word size. This may also change binary
                layout of user's data structures that have &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; members.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation for PowerPC with IBM XL C++ compiler. Corrected
                memory barriers in PowerPC assembler.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with MSVC-8 for ARM.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with gcc 4.4 for x86-64, when 128-bit atomic operations
                were used. (&lt;a href="https://svn.boost.org/trac/boost/ticket/10994"&gt;#10994&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Optimized some gcc assembler blocks for x86/x86-64 to reduce the
                number of used registers. This may require binutils 2.10 or later.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/chrono/"&gt;Chrono - 2.0.5&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10778"&gt;#10778&lt;/a&gt;
                      VC14 CTP4 Atomic don't compile with boost::chrono durations
                      which are not TriviallyCopyable
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10840"&gt;#10840&lt;/a&gt;
                      Missing std:: qualifier for puts call in test_7868.cpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10851"&gt;#10851&lt;/a&gt;
                      Missing std:: qualifier for puts call in time_point_output.cpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10893"&gt;#10893&lt;/a&gt;
                      Minor doc typo in Boost.Chrono
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10992"&gt;#10992&lt;/a&gt;
                      Chrono IO state savers inconsistent with Boost.IO state savers
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10995"&gt;#10995&lt;/a&gt;
                      duration_put::put_value truncates fractional part
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="http://svn.boost.org/trac/boost/ticket/11006"&gt;#11006&lt;/a&gt;
                      Impossible to instantiate time_fmt_io_saver due to several
                      errors.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="http://svn.boost.org/trac/boost/ticket/11012"&gt;#11012&lt;/a&gt;
                      chrono_io v2 fail to compile with boost::chrono::duration&amp;lt;
                      boost::rational&amp;lt;int&amp;gt; &amp;gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/container/"&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;span class="link"&gt;Polymorphic
                Memory Resources&lt;/span&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add more BOOST_ASSERT checks to test preconditions in some operations
                (like &lt;code&gt;&lt;span class="identifier"&gt;pop_back&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;pop_front&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;back&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;front&lt;/span&gt;&lt;/code&gt;,
                etc.)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++11 &lt;code&gt;&lt;span class="identifier"&gt;back&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;front&lt;/span&gt;&lt;/code&gt; operations to &lt;code&gt;basic_string&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11627"&gt;Trac
                      #11627: &lt;em&gt;"small_vector&amp;lt;T,n&amp;gt;::swap() appears
                      to be broken"&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11628"&gt;Trac
                      #11628: &lt;em&gt;"small_vector&amp;lt;int,n&amp;gt; iterates
                      over elements in destructor"&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11697"&gt;Trac
                      #11697: &lt;em&gt;"Wrong initialization order in tuple
                      copy-constructor"&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11698"&gt;Trac
                      #11698: &lt;em&gt;"Missing return statement in static_storage_allocator"&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/pull/29"&gt;GitHub
                      #29: &lt;em&gt;Doc fixes for flap_map complexity requirements&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/pull/31"&gt;GitHub
                      #31: &lt;em&gt;DL_SIZE_IMPL also dereference addr&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="https://svn.boost.org/trac/boost/ticket/11603"&gt;#11603&lt;/a&gt; typo in PPC32/MACH-O asm
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                support for CYGWIN
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                In symbol demangling tools, added support for gabi++ ABI implementation
                used in Android NDK.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a new &lt;code&gt;&lt;span class="identifier"&gt;enable_if_has_type&lt;/span&gt;&lt;/code&gt;
                tool for performing SFINAE checks for presence of a nested type.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added functions &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#lex-normal"&gt;&lt;code&gt;&lt;span class="identifier"&gt;lexically_normal&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                      &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#lex-relative"&gt;&lt;code&gt;&lt;span class="identifier"&gt;lexically_relative&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                      &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#op-relative"&gt;&lt;code&gt;&lt;span class="identifier"&gt;relative&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, and &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#weakly_canonical"&gt;&lt;code&gt;&lt;span class="identifier"&gt;weakly_canonical&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
                      Many thanks to Jamie Allsop for his help and perseverance.
                      Resolves tickets &lt;a href="https://svn.boost.org/trac/boost/ticket/1976"&gt;#1976&lt;/a&gt;,
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/5897"&gt;#5897&lt;/a&gt;,
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6249"&gt;#6249&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Class &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;
                      added types &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-iterators"&gt;&lt;code&gt;&lt;span class="identifier"&gt;reverse_iterator&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
                      and &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-iterators"&gt;&lt;code&gt;&lt;span class="identifier"&gt;const_reverse_iterator&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                      and added functions &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-iterators"&gt;&lt;code&gt;&lt;span class="identifier"&gt;rbegin&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                      and &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-iterators"&gt;&lt;code&gt;&lt;span class="identifier"&gt;rend&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      C++11 &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                      supplied as specified in the Filesystem TS if supported by
                      the compiler.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      C++11 move constructors and move assignments supplied as specified
                      in the Filesystem TS if supported by the compiler. Resolves
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10291"&gt;#10291&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Existing functions whose names changed in the Filesystem TS
                      are now supported under both the old and new names.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-size"&gt;&lt;code&gt;&lt;span class="identifier"&gt;size&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
                      function to class &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;.
                      Resolves &lt;a href="https://svn.boost.org/trac/boost/ticket/6874"&gt;#6874&lt;/a&gt;,
                      Path should have a &lt;code&gt;&lt;span class="identifier"&gt;size&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; member function.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Tickets:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/11733"&gt;#11733&lt;/a&gt;,
                      Missing unistd.h include in boost/libs/filesystem/src/unique_path.cpp,
                      by apply a patch from Idar Tollefsen.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/5706"&gt;#5706&lt;/a&gt;,
                      unique_path Fails on Windows for Temporary User Profiles, by
                      applying &lt;a href="https://github.com/boostorg/filesystem/pull/15"&gt;pull
                      request #15&lt;/a&gt; from Sebastian Redl to fix a race condition
                      in &lt;code&gt;&lt;span class="identifier"&gt;unique_path&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/10591"&gt;#10591&lt;/a&gt;,
                      boost::filesystem does not build on iOS 8, by applying a patch
                      submitted by Daniel Seither.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/9454"&gt;#9454&lt;/a&gt;,
                      Boost Filesystem [library build] not compiling when BOOST_FILESYSTEM_NO_DEPRECATED
                      is defined, by applying a patch submitted by Makesim.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/11447"&gt;#11447&lt;/a&gt;,
                      &lt;code&gt;&lt;span class="identifier"&gt;__OpenBSD__&lt;/span&gt;&lt;/code&gt;
                      macro name misspelled, by applying a patch submitted by Jasper
                      Lievisse Adriaanse.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/11288"&gt;#11288&lt;/a&gt;,
                      A patch to avoid redundant string allocations, by applying
                      a patch submitted by Yevhen Ivannikov.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Resolve &lt;a href="https://svn.boost.org/trac/boost/ticket/11175"&gt;#11175&lt;/a&gt;,
                      out-of-date documentation causing users to incorrectly expect
                      that the library could be used with exceptions disabled.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Resolve &lt;a href="https://svn.boost.org/trac/boost/ticket/11166"&gt;#11166&lt;/a&gt;,
                      by mitigating (i.e. reducing the likelihood of) a possible
                      external file system race in &lt;code&gt;&lt;span class="identifier"&gt;remove&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/7258"&gt;#7258&lt;/a&gt;,
                      &lt;code&gt;&lt;span class="identifier"&gt;create_directories&lt;/span&gt;&lt;/code&gt;
                      returns false if the path ends with a slash. Also fix related
                      issues if path contains dot or dot-dot elements, and added
                      test cases to the test suite.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Resolve &lt;a href="https://svn.boost.org/trac/boost/ticket/10766"&gt;#10766&lt;/a&gt;,
                      &lt;code&gt;&lt;span class="identifier"&gt;parent_path&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; with redundant separator
                      returns wrong value, by adding examples and notes to the reference
                      documentation to show why the returned value is in fact correct,
                      and to provide rationale for that behavior. See &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-iterators"&gt;path.itr&lt;/a&gt;,
                      and &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-decomposition"&gt;path.decompose&lt;/a&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;parent_path&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;filename&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; sections of the reference
                      docs.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Close &lt;a href="https://svn.boost.org/trac/boost/ticket/7607"&gt;#7607&lt;/a&gt;,
                      path should not infer an invisible "." at the end
                      of a path that ends with a slash, as resolved by &lt;a href="https://svn.boost.org/trac/boost/ticket/7258"&gt;#7258&lt;/a&gt;
                      and &lt;a href="https://svn.boost.org/trac/boost/ticket/10766"&gt;#10766&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Close &lt;a href="https://svn.boost.org/trac/boost/ticket/11061"&gt;#11061&lt;/a&gt;,
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11062"&gt;#11062&lt;/a&gt;,
                      Impossible to traverse the path of the reverse iterator, as
                      effectively resolved by the addition of the class &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt; reverse iteration feature.
                      The reference documentation has also been updated with a &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-iterators"&gt;note&lt;/a&gt;
                      warning about the limitations of class &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;
                      iterators.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Other fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Clear several spurious GCC warnings.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix bug in &lt;code&gt;&lt;span class="identifier"&gt;file_status&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class="identifier"&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;:
                      C++ turns an explicit constructor with all arguments except
                      first defaulted into non-explicit single argument constructor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Apply Reference docs editorial cleanups: Use same style sheet
                      as the rest of the documentation. Tweak tab font size. Fix
                      excessively long lines in tables, synopsis.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Minor fixes, including pull requests from Jonathan Wakely and
                      Marcel Raad.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/flyweight/index.html"&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/fusion/"&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                All of fusion containers and generators now support C++11 variadic
                templates. (&lt;a href="https://github.com/boostorg/fusion/pull/89"&gt;pull-request
                89&lt;/a&gt;, &lt;a href="https://github.com/boostorg/fusion/pull/97"&gt;pull-request
                97&lt;/a&gt;, &lt;a href="https://github.com/boostorg/fusion/pull/100"&gt;pull-request
                100&lt;/a&gt;)
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;strong&gt;Special notice for &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;vector&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;
                      &lt;ul&gt;
                        &lt;li&gt;
                          &lt;div&gt;
                            Due to implementation limitation, numbered form (i.e.
                            &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;vectorN&lt;/span&gt;&lt;/code&gt;)
                            is provided via C++11 aliasing templates and deprecated
                            in C++11 or later. In this case, you should check &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FUSION_HAS_VARIADIC_VECTOR&lt;/span&gt;&lt;/code&gt;
                            macro and switch usage because some partial specialization
                            would become compile error (e.g. &lt;a href="https://github.com/boostorg/spirit/pull/158/files#diff-250ce096dee927d2b7eb5a4e24afb8cd"&gt;pull-request
                            for Spirit&lt;/a&gt;).
                          &lt;/div&gt;
                        &lt;/li&gt;
                      &lt;/ul&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;nview&lt;/span&gt;&lt;/code&gt; now support C++11 variadic
                templates. (&lt;a href="https://github.com/boostorg/fusion/pull/90"&gt;pull-request
                90&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;fold&lt;/span&gt;&lt;/code&gt; is now SFINAE-friendly. (&lt;a href="https://github.com/boostorg/fusion/pull/102"&gt;pull-request 102&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bug fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The generic fusion sequence convert to a deque fails with a
                      compiler error. (&lt;a href="https://svn.boost.org/trac/boost/ticket/11572"&gt;#11572&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      (doc) Return type of functions incorrect. (&lt;a href="https://svn.boost.org/trac/boost/ticket/3358"&gt;#3358&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10803"&gt;#10803&lt;/a&gt;
                      Union algorithm returning invalid geometry
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11522"&gt;#11522&lt;/a&gt;
                      Namespace clash in buffer for traits::detail
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11533"&gt;#11533&lt;/a&gt;
                      Assert failure in rtree caused by a bug in remove() if min
                      elements number is 1
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11607"&gt;#11607&lt;/a&gt;
                      Private geometry::exception::what()
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11709"&gt;#11709&lt;/a&gt;
                      is_simple segfault
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11710"&gt;#11710&lt;/a&gt;
                      is_simple - empty geometry logic
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11711"&gt;#11711&lt;/a&gt;
                      is_simple and is_valid - Points that are NaN or Infinity
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix colocations of touching interior ring / exterior ring,
                      where it also touches another polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix removing values from an empty rtree - no effect and 0 returned
                      instead of assertion failure
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix segfault in centroid for multi geometries containing empty
                      single geometries (thanks to Jiri Drbalek)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix liang_barsky strategy for integral coordinates (thanks
                      to Dane Springmeyer)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/interprocess/"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;offset_ptr&lt;/code&gt;
                performance and removed any undefined behaviour. No special cases
                needed for different compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11699"&gt;Trac
                      #11699 (&lt;em&gt;"Forward declarations of std templates
                      causes stack corruption under Visual Studio 2015"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/intrusive/"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;span class="link"&gt;Advanced lookup
                and insertions&lt;/span&gt; in ordered associative containers now support
                comparison functions that are not required to offer the same strict
                weak ordering as &lt;code&gt;&lt;span class="identifier"&gt;key_compare&lt;/span&gt;&lt;/code&gt;,
                the container must be partitioned in regards to the passed comparison
                object.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11701"&gt;Boost
                      Trac #11701: &lt;em&gt;Regression in boost::intrusive::set::equal_range&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11765"&gt;Boost
                      Trac #11765: &lt;em&gt;sgtree.hpp:830: bad if test ?&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/lexical_cast/"&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed usage of &lt;code&gt;&lt;span class="identifier"&gt;lexical_cast&lt;/span&gt;&lt;/code&gt;
                with move only types &lt;a href="https://svn.boost.org/trac/boost/ticket/11570"&gt;#11570&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed crash when &lt;code&gt;&lt;span class="identifier"&gt;BOOST_LCAST_NO_COMPILE_TIME_PRECISION&lt;/span&gt;&lt;/code&gt;
                is defined &lt;a href="https://svn.boost.org/trac/boost/ticket/11669"&gt;#11669&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppress some of the warning reported in &lt;a href="https://svn.boost.org/trac/boost/ticket/11570"&gt;#11570&lt;/a&gt; and &lt;a href="https://svn.boost.org/trac/boost/ticket/4946"&gt;#4946&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/locale"&gt;Locale&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented generic codecvt facet and add general purpose utf8_codecvt
                facet
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added posix locale support for FreeBSD 10.0 and above
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues &lt;a href="https://svn.boost.org/trac/boost/ticket/10017"&gt;#10017&lt;/a&gt; (sun redefinition on SunOS), &lt;a href="https://svn.boost.org/trac/boost/ticket/11163"&gt;#11163&lt;/a&gt; (set_default_messages_domain
                incorrect behavior), &lt;a href="https://svn.boost.org/trac/boost/ticket/11673"&gt;#11673&lt;/a&gt; build issues
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some warning cleanup
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed tests for latest ICU versions
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added workaround for &lt;code&gt;&lt;span class="identifier"&gt;libc&lt;/span&gt;&lt;span class="special"&gt;++&lt;/span&gt;&lt;/code&gt; issues
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new defines &lt;code&gt;&lt;span class="identifier"&gt;BOOST_LOCALE_ENABLE_CHAR16_T&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_LOCALE_ENABLE_CHAR32_T&lt;/span&gt;&lt;/code&gt;
                to enable C++11 &lt;code&gt;&lt;span class="keyword"&gt;char16_t&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="keyword"&gt;char32_t&lt;/span&gt;&lt;/code&gt; instead
                of deprecated ones
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                General changes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      On Windows, the configuration macro &lt;code&gt;&lt;span class="identifier"&gt;BOOST_LOG_USE_WINNT6_API&lt;/span&gt;&lt;/code&gt;
                      is no longer used by the library. The target Windows version
                      should be configured by defining macro &lt;code&gt;&lt;span class="identifier"&gt;BOOST_USE_WINAPI_VERSION&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed compilation for Android using Google NDK. (&lt;a href="https://svn.boost.org/trac/boost/ticket/11559"&gt;#11559&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed compilation of some logging statements, where the first
                      object to be put into stream is not directly supported by
                      &lt;code&gt;&lt;span class="identifier"&gt;formatting_ostream&lt;/span&gt;&lt;/code&gt;.
                      (&lt;a href="https://svn.boost.org/trac/boost/ticket/11549"&gt;#11549&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a workaround for Solaris Studio 12.4, which should fix
                      the compilation of &lt;code&gt;&lt;span class="identifier"&gt;formatting_ostream&lt;/span&gt;&lt;/code&gt;.
                      (&lt;a href="https://svn.boost.org/trac/boost/ticket/11545"&gt;#11545&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed compilation when native &lt;code&gt;&lt;span class="keyword"&gt;wchar_t&lt;/span&gt;&lt;/code&gt;
                      type is disabled. (&lt;a href="https://svn.boost.org/trac/boost/ticket/11541"&gt;#11541&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed exporting symbols from the &lt;code&gt;&lt;span class="identifier"&gt;boost_log_setup&lt;/span&gt;&lt;/code&gt;
                      library on POSIX-like systems.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed compilation of character decorators.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a workaround for incorrect file name generation in text
                      file sink backend, when the file name contains date/time placeholders.
                      (&lt;a href="https://svn.boost.org/trac/boost/ticket/11691"&gt;#11691&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href="http://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/move/"&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href="https://svn.boost.org/trac/boost/ticket/11615"&gt;Trac
                #11615: &lt;em&gt;"Boost.Move should use the qualified name
                for std::size_t in type_traits.hpp"&lt;/em&gt;&lt;/a&gt;,
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/multi_index/index.html"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an interoperability problem with &lt;a href="http://www.qt.io/"&gt;Qt&lt;/a&gt;
                due to the optional definition of a macro with name &lt;code&gt;&lt;span class="identifier"&gt;foreach&lt;/span&gt;&lt;/code&gt; in this framework.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/numeric/odeint"&gt;odeint&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New features:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added functionality to throw an exception if too many ODE steps
                      are performed.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added possibility to limit maximal step size in adaptive methods.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                several Bug fixes, see https://github.com/headmyshoulder/odeint-v2/issues
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/optional/"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the implementation of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;none&lt;/span&gt;&lt;/code&gt;
                again. Now it is a const object with internal linkage (as any other
                tag). This fixes &lt;a href="https://svn.boost.org/trac/boost/ticket/11203"&gt;#11203&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add detection of SIMD hardware.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href="http://www.boost.org/libs/predef/doc/html/predef/history.html#predef.history.1_4"&gt;history&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Boost.test v3.1 see the '&lt;a href="http://www.boost.org/doc/libs/1_60_0/libs/test/doc/html/boost_test/change_log.html"&gt;Change
                log&lt;/a&gt;' section for details.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New features
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Improved Command Line Interface
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Improved dataset API
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/3384"&gt;#3384&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/3897"&gt;#3897&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/6032"&gt;#6032&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/6859"&gt;#6859&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/7257"&gt;#7257&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/9228"&gt;#9228&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/10317"&gt;#10317&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11279"&gt;#11279&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11478"&gt;#11478&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11571"&gt;#11571&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11623"&gt;#11623&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11624"&gt;#11624&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11625"&gt;#11625&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/thread/"&gt;Thread - 4.6.0&lt;/a&gt;:&lt;/span&gt;
  &lt;em&gt;New
          Experimental Features:&lt;/em&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11231"&gt;#11231&lt;/a&gt;
                Allow to set continuation future's destructor behavior to non-blocking
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11424"&gt;#11424&lt;/a&gt;
                Provide shared_timed_mutex as an alternative name for shared_mutex
                and deprecate the use of shared_mutex as a timed mutex
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11734"&gt;#11734&lt;/a&gt;
                future::then(Cont) should be able to execute the contination on undetermined
                thread
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11736"&gt;#11736&lt;/a&gt;
                Allow to use launch::executor on future::then(launch::executor, cont)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11737"&gt;#11737&lt;/a&gt;
                Add a launch::inherit policy that can be used on ::then() to use
                the policy of the parent future &lt;em&gt;Fixed Bugs:&lt;/em&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/3926"&gt;#3926&lt;/a&gt;
                thread_specific_ptr + dlopen library causes a SIGSEGV.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/6377"&gt;#6377&lt;/a&gt;
                Condition variable blocks when changing time
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/6787"&gt;#6787&lt;/a&gt;
                boost::thread::sleep() hangs if system time is rolled back
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/7665"&gt;#7665&lt;/a&gt;
                this_thread::sleep_for no longer uses steady_clock in thread
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/7720"&gt;#7720&lt;/a&gt;
                exception lock_error while intensive locking/unlocking of mutex
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/9309"&gt;#9309&lt;/a&gt;
                test_latch fails often on clang-darwin-tot11
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/10788"&gt;#10788&lt;/a&gt;
                GetLogicalProcessor isn't available for Windows platform less or
                equals to 0x0502
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11090"&gt;#11090&lt;/a&gt;
                ex_future_unwrap- ThreadSanitizer: lock-order-inversion (potential
                deadlock)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11158"&gt;#11158&lt;/a&gt;
                Pthread thread deadlock when faketime used
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11174"&gt;#11174&lt;/a&gt;
                boost::condition_variable::timed_wait with predicate unexpectedly
                wakes up while should wait infinite
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11185"&gt;#11185&lt;/a&gt;
                Incorrect URL redirection
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11192"&gt;#11192&lt;/a&gt;
                boost::future&amp;lt;&amp;gt;::then() with an executor doesn't compile when
                the callback returns a future
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11250"&gt;#11250&lt;/a&gt;
                future made from make_exceptional fails on assertion in destructor
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11256"&gt;#11256&lt;/a&gt;
                future&amp;lt;&amp;gt;::is_ready() == false in continuation function
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11261"&gt;#11261&lt;/a&gt;
                bad use of scoped threads in basic_thread_pool
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11262"&gt;#11262&lt;/a&gt;
                bad use of direct pointer in shared_state_nullary_task
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11263"&gt;#11263&lt;/a&gt;
                lock already locked lock
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11266"&gt;#11266&lt;/a&gt;
                boost::packaged_task has invalid variadic signature
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11302"&gt;#11302&lt;/a&gt;
                boost thread doesn't build with BOOST_THREAD_PATCH.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11322"&gt;#11322&lt;/a&gt;
                sleep_for() nanoseconds overload will always return too early on
                windows
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11329"&gt;#11329&lt;/a&gt;
                using declarative for GetProcessHeap, .... fails
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11368"&gt;#11368&lt;/a&gt;
                boost thread's usage of CreateWaitableTimer wakes PC from sleep (doh)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11377"&gt;#11377&lt;/a&gt;
                Boost condition variable always waits for system clock deadline
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11435"&gt;#11435&lt;/a&gt;
                gcc compiler warning in future.hpp
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11555"&gt;#11555&lt;/a&gt;
                devector.hpp assumes allocator_traits_type is always present
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11562"&gt;#11562&lt;/a&gt;
                Timer (using steady_clock) expires after computer time is set forward
                on Ubuntu 64-bit
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11672"&gt;#11672&lt;/a&gt;
                Thread: Should use unique_ptr, not auto_ptr
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11688"&gt;#11688&lt;/a&gt;
                thread::try_join_until: Avoid busy wait if system clock changes
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="http://svn.boost.org/trac/boost/ticket/11672"&gt;#11716&lt;/a&gt;
                ::then(f) should inherit the parent Executor
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/uuid/"&gt;UUID&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a workaround for MSVC codegen bug that could cause crashes
                when comparing UUIDs.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added detection of AVX being enabled with MSVC compiler switches.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_60_0.news"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;News&lt;/span&gt;&lt;/h3&gt;
    &lt;div id="version_1_60_0.news.notes_for_windows_users"&gt;
      &lt;h3&gt;&lt;span class="link"&gt;Notes for
      Windows users&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        This release of Boost will by default compile for Windows Vista/Windows Server
        2008, if the compiler supports a recent enough Windows SDK, and for Windows
        XP otherwise. Binaries compiled with default options may not run on the older
        Windows versions.
      &lt;/p&gt;
      &lt;p&gt;
        It is still possible to explicitly specify target Windows version by defining
        &lt;code&gt;&lt;span class="identifier"&gt;BOOST_USE_WINAPI_VERSION&lt;/span&gt;&lt;/code&gt;
        to a numeric version of Windows API. For example, building Boost for Windows
        XP can be done with the following command:
      &lt;/p&gt;
&lt;pre&gt;    b2 release define=BOOST_USE_WINAPI_VERSION=0x0501
&lt;/pre&gt;
      &lt;p&gt;
        The list of Windows API version numbers can be seen on &lt;a href="https://msdn.microsoft.com/en-us/library/6sehtctf.aspx"&gt;this&lt;/a&gt;
        page.
      &lt;/p&gt;
      &lt;p&gt;
        This change only concerns libraries that use the common Windows API abstraction
        layer. Currently, these libraries are: Boost.Chrono, Boost.Dll, Boost.Log,
        Boost.UUID. This will also affect all dependent libraries.
      &lt;/p&gt;
    &lt;/div&gt;
    &lt;div id="version_1_60_0.news.release_of_hana_postponed"&gt;
      &lt;h3&gt;&lt;span class="link"&gt;Release
      of Hana postponed&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        Due to time constraints, the release of &lt;a href="https://github.com/boostorg/hana"&gt;Hana&lt;/a&gt;
        will be postponed to a later release of Boost. This will also allow some
        known issues to be addressed properly before releasing the library officially
        as a part of Boost. More information can be found on the &lt;a href="http://article.gmane.org/gmane.comp.lib.boost.devel/263964"&gt;mailing
        list&lt;/a&gt;.
      &lt;/p&gt;
    &lt;/div&gt;
    &lt;div id="version_1_60_0.news.release_of_boost_dll_library_pos"&gt;
      &lt;h3&gt;&lt;span class="link"&gt;Release
      of Boost.DLL library postponed&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        In order to provide superior support of uncommon toolsets and platforms,
        the release of Boost.DLL was postponed to a later release of Boost. This
        also allows to test better a recently added ability to copy construct and
        copy assign instances of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;shared_library&lt;/span&gt;&lt;/code&gt; and provide examples on
        importing functions with non default calling conventions. Latest version
        and developer documentation of the library could be found at &lt;a href="https://github.com/boostorg/dll"&gt;GitHub
        repo&lt;/a&gt;.
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id="version_1_60_0.compilers_tested"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4, 3.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.8.4, 4.9.3, 5.1.0, 5.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++03, mingw: 3.4.5
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14, mingw: 4.9.3, 5.1.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Android:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.6, 3.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.9.0, 5.2.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          SunOS:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Oracle Solaris Studio: 12.4, 12.5
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2, 3.3, 3.4.2, 3.6.0, 3.8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.7.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.4, 4.7.3, 4.8.1, 4.9.3, 5.1.0, 6.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.3, 5.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C++: 13.1.2.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 16.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 7.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 5.2.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++03, mingw: 3.4.5
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11, mingw: 4.7.3, 4.8.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14, mingw: 4.9.3, 5.1.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Android:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.6, 3.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.9.0, 5.2.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.4.1, 3.7.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.8.5, 5.2.0, 6.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          SunOS:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Oracle Solaris Studio: 12.4, 12.5
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_60_0.acknowledgements"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href="http://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href="http://www.boost.org/users/people/rene_rivera.html"&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.59.0</title><link>http://www.boost.org/users/history/version_1_59_0.html</link><guid>http://www.boost.org/users/history/version_1_59_0.html</guid><pubDate>Thu, 13 Aug 2015 08:23:03 -0700</pubDate><description>



  &lt;div id=&quot;version_1_59_0.known_issue&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Known Issue&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Boost.Log contains has a regression that prevents some of the logging statements
          from compiling (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11549&quot;&gt;#11549&lt;/a&gt;). This is fixed in &lt;a href=&quot;https://github.com/boostorg/log/commit/7da193fde1a9c1bc925ee980339f4df2e1a66fa7&quot;&gt;git&lt;/a&gt;.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_59_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/convert/&quot;&gt;Convert&lt;/a&gt;:&lt;/span&gt;
  An extendible and configurable
          type-conversion framework, from Vladimir Batov.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine2/&quot;&gt;Coroutine2&lt;/a&gt;:&lt;/span&gt;
  (C++14) Coroutine
          library, from Oliver Kowalke.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_59_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://github.com/boostorg/container/pull/26&quot;&gt;GitHub
                #26: &lt;em&gt;Fix bug in stable_vector::capacity()&lt;/em&gt;&lt;/a&gt;.
                Thanks to timsong-cpp/Arindam Mukerjee.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://github.com/boostorg/container/pull/27&quot;&gt;GitHub
                #27: &lt;em&gt;fix stable_vector's index_of's doxygen comment&lt;/em&gt;&lt;/a&gt;.
                Thanks to kariya-mitsuru.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11380&quot;&gt;Trac #11380:
                &lt;em&gt;&amp;quot;Container library std forward declarations incorrect
                in std_fwd.hpp on libc++ with gcc&amp;quot;&lt;/em&gt;&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11388&quot;&gt;Trac #11388:
                &lt;em&gt;&amp;quot;boost::container::list::emplace_back broken on Visual
                Studio 2010&amp;quot;&lt;/em&gt;&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11339&quot;&gt;Trac #11339:
                &lt;em&gt;&amp;quot;VC12 LNK2005 error with boost::container::adaptive_pool&amp;quot;&lt;/em&gt;&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11223&quot;&gt;#11223&lt;/a&gt; check support for std::integer_sequence
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                execution_context uses internally Windows Fibers with BOOST_USE_WINFIBERS
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                support of assember for MinGW on Windows (32bit)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10978&quot;&gt;#10978&lt;/a&gt; remove additional semicolons
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11230&quot;&gt;#11230&lt;/a&gt; coroutine_error returns dangling exception message pointer
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11234&quot;&gt;#11234&lt;/a&gt; doesn't compile when used with boost::range::algorithms
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11356&quot;&gt;#11356&lt;/a&gt; coroutines segfaults with BOOST_USE_SEGMENTED_STACKS
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add a new concept, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Unbounded&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;Sequence&lt;/span&gt;&lt;/code&gt; for sequence and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Unbounded&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;Iterator&lt;/span&gt;&lt;/code&gt;
                for iterator. Currently, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Unbounded&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;Sequence&lt;/span&gt;&lt;/code&gt; affects the behaviour
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_c&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;at_key&lt;/span&gt;&lt;/code&gt;. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Unbounded&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;Iterator&lt;/span&gt;&lt;/code&gt; has no effect
                (reserved for future release). For more details, see &lt;a href=&quot;http://www.boost.org/users/history/libs/fusion/doc/html/fusion/sequence/concepts/unbounded_sequence.html&quot;&gt;Unbounded
                Sequence&lt;/a&gt; and &lt;a href=&quot;http://www.boost.org/libs/fusion/doc/html/fusion/iterator/concepts/unbounded_iterator.html&quot;&gt;Unbounded
                Iterator&lt;/a&gt;. (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/85&quot;&gt;pull-request
                85&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support C++11 variadic templates for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;list&lt;/span&gt;&lt;/code&gt;.
                (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/84&quot;&gt;pull-request
                84&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix missing include &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
                      (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11161&quot;&gt;#11161&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Revert some constexpr support, regression in 1.58.0. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11211&quot;&gt;#11211&lt;/a&gt;,
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11267&quot;&gt;#11267&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix compile error with fold due to missing include. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11249&quot;&gt;#11249&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix compile error with adapting an empty struct, regression
                      in 1.58.0. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11269&quot;&gt;#11269&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Remove use of obsolete (and incorrect) workaround for sequence
                      comparison, it affects MSVC-8 and earlier. (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/78&quot;&gt;pull-request
                      78&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix compile error while copying a sequece which derived from
                      fusion::list, regression in 1.58.0. (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/87&quot;&gt;pull-request
                      87&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix compile error on copying a fusion::tuple. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11140&quot;&gt;#11140&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Add workarounds for GCC 4.6 with constexpr. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11517&quot;&gt;#11517&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added rtree const_iterator, begin(), end() and the support
                      for Boost.Range.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The support for C++11 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;initializer_list&lt;/span&gt;&lt;/code&gt;
                      in geometries models.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Disjoint and intersects support the following geometry combinations:
                      multipoint/linestring, multipoint/multilinestring.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added relate() and relation() algorithms.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Intersection has been implemented for combinations of pointlike
                      and linear geometries
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added implementation for difference(pointlike, linear)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm is_empty, returning true if the geometry represents
                      the empty set
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The envelope algorithm supports pointlike and linear geometries
                      in the spherical equatorial coordinate system
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The envelope algorithm supports pointlike geometries in the
                      geographic coordinate system
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Improvements:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Upgraded rtree const_query_iterator category to ForwardIterator.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Buffer performance of buffers around multi-points is improved
                      significantly
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Breaking changes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      buffer side strategy now returns error_code instead of bool.
                      If you have your own custom side strategy, it should be adapted
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11113&quot;&gt;#11113&lt;/a&gt;
                      Support easy enumeration of all elements with BOOST_FOREACH
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11232&quot;&gt;#11232&lt;/a&gt;
                      Feature request - relate()
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11236&quot;&gt;#11236&lt;/a&gt;
                      Invalid result of centroid() for integer coordinate type
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11268&quot;&gt;#11268&lt;/a&gt;
                      Regression in boost::geometry::intersection interface with
                      multi_linestring and box -- does not compile on 1.57 VS 1.55
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11332&quot;&gt;#11332&lt;/a&gt;
                      Assertion failure in buffer for extreme coordinate differences
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11346&quot;&gt;#11346&lt;/a&gt;
                      Segment iterator does not work with ranges returning values
                      instead of references
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11436&quot;&gt;#11436&lt;/a&gt;
                      sym_difference(py1, py2, mpy) returns invalid multipolygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Buffer: use a more robust way to calculate the side of an intersection,
                      this fixes several errors in buffer generation
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix in selection of segment to which calculate from IP from,
                      in intersection of two segments. Now is selected the one close
                      to a segment-point point, or else the one on the shortest segment.
                      This avoids (rarely occuring) generation of tiny triangles
                      making output polygons invalid
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      In rescaling round instead of truncate to the integer grid
                      (this fix and the previous mentioned can have some impact on
                      output geometries)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix potential infinite loop in detail::has_spikes (the loop
                      can happen if the points passed have NaN coordinates)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5139&quot;&gt;( Trac
                #5139 ( (&lt;em&gt;&amp;quot;Initial Stream Position in Boost.Interprocess.Vectorstream&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/19&quot;&gt;GitHub
                Pull #19 (&lt;em&gt;&amp;quot;Fix exception visibility&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                Thanks to Romain-Geissler.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;span class=&quot;link&quot;&gt;map and multimap-like
                interfaces&lt;/span&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Refactored hashtable containers to reduce template instantiations.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed warnings
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Simplified metaprogramming (thanks to Edward Diener)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                General changes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      On systems with &lt;a href=&quot;https://gcc.gnu.org/wiki/Visibility&quot;&gt;symbol
                      visibility&lt;/a&gt; support (e.g. Linux) the library is now
                      built with all internal symbols hidden.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;strong&gt;Breaking change:&lt;/strong&gt; The library
                      has been ported to Boost.TypeIndex for its underlying type
                      info management tool. This affected the following public interfaces:
                      &lt;ul&gt;
                        &lt;li&gt;
                          &lt;div&gt;
                            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;invalid_type&lt;/span&gt;&lt;/code&gt;
                            exceptions thrown by the library now have &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;typeindex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt; attached
                            as the description of the offending type. The type was
                            previously identified by &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_wrapper&lt;/span&gt;&lt;/code&gt;.
                          &lt;/div&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                          &lt;div&gt;
                            Boost.Exception &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_info&lt;/span&gt;&lt;/code&gt;
                            error information now contains &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;typeindex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt;
                            instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_wrapper&lt;/span&gt;&lt;/code&gt;.
                          &lt;/div&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                          &lt;div&gt;
                            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; now returns &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;typeindex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt; instead
                            of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_wrapper&lt;/span&gt;&lt;/code&gt;.
                            User-defined attribute value implementations should be
                            similarly changed (the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; virtual method now
                            also returns &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;typeindex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt;).
                          &lt;/div&gt;
                        &lt;/li&gt;
                      &lt;/ul&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_wrapper&lt;/span&gt;&lt;/code&gt;
                      component has been deprecated and will be removed in future
                      releases. Boost.TypeIndex is recommended as a replacement.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Removed the previously deprecated headers: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ref_counter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;explicit_operator_bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for building the library for OpenBSD. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11446&quot;&gt;#11446&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Improved internal implementation of the event synchronization
                      primitive used for asynchronous logging. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11398&quot;&gt;#11398&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed incorrect behavior of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value_set&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value_set&lt;/span&gt;&lt;/code&gt;
                      constructor in some cases. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11190&quot;&gt;#11190&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href=&quot;http://www.boost.org/libs/log/doc/html/log/changelog.html&quot;&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt;'s
                converting constructor taking the source by value in C++03 compilers
                to allow simple conversions from convertible types returned by value.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11229&quot;&gt;Trac #11229:
                &lt;em&gt;&amp;quot;vector incorrectly copies move-only objects using
                memcpy&amp;quot;&lt;/em&gt;&lt;/a&gt;,
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/tutorial/indices.html#rnk_indices&quot;&gt;ranked
                indices&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/predef/&quot;&gt;Predef&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix many problems with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;predef_check&lt;/span&gt;&lt;/code&gt;
                functionality.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Update SunPro detection to accomodate latest version of compiler
                from Oracle.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt;&lt;/code&gt; logical operators for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;predef_check&lt;/span&gt;&lt;/code&gt; expression on the
                Boost Build side.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ARCH_PARISC&lt;/span&gt;&lt;/code&gt;
                to correctly spelled name.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;MAKE_YYYYM&lt;/span&gt;&lt;/code&gt; macros
                to correctly limit the month.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/program_options/&quot;&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix compilation errors, missing dllexport and warnings with MSVC
                and MinGW (Daniela Engert, Marcel Raad).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix unintialized fields (Zoey Greer).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Stop options with implicit value from consuming separate tokens (Michael
                John Decker).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make multitoken limit be max int, not 32K (Hans Hohenfeld).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Code formatting and documentation fixes (Jurko Gospodnetić, Lauri
                Nurmi).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minimal support for no-rtti build (Minmin Gong)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Don't increment environment pointer past the end (Vladimir Prus)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_tree/&quot;&gt;Property Tree&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                A new JSON parser with full Unicode support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change:&lt;/strong&gt; The new parser
                does not support comments or string concatenation in JSON files.
                These features were non-standard extensions of the old parser but
                their removal could break code which was relying on them.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/test/&quot;&gt;Boost.Test v3&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Major new features
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_TEST&lt;/span&gt;&lt;/code&gt;
                      generic assertion
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      data driven test cases
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      test units can now have &lt;em&gt;attributes&lt;/em&gt; for
                      finer control over tests behavior (logical grouping, test dependencies,
                      test enabling/disabling)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      CLI learned &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;colour_output&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;list_content&lt;/span&gt;&lt;/code&gt;,
                      extended unit test filtering (negation, labels)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      refactored and rewritten documentation using quickbook
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Addressed issues:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2018&quot;&gt;#2018&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2450&quot;&gt;#2450&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2600&quot;&gt;#2600&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2717&quot;&gt;#2717&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2759&quot;&gt;#2759&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3182&quot;&gt;#3182&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3316&quot;&gt;#3316&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3392&quot;&gt;#3392&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3402&quot;&gt;#3402&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3445&quot;&gt;#3445&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3463&quot;&gt;#3463&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3542&quot;&gt;#3542&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3481&quot;&gt;#3481&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3495&quot;&gt;#3495&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3592&quot;&gt;#3592&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3595&quot;&gt;#3595&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3623&quot;&gt;#3623&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3664&quot;&gt;#3664&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3784&quot;&gt;#3784&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3785&quot;&gt;#3785&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3811&quot;&gt;#3811&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3834&quot;&gt;#3834&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3896&quot;&gt;#3896&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3932&quot;&gt;#3932&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3938&quot;&gt;#3938&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3964&quot;&gt;#3964&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3978&quot;&gt;#3978&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3979&quot;&gt;#3979&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4161&quot;&gt;#4161&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4275&quot;&gt;#4275&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4389&quot;&gt;#4389&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4434&quot;&gt;#4434&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4587&quot;&gt;#4587&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4806&quot;&gt;#4806&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4911&quot;&gt;#4911&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4923&quot;&gt;#4923&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4924&quot;&gt;#4924&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4982&quot;&gt;#4982&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5008&quot;&gt;#5008&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5036&quot;&gt;#5036&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5262&quot;&gt;#5262&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5374&quot;&gt;#5374&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5412&quot;&gt;#5412&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5563&quot;&gt;#5563&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5582&quot;&gt;#5582&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5599&quot;&gt;#5599&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5718&quot;&gt;#5718&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5729&quot;&gt;#5729&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5870&quot;&gt;#5870&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5972&quot;&gt;#5972&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6002&quot;&gt;#6002&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6071&quot;&gt;#6071&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6074&quot;&gt;#6074&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6161&quot;&gt;#6161&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6766&quot;&gt;#6766&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6712&quot;&gt;#6712&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6748&quot;&gt;#6748&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7046&quot;&gt;#7046&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7136&quot;&gt;#7136&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7410&quot;&gt;#7410&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7894&quot;&gt;#7894&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8201&quot;&gt;#8201&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8272&quot;&gt;#8272&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8467&quot;&gt;#8467&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8862&quot;&gt;#8862&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8895&quot;&gt;#8895&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9179&quot;&gt;#9179&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9272&quot;&gt;#9272&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9390&quot;&gt;#9390&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9409&quot;&gt;#9409&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9537&quot;&gt;#9537&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9539&quot;&gt;#9539&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9581&quot;&gt;#9581&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9960&quot;&gt;#9960&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10318&quot;&gt;#10318&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10394&quot;&gt;#10394&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10888&quot;&gt;#10888&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11054&quot;&gt;#11054&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11347&quot;&gt;#11347&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11358&quot;&gt;#11358&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11359&quot;&gt;#11359&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_index/&quot;&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed dependencies on some of the Boost libraries to improve compilation
                times and modularity
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Warnings fixed in tests and other maintainance improvements were
                done.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed missing include in element_index.hpp &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11196&quot;&gt;#11196&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11283&quot;&gt;#11283&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;apply_visitor&lt;/span&gt;&lt;/code&gt; usage with C++14
                and const references &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11251&quot;&gt;#11251&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11285&quot;&gt;#11285&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Relaxed compile time checks for all the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;reference&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;variant_variable&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; functions (thanks to Nicolas Cornu)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_59_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.8.2, 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 15.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Android:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8, 4.9
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          SunOS:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun: 6.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2, 3.3, 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.6, 3.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.4, 4.7.3, 4.8.1, 5.1.0, 6.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.3, 5.1.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 15.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Android:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8, 4.9
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8.5, 5.1.0, 6.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_59_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.58.0</title><link>http://www.boost.org/users/history/version_1_58_0.html</link><guid>http://www.boost.org/users/history/version_1_58_0.html</guid><pubDate>Fri, 17 Apr 2015 08:53:58 +0100</pubDate><description>



  &lt;div id=&quot;version_1_58_0.known_issue&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Known Issue&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Boost.Python will fail to build if it is compiled against a version of
          python that is one of: 3.0.X, 3.1.X, 3.2.X, 3.3.X. Versions 2.X and 3.4+
          are not affected. This is fixed in &lt;a href=&quot;https://github.com/boostorg/python/commit/3e405b6fd5db5615bbef241763de070118222ca7&quot;&gt;git&lt;/a&gt;.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Boost.Fusion has a regression with non-constexpr types. &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11211&quot;&gt;#11211&lt;/a&gt;
  This
          is fixed in some PRs: &lt;a href=&quot;https://github.com/boostorg/fusion/pull/70&quot;&gt;Github
          PR #70&lt;/a&gt;, &lt;a href=&quot;https://github.com/boostorg/fusion/pull/71&quot;&gt;Github
          PR #71&lt;/a&gt;, &lt;a href=&quot;https://github.com/boostorg/fusion/pull/72&quot;&gt;Github
          PR #72&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Patches:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_58_0/0001-Fix-exec_file-for-Python-3-3.4.patch&quot;&gt;0001-Fix-exec_file-for-Python-3-3.4.patch&lt;/a&gt;
          (for libs/python).
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_58_0/0002-Fix-a-regression-with-non-constexpr-types.patch&quot;&gt;0002-Fix-a-regression-with-non-constexpr-types.patch&lt;/a&gt;
          (for libs/fusion).
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_58_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/endian&quot;&gt;Endian&lt;/a&gt;:&lt;/span&gt;
  Types and conversion functions
          for correct byte ordering and more regardless of processor endianness.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/sort/&quot;&gt;Sort&lt;/a&gt;:&lt;/span&gt;
  Includes spreadsort, a general-case
          hybrid radix sort that is faster than O(n*log(n))
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_58_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured errors generated by Windows' &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConnectEx&lt;/span&gt;&lt;/code&gt;
                function are mapped to their portable equivalents (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10744&quot;&gt;#10744&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DISABLE_CONNECTEX&lt;/span&gt;&lt;/code&gt;
                to allow use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConnectEx&lt;/span&gt;&lt;/code&gt;
                to be explicitly disabled.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a race condition in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;object_handle&lt;/span&gt;&lt;/code&gt;
                when there are pending wait operations on destruction (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10624&quot;&gt;#10624&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed IPv6 address parsing on FreeBSD, where a trailing scope ID
                would cause conversion to fail with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EINVAL&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Worked around shared library visibility issues by ensuring Asio types
                use default visibility (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9465&quot;&gt;#9465&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11070&quot;&gt;#11070&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the SSL wrapper to call the password callback when loading
                an in-memory key (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10828&quot;&gt;#10828&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed false SSL error reports by ensuring that the SSL error queue
                is cleared prior to each operation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                bug that may result in spurious 'short read' errors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed a redundant null pointer check in the SSL engine (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10088&quot;&gt;#10088&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added options for disabling TLS v1.1 and v1.2 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10690&quot;&gt;#10690&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed use of deprecated OpenSSL function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ERR_remove_state&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed detection of various C++11 features with Clang (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8835&quot;&gt;#8835&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10884&quot;&gt;#10884&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed detection of C++11 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;/code&gt;
                with &lt;tt&gt;g++&lt;/tt&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10982&quot;&gt;#10982&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed multicast test to treat certain &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;join_group&lt;/span&gt;&lt;/code&gt;
                failures as non-fatal.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Decoupled Asio unit tests from Boost.Test (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11116&quot;&gt;#11116&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the tutorial to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;endl&lt;/span&gt;&lt;/code&gt;
                to ensure output is flushed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an unsigned integer overflow reported by Clang's integer sanitizer.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for move-only return types when using a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;yield_context&lt;/span&gt;&lt;/code&gt; object with asynchronous
                operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;yield_context&lt;/span&gt;&lt;/code&gt;
                to allow reentrant calls to the completion handler from an initiating
                function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated detection of Windows Runtime to work with latest Windows
                SDK.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Version&lt;/em&gt; 2.0.5
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10778&quot;&gt;#10778&lt;/a&gt;
                      VC14 CTP4 Atomic don't compile with boost::chrono durations
                      which are not TriviallyCopyable
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10840&quot;&gt;#10840&lt;/a&gt;
                      Missing std:: qualifier for puts call in test_7868.cpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10851&quot;&gt;#10851&lt;/a&gt;
                      Missing std:: qualifier for puts call in time_point_output.cpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10893&quot;&gt;#10893&lt;/a&gt;
                      Minor doc typo in Boost.Chrono
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10992&quot;&gt;#10992&lt;/a&gt;
                      Chrono IO state savers inconsistent with Boost.IO state savers
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10995&quot;&gt;#10995&lt;/a&gt;
                      duration_put::put_value truncates fractional part
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11006&quot;&gt;#11006&lt;/a&gt;
                      Impossible to instantiate time_fmt_io_saver due to several
                      errors.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11012&quot;&gt;#11012&lt;/a&gt;
                      chrono_io v2 fail to compile with boost::chrono::duration&amp;lt;
                      boost::rational&amp;lt;int&amp;gt; &amp;gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Experimental &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;small_vector&lt;/span&gt;&lt;/code&gt;
                container.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Massive dependency reorganization. Now &lt;em&gt;Boost.Container&lt;/em&gt;
                depends on very basic utilities like Boost.Core and &lt;em&gt;Boost.Intrusive&lt;/em&gt;.
                Preprocessed code size have decreased considerably and compilation
                times have improved.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;nth&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;index_of&lt;/span&gt;&lt;/code&gt; functions to containers
                with random-access iterators (except &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_string&lt;/span&gt;&lt;/code&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++17's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Allocator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;is_always_equal&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated containers to implement new constructors as specified in
                &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2210&quot;&gt;2210.
                Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9931&quot;&gt;#9931:
                      &lt;em&gt;&amp;quot;flat_map::insert(ordered_unique_range_t...)
                      fails with move_iterators&amp;quot;&lt;/em&gt;&lt;/a&gt; (reopened).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11076&quot;&gt;#11076:
                      &lt;em&gt;&amp;quot;Unqualified calls to memmove/memcpy in container/detail/copy_move_algo.hpp&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10790&quot;&gt;Trac
                      #10790 (&lt;em&gt;long long errors from container&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10808&quot;&gt;Trac
                      #10808 (&lt;em&gt;compare equal operator of vector is broken&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Source Breaking&lt;/em&gt;: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_allocator_adaptor&lt;/span&gt;&lt;/code&gt;'s
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;propagate_on_container_copy_assignment&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;propagate_on_container_move_assignment&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;propagate_on_container_swap&lt;/span&gt;&lt;/code&gt;
                are no longer &lt;code&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;integral_constant&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; types. The dependency reorganization
                needed to break with those classes to avoid MPL dependencies, and
                interoperability with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;integral_constant&lt;/span&gt;&lt;/code&gt;
                was not guaranteed. Code assumming &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;true_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;false_type&lt;/span&gt;&lt;/code&gt;
                on this will not compile. As a workaround, use the guaranteed internal
                &lt;code&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value&lt;/span&gt;&lt;/code&gt;
                constant: &lt;code&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;integral_constant&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;scoped_allocator_adaptor&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Allocator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;propagate_on_container_move_assignment&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                support for ARM/iOS (32+64 bit)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                class execution_context (C++14)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/&quot;&gt;Conversion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_pointer_downcast&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_pointer_cast&lt;/span&gt;&lt;/code&gt;
                functions were added (thanks to Boris Rasin) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10780&quot;&gt;#10780&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                All the functions now throw exceptions using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documnetation update
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/date_time/&quot;&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restored &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;to_time_t&lt;/span&gt;&lt;/code&gt;
                function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Renamed variable v_type to var_type so it longer conflicts with an
                AIX system variable.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documnetation fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/flyweight/&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added hash support both with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hash&lt;/span&gt;&lt;/code&gt;
                and &lt;a href=&quot;http://www.boost.org/doc/html/hash.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hash&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
                This can be optionally &lt;a href=&quot;http://www.boost.org/libs/flyweight/doc/reference/flyweight.html#disable_hash_support&quot;&gt;disabled&lt;/a&gt;
                to avoid clashes with legacy code where this support has already
                been defined by the user.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/function/&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for functions accepting C++11 rvalues and Boost.Move
                rvalues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10585&quot;&gt;#10585&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/factory/&quot;&gt;Functional/Factory&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minor breaking change: the default template parameter to indicate
                that it shouldn't use an allocator is now &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/code&gt;,
                instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none_t&lt;/span&gt;&lt;/code&gt;.
                For details, see the &lt;a href=&quot;http://www.boost.org/libs/functional/factory/doc/html/#boost_functional_factory.changes&quot;&gt;changelog&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Automatic hash creation function (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/12&quot;&gt;Github
                PR #12&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New ADAPT_STRUCT, ADAPT_ADT, ADAPT_ASSOC_ that deduce the members
                types (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9516&quot;&gt;#9516&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add convert implementation for Boost.Tuple and std::tuple.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add mpl::clear implementation for Boost.Tuple and std::tuple.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Use boost::declval instead of std::declval, (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10190&quot;&gt;#10190&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;blank&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8622&quot;&gt;#8622&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add result_of::{copy,move} (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5886&quot;&gt;#5886&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better constexpr and noexcept support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved SFINAE Friendliness of many metafunctions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10676&quot;&gt;#10676&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10443&quot;&gt;#10443&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                result_of::size::value and result_of::size::type::value are the same
                type now (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7304&quot;&gt;#7304&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                result_of::at&amp;lt;Seq, N&amp;gt;::type is now defined when sizeof of sequence
                is less than N (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6507&quot;&gt;#6507&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7651&quot;&gt;#7651&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix missing includes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8457&quot;&gt;#8457&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Many documentation fixes &amp;amp; improvements (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6090&quot;&gt;#6090&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5324&quot;&gt;#5324&lt;/a&gt;,
                &lt;a href=&quot;https://github.com/boostorg/fusion/pull/33&quot;&gt;GitHub PR
                #33&lt;/a&gt;, &lt;a href=&quot;https://github.com/boostorg/fusion/pull/53&quot;&gt;GitHub
                PR #53&lt;/a&gt;, &lt;a href=&quot;https://github.com/boostorg/fusion/pull/56&quot;&gt;GitHub
                PR #56&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm num_segments, returning the number of segments
                      of a geometry
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New overload for is_valid algorithm, that takes a string reference
                      as a second argument and fills it with a message related to
                      the validity or invalidity of the geometry
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New overload for is_valid algorithm, that takes an enum reference
                      as a second argument and fills it with a value related to the
                      validity or invalidity of the geometry
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Disjoint and intersects support the following geometry combinations:
                      point/multipoint, multipoint/multipoint, multipoint/segment,
                      multipoint/box
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Improvements:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Buffer now supports flat-ends for linestrings with a bend close
                      to the start (such that buffered segment crosses flat-end).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Buffer performance is improved significantly
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Partition performance is improved significantly for polygons,
                      potentially enhancing all overlay operations
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8379&quot;&gt;#8379&lt;/a&gt;
                      Invalid comparison of the result of determinant
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10108&quot;&gt;#10108&lt;/a&gt;
                      Error in overlay operations in specific cases where geometries
                      touch at one point
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10201&quot;&gt;#10201&lt;/a&gt;
                      Suggestion to use different function to compare coordinates
                      [wontfix]
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10467&quot;&gt;#10467&lt;/a&gt;
                      Template parameter name coliding with B0 macro name defined
                      in termios.h
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10640&quot;&gt;#10640&lt;/a&gt;
                      Invalid result of buffer() for CCW Polygons.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10666&quot;&gt;#10666&lt;/a&gt;
                      MSVC compiler warning C4127: conditional expression is constant
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10747&quot;&gt;#10747&lt;/a&gt;
                      Error in rescaling causing errors in areal/areal set operations
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10770&quot;&gt;#10770&lt;/a&gt;
                      Buffer fails for large distances, or rough round joins, where
                      concavities where not intersected properly
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10658&quot;&gt;#10658&lt;/a&gt;
                      sym_difference yields bad result for int polygons
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10835&quot;&gt;#10835&lt;/a&gt;
                      Difference of multilinestring and polygon yields wrong result
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10861&quot;&gt;#10861&lt;/a&gt;
                      Rtree failing to compile for Value being a pair or a tuple
                      containing pointer to Geometry and the default equal_to&amp;lt;&amp;gt;
                      used
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10863&quot;&gt;#10863&lt;/a&gt;
                      Template parameter name coliding with B0 macro name defined
                      in termios.h (duplicate of 10467)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10887&quot;&gt;#10887&lt;/a&gt;
                      Invalid result of within() and relate() for Linear/MultiPolygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10890&quot;&gt;#10890&lt;/a&gt;
                      Invalid result of disjoint() for Point/Segment.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10904&quot;&gt;#10904&lt;/a&gt;
                      Invalid calculation of most significant Dimension of a segment
                      in relate_cartesian_segments strategy
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10912&quot;&gt;#10912&lt;/a&gt;
                      Invalid result of within() and relate() for Areal/Areal
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10951&quot;&gt;#10951&lt;/a&gt;
                      Tests failing on windows with intel compiler due to lack of
                      /bigobj flag.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10957&quot;&gt;#10957&lt;/a&gt;
                      Assertion failure and invalid results of various relational
                      operations.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10958&quot;&gt;#10958&lt;/a&gt;
                      Invalid results of disjoint() L/L and L/A.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10959&quot;&gt;#10959&lt;/a&gt;
                      Assertion failure in get_turns() used with no_rescale_policy.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10960&quot;&gt;#10960&lt;/a&gt;
                      Invalid result of get_turns() for L/A, missing turn.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10961&quot;&gt;#10961&lt;/a&gt;
                      Invalid result of get_turns() for L/A, invalid turn for a Linear
                      spike.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11112&quot;&gt;#11112&lt;/a&gt;
                      Compilation failure on Solaris due to a CS name clash (used
                      for a macro on this platform)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11121&quot;&gt;#11121&lt;/a&gt;
                      Invalid result of difference() for integral coordinates
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in multipoint/polygon multipoint/multipolygon distance
                      computation (wrong detection of points inside the areal geometry)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in flatten_iterator's assignment operator causing an access
                      violation
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in Cartesian segment-segment intersection strategy when
                      one segment degenerates to a point and is collinear to the
                      other non-degenerate segment
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in centroid(), non-deterministic result if calculated for
                      e.g. a Polygon with zero-area.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for joins with a limited number of points
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for round joins with limited number of points
                      around sharp corners
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for joins with large buffer distances
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for round ends with an odd number of points
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for flat ends with large buffer distances
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for interior rings with large negative buffer
                      distances
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in closing_iterator not working properly when the input
                      range is empty
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in is_simple, not handling properly closed simple linestrings
                      within multilinestrings
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in rtree constructors taking a pair of Iterators or a Range
                      (packing algorithm), the use of reference to destroyed temporary
                      when Iterator's reference is not true reference, e.g. for some
                      of the Range Adaptors. It also affects distance() and comparable_distance().
                      This bug may cause unexpected behavior of the rtree or distance()
                      algorithm, e.g. an assertion failure or a SEGFAULT.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in rtree count() member function, the use of reference
                      to destroyed temporary when object of type convertible but
                      not the same as value_type or indexable_type is passed. If
                      this happens, wrong result may be returned, in most cases 0.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bugs related to the handling of Ranges, preventing compilation
                      of Geometries using non-Container Ranges in some algorithms
                      (thanks to Samuel Debionne)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed strict aliasing violation (&lt;a href=&quot;https://github.com/boostorg/functional/pull/3&quot;&gt;GitHub
                #3&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced some compile-time dependencies. Updated to Boost.Container
                changes.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/13&quot;&gt;GitHub
                      Pull #13 (&lt;em&gt;&amp;quot;haiku: we don't have XSI shared memory,
                      so don't try to use it&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced compile-time dependencies, headers, and the use of Boost.Preprocessor,
                specially for hooks and iterators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6720&quot;&gt;Boost
                      Trac #6720: &lt;em&gt;intrusive::unordered_set::clear_and_dispose
                      does not compile on VC11 Beta when passed a stateless lambda&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10771&quot;&gt;Boost
                      Trac #10771: &lt;em&gt;remove_if is broken for slist&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10853&quot;&gt;Boost
                      Trac #10853: &lt;em&gt;problem with detection of const_cast_from&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10987&quot;&gt;Boost
                      Trac #10987: &lt;em&gt;bug in any_xxx_node_traits, returning
                      by reference&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Now std::stream is used for conversions to float numbers &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5660&quot;&gt;#5660&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6975&quot;&gt;#6975&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10639&quot;&gt;#10639&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed thread id formatting.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed process id formatting. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10926&quot;&gt;#10926&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed build failure on GNU Hurd.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed incorrect behavior of text file sink backend in case
                      if free space on the file system gets exhausted. The sink will
                      no longer create lots of empty files in attempt to recover.
                      (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11016&quot;&gt;#11016&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed incorrect behavior of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_set&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; in some cases. The inserted
                      elements could have made some previously inserted elements
                      not findable. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11106&quot;&gt;#11106&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed incorrect behavior of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value_set&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; if a large number of attribute
                      values are inserted into the set. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11148&quot;&gt;#11148&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href=&quot;http://www.boost.org/libs/log/doc/html/log/changelog.html&quot;&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added two new special functions - trigamma and polygamma.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Large update to the Elliptic integral code to use Carlson's latest
                algorithms - these should be more stable, more accurate and slightly
                faster than before. Also added support for Carlson's RG integral.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added ellint_d, jacobi_zeta and heuman_lambda elliptic integrals.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed namespace scope constants so they are constexpr on conforming
                compilers, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10901&quot;&gt;#10901&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various cases of spurious under/overflow in the incomplete
                beta and gamma functions, plus the elliptic integrals, with thanks
                to Rocco Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix 3-arg legendre_p and legendre_q functions to not call the policy
                based overload if the final argument is not actually a policy.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cleaned up some dead code in the incomplete beta function, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10985&quot;&gt;#10985&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed extreme-value pdf for large valued inputs, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10938&quot;&gt;#10938&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Switched documentation to use SVG rather than PNG graphs and equations
                - browsers seem to have finally caught up!
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_MOVE_BASE&lt;/span&gt;&lt;/code&gt;
                utility.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adl_move_swap&lt;/span&gt;&lt;/code&gt;
                utility.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced dependencies on other Boost libraries to make the library
                a bit more lightweight.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11044&quot;&gt;Trac
                      #11044: &lt;em&gt;&amp;quot;boost::rv inherits off union, when
                      such passed as template argument&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The efficiency of lookup operations has improved in situations where
                they involve the generation of temporary values of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;key_type&lt;/span&gt;&lt;/code&gt;. Consider for instance
                the following code:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;
  &lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;identifier&quot;&gt;indexed_by&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;
    &lt;span class=&quot;identifier&quot;&gt;ordered_unique&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;multi_t&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;special&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;identifier&quot;&gt;multi_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;=...;&lt;/span&gt;
&lt;span class=&quot;identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;boost&amp;quot;&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// passed a const char*, not a std::string    &lt;/span&gt;
&lt;/pre&gt;
              &lt;div&gt;
                In previous versions of the library, the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;/code&gt;
                operation generates several temporary &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;/code&gt;s
                (one every time an internal comparison is made). In sufficiently
                advanced compilers, this is now avoided so that only one temporary
                is created.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;frexp&lt;/span&gt;&lt;/code&gt; to
                always be non-expression template generating, see: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10993&quot;&gt;10993&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved support of cpp_dec_float on Cygwin and other platforms with
                missing long double support, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10924&quot;&gt;10924&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved noexcept support and added some more tests, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10990&quot;&gt;10990&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various workarounds applied for Intel-15.0 and Solaris-12.4 compilers.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/optional/&quot;&gt;Optional&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved documentation; documented IO operations and header files.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none_t&lt;/span&gt;&lt;/code&gt; is no longer convertible
                      from literal 0. This avoids a bug where &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;rational&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;oi&lt;/span&gt;
                      &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;;&lt;/span&gt;&lt;/code&gt; would initialize an optional
                      object with no contained value.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a way to manually disable move semantics: just define
                      macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_OPTIONAL_CONFIG_NO_RVALUE_REFERENCES&lt;/span&gt;&lt;/code&gt;.
                      This can be used to work around &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10399&quot;&gt;#10399&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10825&quot;&gt;#10825&lt;/a&gt;
                      Improved the trick that prevents streaming out &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;/code&gt; without header
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional_io&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      by using safe-bool idiom.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11087&quot;&gt;#11087&lt;/a&gt;
                      It is no longer possible to assign &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;/code&gt;
                      is not assignable or convertible to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10839&quot;&gt;#10839&lt;/a&gt;
                      Value accessors now work correctly on rvalues of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/phoenix/&quot;&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Version 3.2.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Phoenix now has a &lt;em&gt;lazy list&lt;/em&gt; implementation
                      as an optional extension.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Example:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      A new example &lt;em&gt;bind_goose&lt;/em&gt; shows the compatibility
                      between &lt;em&gt;boost bind&lt;/em&gt; and &lt;em&gt;boost
                      phoenix bind&lt;/em&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10927&quot;&gt;#10927&lt;/a&gt;
                      Missing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;/code&gt; qualifier for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fabs&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;phoenix&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stdlib&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cmath&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cpp&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11085&quot;&gt;#11085&lt;/a&gt;
                      Missing qualifier for pow call in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;phoenix&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function_tests&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cpp&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixes for a number of cases failing with &lt;em&gt;bind&lt;/em&gt;,
                      &lt;em&gt;lambda&lt;/em&gt; and &lt;em&gt;let&lt;/em&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/predef/&quot;&gt;Predef&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Version 1.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Visual Studio 2015 detection.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added detection of Haiku OS.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix Android endian detection.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;predef_check&lt;/span&gt;&lt;/code&gt;
                program and BBv2 integration for build configuration checks.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/random/&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added non_central_chi_squared_distribution.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Version&lt;/em&gt; 4.5.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Experimental Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9600&quot;&gt;#9600&lt;/a&gt;
                      Async: Add task_region
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10611&quot;&gt;#10611&lt;/a&gt;
                      Add emplace promise::set_value and emplace make_ready_future
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10826&quot;&gt;#10826&lt;/a&gt;
                      Add scheduled executor operations
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11048&quot;&gt;#11048&lt;/a&gt;
                      Add a serial_executor based on continuations
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6787&quot;&gt;#6787&lt;/a&gt;
                      boost::thread::sleep() hangs if system time is rolled back
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10734&quot;&gt;#10734&lt;/a&gt;
                      Submit method work differently on different executors, some
                      throw exception and some silently ignore error (thread_executor
                      and inline_executor)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10736&quot;&gt;#10736&lt;/a&gt;
                      Task exceptions silently ignored. I think std::terminate solution
                      from N3785 and std::thread is better choice and more consistent.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10737&quot;&gt;#10737&lt;/a&gt;
                      In serial_executor we have infinite wait if task throw exception.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10822&quot;&gt;#10822&lt;/a&gt;
                      Boost.Thread fails to compile on Android
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10824&quot;&gt;#10824&lt;/a&gt;
                      Boost.Thread 1.57 breaks Windows XP compatibility for SP2 and
                      below.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10963&quot;&gt;#10963&lt;/a&gt;
                      future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::then Has No Implementation
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10964&quot;&gt;#10964&lt;/a&gt;
                      future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::unwrap().then() Deadlocks
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10968&quot;&gt;#10968&lt;/a&gt;
                      The futures returned by async() and future::then() are not
                      blocking.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10971&quot;&gt;#10971&lt;/a&gt;
                      shared_future::get()/get_or() must be const
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10972&quot;&gt;#10972&lt;/a&gt;
                      shared_future::then() can be called multiple times.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10979&quot;&gt;#10979&lt;/a&gt;
                      Support T&amp;amp; type deduction when the make_ready_future parameter
                      is reference_wrapper&amp;lt;T&amp;gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10996&quot;&gt;#10996&lt;/a&gt;
                      Thread physical_concurrency() is failing on Windows
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11035&quot;&gt;#11035&lt;/a&gt;
                      BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE not defined for Android
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11053&quot;&gt;#11053&lt;/a&gt;
                      The attached code results in a R6025 - pure virtual function
                      call in run_thread_exit_callbacks
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_erasure/&quot;&gt;TypeErasure&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with MSVC 12.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_index/&quot;&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Link time assertions added on platforms that support it
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/units&quot;&gt;Units&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix for base units with arbitrary dimensions.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix move assignment with stateful, propagate_on_container_move_assign
                allocators (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10777&quot;&gt;#10777&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix potential overflow when calculating number of buckets to allocate
                (&lt;a href=&quot;https://github.com/boostorg/unordered/pull/4&quot;&gt;GitHub
                #4&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Other minor changes, see &lt;a href=&quot;http://www.boost.org/doc/html/unordered/changes.html&quot;&gt;changelog&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change:&lt;/strong&gt; Compile time checked
                getter is now used by default in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;VariantT&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_get&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;VariantT&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;. New getter asserts that type &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;/code&gt; is one of the types that can
                be stored in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;VariantT&lt;/span&gt;&lt;/code&gt;.
                Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT&lt;/span&gt;&lt;/code&gt;
                to change default behavior. See &lt;a href=&quot;http://www.boost.org/doc/html/variant/reference.html#header.boost.variant.get_hpp&quot;&gt;get.hpp&lt;/a&gt;
                and &lt;a href=&quot;http://www.boost.org/doc/html/variant/reference.html#header.boost.variant.polymorphic_get_hpp&quot;&gt;polymorphic_get.hpp&lt;/a&gt;
                descriptions for more info &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/547&quot;&gt;#547&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing comparison operators to variant &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8620&quot;&gt;#8620&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10811&quot;&gt;#10811&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multiple documentations fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10273&quot;&gt;#10273&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10653&quot;&gt;#10653&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Variadic templats enabled on Clang &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10832&quot;&gt;#10832&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Autodetection of return types for visitors in C++14, which makes
                it possible to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;apply_visitor&lt;/span&gt;&lt;/code&gt;
                with generic lambdas &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10837&quot;&gt;#10837&lt;/a&gt;:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;apply_visitor&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;special&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;special&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;identifier&quot;&gt;variant_instance&lt;/span&gt;
&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved swap functions &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10882&quot;&gt;#10882&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Many improvements to variadic templates, even more methods support
                variadics.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multiple bugfixes and testing improvements including Coveralls integration
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_58_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5, 3.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.8.1, 4.8.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7, 4.8.4, 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2, 3.3, 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5, 3.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.9.2, 5.0.0 (experimental)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7, 4.8.4, 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.7, 4.5.4, 4.6.4, 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Android
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4, 3.5
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8, 4.9
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_58_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item>
  </channel>
</rss>
