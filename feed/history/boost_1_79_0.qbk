[article Version 1.79.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* /TODO/

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/assert/ Assert]:]
  * `source_location().file_name()` and `source_location().function_name()`
    now return `""` instead of `"(unknown)"`.
  * Added a `source_location` constructor from `std::source_location`.
  * Changed `BOOST_CURRENT_LOCATION` to more closely match the behavior of
    `std::source_location::current()`, such as being usable at top level or
    as a default function argument.

* [phrase library..[@/libs/atomic/ Atomic]:]
  * Fixed compilation for Universal Windows Platform (UWP). ([github atomic 54])
  * Added `BOOST_ATOMIC_NO_DARWIN_ULOCK` configuration macro. The macro affects compilation on Darwin systems and disables `ulock`-based implementation of waiting and notifying operations. This may be useful to comply with Apple App Store requirements. ([github atomic 55])

* [phrase library..[@/libs/beast/ Beast]:]
  * Added missing include for file_body test.
  * Fixed WebSocket handshake response on failure.
  * Fixed open append mode for `file_posix` and `file_win32`.
  * Fixed file open with append/append_existing flag on Windows
  * Fixed clang-cl UTF8 path handling for `file_win32` and `file_stdio`.
  * Added ARM64 builds to drone CI.
  * Fixed async_base documentation link.
  * Added tests for file open in append/append_existing mode.
  * Updated CI to include gcc 11, clang 12, msvc 14.3.
  * Added individual tests to CMake workflow.
  * We'd love to know how you or your company use Beast, consider adding an
    entry to the
    [@https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast Companies and Individuals Using Beast]
    list.
  * See the full
    [@/libs/beast/doc/html/beast/release_notes.html Release Notes]
    for a complete list of changes.

* [phrase library..[@/libs/core/ Core]:]
  * Made `boost::pointer_traits` SFINAE friendly, addressing LWG3545. (Glen
    Fernandes)
  * Added `boost::allocator_traits` that uses the individual allocator access
    traits. This implementation supports C++03 and above. (Glen Fernandes)
  * Updated the allocator access traits to support most of the C++11 allocator
    model in C++03. (Glen Fernandes)
  * `boost/iterator.hpp` is deprecated and will be removed in a future release.
    The header defines `boost::iterator` template, which is equivalent to
    `std::iterator` in `<iterator>` header. However, since `std::iterator` is
    itself deprecated in C++17, users are advised to remove `boost::iterator`
    or `std::iterator` use from their code.
  * Added `boost::core::verbose_terminate_handler`, a utility function intended
    to be passed to `std::set_terminate` that prints information about the
    uncaught exception to `stderr`.

* [phrase library..[@/libs/describe/ Describe]:]
  * Enabled unions in `BOOST_DESCRIBE_STRUCT` and updated examples to check `std::is_union<T>`.
  * Added example of defining a `fmtlib` class formatter.
  * Added example of defining a `fmtlib` enum formatter.
  * Added example of printing pointers to members.

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * [*v3:] `path::replace_extension` now works in terms of [*v3] definition of `path::extension` rather than [*v4].
  * Fixed compilation of path appending and concatenation operators with arguments of types convertible to `path` or compatible string type. ([github filesystem 223])
  * On POSIX systems that support `fdopendir` and `O_NOFOLLOW` and on Windows, `remove_all` is now protected against [@https://www.cve.org/CVERecord?id=CVE-2022-21658 CVE-2022-21658]. The vulnerability is a race condition that allows a third party process to replace a directory that is being concurrently processed by `remove_all` with a directory symlink and cause `remove_all` to follow the symlink and remove files in the linked directory instead of removing the symlink itself. ([github filesystem 224])
  * On Windows, in `remove` and `remove_all` implementation, use POSIX semantics for file removal, when supported by the OS (Windows 10 1709 and later). When POSIX semantics is supported, the file name is removed from the filesystem namespace as soon as the file is marked for deletion, even if it is still open and in use. With legacy Windows semantics, the file name remains present in the the filesystem namespace until the last file handle to the file is closed, which allows the file marked for deletion to be opened and prevents creating new files with the same name. ([github filesystem 216])
  * On Windows, `remove` and `remove_all` now support deleting read-only directories. Support for removing read-only non-directory files was added previously.
  * On Windows, `directory_iterator` internal implementation has been reworked to better utilize modern Windows APIs, which may improve performance while handling symlinks.
  * On Windows, initialize internal WinAPI function pointers early, if possible, to allow Boost.Filesystem operations to be invoked in global constructors. This is only supported on MSVC, GCC, Clang and compatible compilers.
  * On Windows, `resize_file` should no longer fail with an error if the file to be resized is opened.
  * Disabled use of the `statx` syscall on Android prior to 11.0 (API version 30). The syscall is blacklisted by seccomp and causes process termination in runtime. ([github filesystem 229])
  * [*Deprecated:] `boost/filesystem/string_file.hpp` header is deprecated and will be removed in a future release. The header is no longer included by `boost/filesystem.hpp` by default. Users are advised to implement the functionality themselves or migrate to other implementations.
  * [*Deprecated:] Windows CE support is deprecated and will be removed in a future release. Windows CE has been untested for many years and is likely non-functional.

* [phrase library..[@/libs/geometry/ Geometry]:]
  * Major change
    * [github_pr geometry 977] Rescaling is turned off by default. This avoids many related bugs in set operations and buffer.
  * Improvements
    * [github_pr geometry 961] Added Web Mercator projection.
    * [github_pr geometry 966] More efficient cartesian distance strategy used in simplify.
  * Solved issues
    * [github geometry 956] Result of simplify algorithm with incorrect closure.
    * [github geometry 962] Runtime error in R-tree deserialization due to load factor.
    * [github geometry 971] R-tree insertion time impacted by use of long double on ARM platforms.
  * Bugfixes
    * [github_pr geometry 936] Envelope of polygon containing pole.
    * [github_pr geometry 948] Spherical and geographic envelope for near meridian segments.
    * [github_pr geometry 974] Spheroidal normalization utilities for NaN coordinates.
    * Various fixes in set operations and buffer.

* [phrase library..[@/libs/integer/ Integer]:]
  * Optimized `integer_log2` implementation to use bit operations internally. This allows to employ bit instructions available on most modern CPUs. ([github integer 31])

* [phrase library..[@/libs/io/ IO]:]
  * Added `boost::io::basic_nullbuf`, a null stream buffer, and
    `boost::basic_onullstream`, a null output stream (Glen Fernandes).

* [phrase library..[@/libs/iterator/ Iterator]:]
  * In `counting_iterator`, added support for built-in 128-bit integer types supported by gcc and clang and compatible compilers on some target platforms.
  * Silenced gcc warnings about deprecated implicit copy assignment operator in `counting_iterator`.

* [phrase library..[@/libs/json/ JSON]:]
  * Standalone mode of the library is removed. Users who wish to continue using standalone JSON can switch to [@https://github.com/CPPAlliance/standalone-json.git the C++ Alliance fork].
  * Add `std::error_code` overloads.
  * Add `boost::source_location` to `error_codes`.
  * Add support for JSON Pointer.
  * Naturally grow string during serialization.

* [phrase library..[@/libs/log/ Log]:]
  * General changes:
    * In `text_file_backend`, added support for appending to a previously written log file, when file rotation is used and log file names use file counters.
    * [*Breaking change:] The `file_collector` interface has changed:
      * `scan_for_files` method returns a `scan_result` structure that contains information collected during the scan;
      * `is_in_storage` method added for testing if a path refers to a file within the target storage directory.
    * Added a new `invoke_manip` stream manipulator that can be used for injecting user's function into a stream output expression.
  * Bug fixes:
    * Fixed file counter being set to zero if the user calls `text_file_backend::scan_for_files` multiple times, and the second and the following calls don't find any new files. ([github log 179])
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.

* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * Improved the efficiency of `count` operations in ranked indices from
    `O(log(n) + count)` to `O(log(n))`. Contributed by Damian Sawicki.
  * Maintenance work.

* [phrase library..[@/libs/nowide/ Nowide]:]
  * Fix compilation issues on some platforms (e.g. GCC 11 on MinGW-w64 and Cygwin)
  * Fix missing include when using `BOOST_USE_WINDOWS_H` and `WIN32_LEAN_AND_MEAN`
  * Add sanity check when using `boost::nowide::stat` with `boost::nowide::stat_t`

* [phrase library..[@/libs/predef/ Predef]:]
  * Version 1.14.0
  * Add detection of LoongArch (from Zhang Na).

* [phrase library..[@/libs/smart_ptr/ Smart Pointers]:]
  * Added `boost::get_allocator_pointer` to obtain the Allocator pointer from
    the result of `boost::allocate_unique` (Glen Fernandes).

* [phrase library..[@/libs/system/ System]:]
  * Added a `boost::source_location` parameter to `throw_exception_from_error`.
  * Added `throw_exception_from_error` overloads for `errc::errc_t`,
    `std::error_code`, `std::errc`, `std::exception_ptr`.
  * `result<T>::value` now automatically supplies `BOOST_CURRENT_LOCATION` to
    `throw_exception_from_error` via a default argument.
  * Added an `errc::make_error_code` overload taking a source location.

* [phrase library..[@/libs/throw_exception/ ThrowException]:]
  * Added `boost::throw_with_location`, a more lightweight alternative of
    `BOOST_THROW_EXCEPTION` for programs that do not use Boost.Exception.

* [phrase library..[@/libs/unordered/ Unordered]:]
  * All containers have been updated to support heterogeneous `count`,
    `equal_range` and `find`.
  * All containers now implement the member function `contains`.
  * `erase_if` has been implemented for all containers.
  * All containers have been updated to support heterogeneous `erase` and
    `extract`.
  * Changed behavior of `reserve` to eagerly allocate.
  * Various warning fixes in the test suite.
  * Update code to internally use `boost::allocator_traits`.
  * Switch to Fibonacci hashing.
  * Update documentation to be written in AsciiDoc instead of QuickBook.

* [phrase library..[@/libs/variant2/ Variant2]:]
  * Added `operator<<` for `monostate`.

* [phrase library..[@/libs/wave/ Wave]:]
  * C++11 now required for building Wave itself
  * Fixed bugs:
    * [github wave 135]: Comma operators in array subscripts are deprecated in C++20
    * [github wave 137]: Simple unknown directive => found_unknown_directive is not called, stripped of pound.
    * [github wave 138]: Empty ifdef block does not emit line directive for missing whitespace
    * [github wave 143]: Parsing __has_include() fails with trailing tokens
    * [github wave 145]: Sanitizer complains about reset_version()
    * [github wave 147]: bitwise operations between different enumeration types are deprecated

* [phrase library..[@/libs/leaf/ LEAF]:]
  * Support for FreeRTOS and other embedded platforms
  * Improved diagnostic information
  * Improved configuration macros
  * BOOST_LEAF_CHECK using statement expressions under __GNUC__
  * Fixed symbol demangling bug

* [phrase library..[@/libs/qvm/ QVM]:]
  * Added constexpr under C++17
  * Improved single header distribution

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/build/ Build]:]
  * Includes release of [@/tools/build/doc/html/#_version_4_8_2 B2 version 4.8.2].

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
