[article Version 1.86.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* /TODO/

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/beast/ Beast]:]
  * API Changes
    * Added HTTP status code 418 `I'm a teapot`.
  * Fixes
    * Narrowing conversion in `read_size_hint_db()`.
    * Overloads that are ambiguous when using default completion tokens.
    * Misplaced static_assert in `http::basic_fields` move-assignment operator.
    * Underflow of `bytes_transferred` in WebSocket partial write operations.
    * `websocket::stream::read_size_hint()` does not exceed `read_message_max`.
    * Various warnings in tests.
    * Error handling in SSL shutdown operations in examples.
    * Annotate fallthrough case in zlib.
    * Handling of expired timers in `basic_stream::ops::transfer_op`.
    * Ambiguity in `test::basic_stream` constructor overloads.
    * Partial parsing of the final chunk in `http::parser`.
  * Improvements
    * Graceful shutdown in `server_flex_awaitable` example.
    * Simplified awaitable examples.
    * Added fuzzing targets.
    * Remove superfluous uses of `std::bind` in some examples.
    * `ssl_stream` does not use `flat_stream`.
  * Documentation
    * `ssl_stream` and `flat_stream` marked as deprecated.
    * `net::ssl::stream` is canonical in snippets and examples.
    * Added `SSL/TLS Shutdown Procedure` section.
  * Acknowledgements
    * tyler92, Ruslan Zakirov, Orgad Shaneh, Alexander Kernozhitsky

* [phrase library..[@/libs/compat/ Compat]:]
  * Added `bind_front.hpp`, `bind_back.hpp`, `invoke.hpp`, `mem_fn.hpp`, `integer_sequence.hpp` and `type_traits.hpp`.
  * Added `function_ref.hpp`.

* [phrase library..[@/libs/crc/ CRC]:]
  * C++03 is no longer supported; a C++11 compiler is required.
    (This includes GCC 4.6 or later, and MSVC 10.0 (VS 2010) or later.)
  * Removed dependencies on Array, Config, Integer, and TypeTraits. The
    library is now standalone.

* [phrase library..[@/libs/format/ Format]:]
  * C++03 is no longer supported; a C++11 compiler is required.
    (This includes GCC 4.7 or later, and MSVC 12.0 (VS 2013) or later.)

* [phrase library..[@/libs/function/ Function]:]
  * Removed dependency on Boost.TypeTraits.
  * Brought back the `argN_type` typedefs that were accidentally lost in 1.85.

* [phrase library..[@/libs/gil/ GIL]:]
  * Added
    * Added `tell()` and `error()` functions to `istream_device` and `ostream_device` classes ([github_pr gil 747]).
  * Changed
    * Don't ignore custom color converter in `color_converted_view` function ([github_pr gil 726]).
    * Added workaround for conflict with `min()` and `max()` macros on WinAPI ([github_pr gil 745]).
    * The use of `boost::filesystem` in GIL is now configurable in CMake via
      option `BOOST_GIL_USE_BOOST_FILESYSTEM` ([github_pr gil 743]).
  * Fixed
    * Fixed convolution in `convolve_2d` ([github_pr gil  723])
    * Normalize Gaussian 2D kernel to avoid darkening ([github_pr gil 725])
    * Wrong buffer size in path string conversion functions for `std::wstring`
      is fixed, avoiding buffer overflows when using I/O-related functions with
      `std::wstring` paths ([github_pr gil 746]).
  * Acknowledgements
    * Christoph Gringmuth, Christopher Kormanyos, nicolacandussi, Dirk Stolle, Olzhas Zhumabek

* [phrase library..[@/libs/graph/ Graph]:]
  * _Major_ update: C++14 is the new minimum standard; this was partly dictated by dependencies (at least to C++11) and partly by choice. If you require support for an older standard, please contact the maintainer.
  * Remove direct dependency on Boost.Regex.
  * Fix several compilation errors caused by not explicitly including common headers.
  * `isomorphism`: Fix docs, ignore `vertex_max_invariant` parameter in favour of cheaply calculating upper exclusive bound, fix bug with Associative Property Map, improve space efficiency from linear in the size of the maximum invariant to linear in the size of g1.
  * `boykov_kolmogorov_max_flow`: Fix named parameter overload.
  * `adj_list_edge_iterator`: Fix maybe-uninitialized warnings.
  * `hawick_circuits`: Add a parameter to optionally limit the depth of the search, causing a potentially suboptimal answer to be returned early.
  * `disjoint_sets`: Improve performance of `link_sets` by removing redundant lookup of set representatives.
  * `maximum_adjacency_search`: Refactor and more tests.
  * `property`: Use `BOOST_ATTRIBUTE_NO_UNIQUE_ADDRESS` to remove wasted space.
  * `labeled_graph`: Fix `remove_labeled_vertex` so that it actually removes the label too.
  * `r_c_shortest_paths`: Fix bug that the single-solution variant did not always return the shortest path.
  * `read_graphviz`: Fix stack overflow (oss-fuzz issue 66719) and non-keyword subgraph parsing.
  * Many miscellaneous improvements: broken links, typos, etc.

* [phrase library..[@/libs/lexical_cast/ LexicalCast]:]
  * Fixed conversion of `std::basic_string_view` and `boost::basic_string_view`
    containing one or more `\0` characters. Issue was introduced in 1.85.0.

* [phrase library..[@/libs/locale/ Locale]:]
  * Add support for custom allocators in `conv::utf_to_utf`
  * Don't build examples by default

* [phrase library..[@/libs/stacktrace/ Stacktrace]:]
  * [*Big new feature: stacktrace from arbitrary exception for Windows].
    `std::stacktrace::from_current_exception()` now works on Windows platform.
    Many thanks to [@https://github.com/huangqinjin huangqinjin] for the
    implementation [github_pr stacktrace 159]
    Now on POSIX and Windows the `from_current_exception() ` function
    returns the stacktrace of the current exception object as if the stacktrace
    was captured at the point of throwing the exception.
  * Fixed inclusion of rarely used Windows SDK headers which can cause
    conflict with other code using Windows SDK. Thanks to
    [@https://github.com/mabrarov Marat Abrarov] for fixing the issue
    [github_pr stacktrace 157].
  * Build option `boost.stacktrace.from_exception` now properly works
    on MacOS. Thanks to [@https://github.com/pdimov Peter Dimov] for the fix
    [github_pr stacktrace 166].
  * Fixed a typo in assert expression. Thanks to [@https://github.com/Ukilele Kilian Henneberger]
    for the bug report [github stacktrace 164].
  * Fixed shadowing warnings. Thanks to [@https://github.com/nigels-com Nigel Stewart]
    for the bug report [github stacktrace 141].
  * Added `dladdr` minimal support for AIX. Many thanks to Cl√©ment Chigot
    for the implementation [github_pr stacktrace 114].
  * Added `Boost::stacktrace` CMake alias that refers to the best supported
    implementation of Boost.Stacktrace on the platform. Thanks to [@https://github.com/leha-bot Alex]
    for the feature [github_pr stacktrace 167].
  * Significant improvement of CMake: multiple fixes, added many new tests,
    improved CI. Many thanks to [@https://github.com/pdimov Peter Dimov] for all the improvements.
  * Fix addr2line work when the process is looked up via `PATH`. Thanks to
    [@https://github.com/Schreischildkroete Schreischildkroete] for the bug report and to
    [@https://github.com/j-jr-richter Jens Richter] for fix [github stacktrace 72].

* [phrase library..[@/libs/uuid/ UUID]:]
  * _Major_ update.
  * C++03 is no longer supported, a C++11 compiler is required.
    (This includes GCC 4.8 or later, MSVC 14.0 (VS 2015) or later, and MinGW-w64.)
  * Decreased number of Boost dependencies from 39 (in total) to just 5.
  * Updated to reflect the newer [@https://datatracker.ietf.org/doc/rfc9562/ RFC 9562].
  * Added generators for time-based UUIDs.
  * _Many_ other improvements, see the [@/libs/uuid/doc/html/uuid.html#changes revision history].

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
