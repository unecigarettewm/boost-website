[article Version 1.55.0
    [quickbook 1.5]
    [source-mode c++]
    [purpose New Libraries: Updated Libraries: MultiIndex]
    [authors [Dawes, Beman]]
    [last-revision ]
]

[include ext.qbk]

[/

As the release progresses add the 'status' and 'download' elements to
indicate the release status:

Beta status:
[status beta]
[download http://sourceforge.net/projects/boost/files/boost/1.55.0.beta.x/]
[documentation /doc/libs/1_55_0_betax/]

Release status:
[status released]
[download http://sourceforge.net/projects/boost/files/boost/1.55.0/]
[documentation /doc/libs/1_55.0/]

]

[/
    When adding libraries:

    1. Libraries are listed in alphabetical order.
    2. Besides the dedicated entry, the lib name should be added to the
       [purpose] section at the beginning of the page.

    Example new libraries message:

* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.

    Example update message:

* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Fixed missing move semantics on managed memory classes.
  * Added copy_on_write and open_read_only options for shared memory
    and mapped file managed classes.
  * `shared_ptr` is movable and supports aliasing.
]

[section New Libraries]

* /TODO/

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/multi_index/index.html Multi-index Containers]:]
  * Boost.MultiIndex has been brought to a higher level of compliance with C++11. 
    * `multi_index_container` is now efficiently movable.
    * Initializer lists supported.
    * Emplace functions provided.
    * Non-copyable elements (such as `std::unique_ptr<T>`) supported. This includes
      insertion of a range [`first`,`last`) where the iterators point to a type that
      is convertible to that of the element: no copy construction happens in the
      process.
    * Random access indices provide `shrink_to_fit()`.
    Refer to the [@/libs/multi_index/doc/compiler_specifics.html compiler specifics]
    section for limitations on pre-C++11 compilers. 
  * The following classes are deprecated:
    * [@/libs/multi_index/doc/reference/key_extraction.html#member_offset `member_offset`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit `const_mem_fun_explicit`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit `mem_fun_explicit`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_equal_to `composite_key_result_equal_to`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_less `composite_key_result_less`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_greater `composite_key_result_greater`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_hash `composite_key_result_hash`].
  * Maintenance fixes.

[/

* /TODO/: [phrase library..[@/libs/spirit/ Spirit]:]
  * Spirit Vx.x, see the
    '[@/doc/libs/1_xx_x/libs/spirit/doc/html/spirit/what_s_new/spirit_x_x.html What's New]'
    section for details.

* /TODO/: [phrase library..[@/libs/wave/ Wave]:]
  * See the [@/libs/wave/ChangeLog Changelog] for details.

]

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]

