[article Version 1.53.0
    [quickbook 1.5]
    [source-mode c++]
    [purpose New Libraries: Updated Libraries: ]
    [authors [Dawes, Beman]]
    [last-revision ]
]

[include ext.qbk]

[section New Libraries]

* [phrase library..[@/libs/atomic/ Atomic]:]
  C++11-style `atomic<>`, from Helge Bahmann, maintained by Tim Blechmann.
* [phrase library..[@/libs/coroutine/ Coroutine]:]
  Coroutine library, from Oliver Kowalke.
* [phrase library..[@/libs/lockfree/ Lockfree]:]
  Lockfree data structures, from Tim Blechmann.
* [phrase library..[@/libs/multiprecision/ Multiprecision]:]
  Extended precision arithmetic types for floating point, integer and
  rational arithmetic from John Maddock and Christopher Kormanyos.
* [phrase library..[@/libs/numeric/odeint/ Odeint]:]
  Solving ordinary differential equations, from Karsten Ahnert and Mario
  Mulansky.

[endsect]

[section Updated Libraries]


* [phrase library..[@/libs/container/ Container]:]
  *  Fixed bug [@https://svn.boost.org/trac/boost/ticket/7650 #7650].
  *  Improved `vector`'s insertion performance.
  *  Changed again experimental multiallocation interface for better performance (still experimental).
  *  Added no exception support for those willing to disable exceptions in their compilers.
  *  Fixed GCC -Wshadow warnings.
  *  Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.

* [phrase library..[@/libs/context/ Context]:]
  * Support for iOS on ARM and MacOS X on x86 (32bit) added.
  * Support for SEH Overwrite Protection on Win32.

* [phrase library..[@/libs/graph/ Graph]:]
  * Fixed the following bugs from Trac: [ticket 3468], [ticket 4386],
    [ticket 5269], [ticket 7428], [ticket 7457], [ticket 7467],
    [ticket 7600], [ticket 7648], [ticket 7684], [ticket 7728],
    [ticket 7741], [ticket 7766], [ticket 7771], [ticket 7773],
    [ticket 7780], [ticket 7787], plus other bugs not in Trac.
  * Added support for reading from GraphML files containing multiple
    graphs.
  * Added versions of A* search specifically for trees, removing the
    need for a color map when it is acceptable to visit the same vertex
    multiple times.
  * Added VF2 subgraph isomorphism algorithm (contributed by Flavio De
    Lorenzi).

* [phrase library..[@/libs/functional/hash/ Hash]:]
  * Add support for `boost::int128_type` and `boost::uint128_type` where
    available.
  * On platforms that are known to have standard floating point functions,
    don't use the automatic detection ([ticket 7221], [ticket 7470]).

* [phrase library..[@/libs/interprocess/ Interprocess]:]
  *  Fixed GCC -Wshadow warnings.
  *  Experimental multiple allocation interface improved and changed again. Still unstable.
  *  Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
  *  [*ABI breaking]: changed node pool allocators internals for improved efficiency.
  *  Fixed bug [@https://svn.boost.org/trac/boost/ticket/7795 #7795].
  
* [phrase library..[@/libs/intrusive/ Intrusive]:]
  *  Fixed bugs
     [@https://svn.boost.org/trac/boost/ticket/7174 #7174],
     [@https://svn.boost.org/trac/boost/ticket/7529 #7529],
     [@https://svn.boost.org/trac/boost/ticket/7815 #7815].
  *  Fixed GCC -Wshadow warnings.
  *  Added missing `explicit` keyword in several intrusive container constructors.
  *  Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
  *  Small documentation fixes.
  
* [phrase library..[@/libs/move/ Move]:]
  *  Better header segregation (bug
    [@https://svn.boost.org/trac/boost/ticket/6524 #6524]).
  *  Small documentation fixes
  *  Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
  *  Fixed [@https://svn.boost.org/trac/boost/ticket/7830 #7830],
           [@https://svn.boost.org/trac/boost/ticket/7832 #7832].

* [phrase library..[@/libs/ratio/ Ratio]:]
  * [*Fixes:]
    * [@https://svn.boost.org/trac/boost/ticket/7616 #7616] br_mul::nan - warning C4293: '<<' : shift count negative or too big, undefined behavior`.

* [phrase library..[@/libs/thread/ Thread]:]
  * [*Breaking changes:]
    * BOOST_THREAD_VERSION==3 by default since Boost 1.53. So that all the deprecated features since 1.50 are not included by default. You can change this by setting the appropriated define (see Configuration section).

  * [*Deprecated features:]
    * Deprecated features since boost 1.53 will be available only until boost 1.58.
    * C++11 compliance: packaged_task<R> is deprecated, use instead packaged_task<R()>.
    * [@https://svn.boost.org/trac/boost/ticket/7537 #7537] deprecate Mutex::scoped_lock and scoped_try_lock and boost::condition

  * [*New Features:]
    * [@https://svn.boost.org/trac/boost/ticket/6270 #6270] C++11 compliance: Add thread constructor from movable callable and movable arguments
    * [@https://svn.boost.org/trac/boost/ticket/7279 #7279] C++11 compliance: Add noexcept in system related functions
    * [@https://svn.boost.org/trac/boost/ticket/7280 #7280] C++11 compliance: Add promise::...at_thread_exit functions
    * [@https://svn.boost.org/trac/boost/ticket/7281 #7281] C++11 compliance: Add ArgTypes to packaged_task template.
    * [@https://svn.boost.org/trac/boost/ticket/7282 #7282] C++11 compliance: Add packaged_task::make_ready_at_thread_exit function
    * [@https://svn.boost.org/trac/boost/ticket/7412 #7412] C++11 compliance: Add async from movable callable and movable arguments
    * [@https://svn.boost.org/trac/boost/ticket/7413 #7413] C++11 compliance: Add async when the launch policy is deferred.
    * [@https://svn.boost.org/trac/boost/ticket/7414 #7414] C++11 compliance: future::get post-condition should be valid()==false.
    * [@https://svn.boost.org/trac/boost/ticket/7422 #7422] Provide a condition variable with zero-overhead performance penality.
    * [@https://svn.boost.org/trac/boost/ticket/7444 #7444] Async: Add make_future/make_shared_future.
    * [@https://svn.boost.org/trac/boost/ticket/7540 #7540] Threads: Add a helper class that join a thread on destruction.
    * [@https://svn.boost.org/trac/boost/ticket/7541 #7541] Threads: Add a thread wrapper class that joins on destruction.
    * [@https://svn.boost.org/trac/boost/ticket/7575 #7575] C++11 compliance: A future created by async should "join" in the destructor.
    * [@https://svn.boost.org/trac/boost/ticket/7587 #7587] Synchro: Add strict_lock and nested_strict_lock.
    * [@https://svn.boost.org/trac/boost/ticket/7588 #7588] Synchro: Split the locks.hpp in several files to limit dependencies.
    * [@https://svn.boost.org/trac/boost/ticket/7590 #7590] Synchro: Add lockable concept checkers based on Boost.ConceptCheck.
    * [@https://svn.boost.org/trac/boost/ticket/7591 #7591] Add lockable traits that can be used with enable_if.
    * [@https://svn.boost.org/trac/boost/ticket/7592 #7592] Synchro: Add a null_mutex that is a no-op and that is a model of UpgardeLockable.
    * [@https://svn.boost.org/trac/boost/ticket/7593 #7593] Synchro: Add a externally_locked class.
    * [@https://svn.boost.org/trac/boost/ticket/7590 #7594] Threads: Allow to disable thread interruptions.

  * [*Fixed Bugs:]
    * [@https://svn.boost.org/trac/boost/ticket/7657 #7657] Serious performance and memory consumption hit if condition_variable methods condition notify_one or notify_all is used repeatedly.
    * [@https://svn.boost.org/trac/boost/ticket/7665 #7665] this_thread::sleep_for no longer uses steady_clock in thread.
    * [@https://svn.boost.org/trac/boost/ticket/7668 #7668] thread_group::join_all() should check whether its threads are joinable.
    * [@https://svn.boost.org/trac/boost/ticket/7669 #7669] thread_group::join_all() should catch resource_deadlock_would_occur.
    * [@https://svn.boost.org/trac/boost/ticket/7672 #7672] lockable_traits.hpp syntax error: "defined" token misspelled.
    * [@https://svn.boost.org/trac/boost/ticket/7798 #7798] boost::future set_wait_callback thread safety issues.
    * [@https://svn.boost.org/trac/boost/ticket/7808 #7808] Incorrect description of effects for this_thread::sleep_for and this_thread::sleep_until.
    * [@https://svn.boost.org/trac/boost/ticket/7812 #7812] Returns: cv_status::no_timeout if the call is returning because the time period specified by rel_time has elapsed, cv_status::timeout otherwise.

* [phrase library..[@/libs/unordered/ Unordered]:]
  * Remove support for the old pre-standard variadic pair constructors, and
    equality implementation. Both have been deprecated since Boost 1.48.
  * More internal implementation changes, including a much simpler
    implementation of `erase`, and removed more deprecated config macros.

* [phrase library..[@/libs/wave/ Wave]:]
  * See the [@/libs/wave/ChangeLog Changelog] for details.

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]

