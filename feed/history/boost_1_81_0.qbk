[article Version 1.81.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* [phrase library..[@/libs/url/ URL]:] A library for parsing, modifying,
  and printing URLs using only C++11, from Vinnie Falco and Alan de Freitas.
  Features include fast compilation, strong invariants, and strict compliance
  using a memory-friendly approach.

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/beast/ Beast]:]
  * Add `buffers_generator`
  * Add `beast::http::message_generator`
  * Added `buffer_ref`, so beast buffers can be used with asio.
  * Support for per-operation cancellation 
  * C++20 awaitable examples.
  * websocket per-message compression options
  * websocket timeout option api
  * multiple content length error
  * Support for default-completion and rebind

* [phrase library..[@/libs/container_hash/ Container Hash]:]
  * [*Major update.]
  * The specializations of `boost::hash` have been removed; it now
    always calls `hash_value`.
  * Support for `BOOST_HASH_NO_EXTENSIONS` has been removed. The
    extensions are always enabled.
  * All standard containers are now supported. This includes
    `std::forward_list` and the unordered associative containers.
  * User-defined containers (types that have `begin()` and `end()`
    member functions that return iterators) are now supported out
    of the box.
  * Described structs and classes (those annotated with
    `BOOST_DESCRIBE_STRUCT` or `BOOST_DESCRIBE_CLASS`) are now
    supported out of the box.
  * `hash_combine` has been improved.
  * The performance (and quality, as a result of the above change)
    of string hashing has been improved. `boost::hash` for strings
    now passes SMHasher in 64 bit mode.
  * The documentation has been substantially revised to reflect
    the changes.

* [phrase library..[@/libs/core/ Core]:]
  * `empty_value` members are now marked as `constexpr`.
  * Added `fclose_deleter`, a deleter that calls `std::fclose` on a pointer to `std::FILE`.
  * Bit manipulation utilities in `boost/core/bit.hpp` now explicitly require unsigned integers on input. ([github core 129])
  * `bit_width` now returns `int` instead of a value of the input argument type. This follows resolution of [@https://cplusplus.github.io/LWG/issue3656 LWG3656].

* [phrase library..[@/libs/describe/ Describe]:]
  * To allow the inclusion of `enumerators.hpp`, `bases.hpp`, and `members.hpp`
    when the option `-pedantic` is used, the invocation of `BOOST_DESCRIBE_ENUM`
    has been moved from `modifiers.hpp` into a separate header,
    `modifier_description.hpp`. As a consequence, `modifiers.hpp` no longer
    includes `enum.hpp`. Code that has been relying on this implicit inclusion
    may fail, and will need to be fixed to include `enum.hpp`.

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * [*Deprecated:] `path` construction, assignment and appending from containers of characters, such as `std::vector<char>` or `std::list<wchar_t>`, is deprecated in [*v3] and removed in [*v4]. Please use string types or iterators instead.
  * [*Deprecated:] `boost/filesystem/path_traits.hpp` header is deprecated and will be removed in a future release. The header contained implementation details of `path` and should not be used in user's code.
  * Previously deprecated APIs will now generate compilation warnings on use. To suppress these warnings, `BOOST_FILESYSTEM_ALLOW_DEPRECATED` macro can be defined when compiling user's code.
  * Fixed compilation due to a missing include on POSIX systems that do not support `*at` APIs. ([github filesystem 250])
  * On Windows prior to 10, added a workaround for network share filesystem that produces `ERROR_INVALID_PARAMETER` when constructing directory iterators. ([github_pr filesystem 246], [github filesystem 245])
  * On Windows, fixed `weakly_canonical` failing with an `ERROR_INVALID_FUNCTION` error code if the path started with the "\\\\?\\" prefix. ([github filesystem 247])
  * Added support for `std::string_view`, `boost::string_view` and `boost::container::string` (as well as respective `wchar_t` counterparts) in `path` constructors, assignment and appending operations. ([github filesystem 208])
  * `path` constructors, assignment and appending operations taking a pair of iterators will no longer accept iterators with value types that are not one of the supported path character types.

* [phrase library..[@/libs/flyweight/index.html Flyweight]:]
  * Maintenance work.

* [phrase library..[@/libs/fusion/ Fusion]:]
  * Added `fusion::identity_view` ([github_pr fusion 240])
  * Added support for associative sequences on `fusion::transform_view` ([github_pr fusion 239])
  * Fixed compilation for the case when `fusion::reverse_view` used with an associative sequence ([github_pr fusion 237])
  * Fixed Clang 13 -Wdeprecated-copy warnings ([github_pr fusion 261])
  * A small dependency reorganization. Now `boost::ref` and `boost::noncopyable` are used from Boost.Core ([github_pr fusion 249])
  * Added CI testing on Linux and MacOS for clang and gcc, fixed CI testing on Windows ([github_pr fusion 245], [github_pr fusion 236])
  * Improved docs and fixed typos ([github fusion 234], [github_pr fusion 235], [github_pr fusion 238])

* [phrase library..[@/libs/geometry/ Geometry]:]
  * Solved issues
    * [github geometry 1048] Index: Fix dangling references when Indexable is returned by value by IndexableGetter
    * [github geometry 1076] Union: in rare cases it might miss one polygon
    * [github geometry 1081] Union: due to precision it might miss interior rings
  * Bugfixes
    * [github geometry 1063] Intersection: fix a bug in intersection of simple spherical polygons
    * [github geometry 1064] Formulas: fix a consistency issue in geodesic direct formulas
    * [github geometry 1088] Point: Fix regression for custom point types
    * Various fixes for missing include files, warnings, C++20 compilation errors and documentation

* [phrase library..[@/libs/iterator/ Iterator]:]
  * `function_output_iterator` now supports perfect forwarding of the assigned values to the wrapped function object. ([github_pr iterator 73])
  * Fixed compilation of constructing a `function_input_iterator` from result of post-incrementing another `function_input_iterator`. ([github iterator 75])
  * The result of post-incrementing an iterator based on `iterator_facade` now supports `operator->`. `(it++)->foo` is equivalent to `(*it++).foo`, which was supported before.

* [phrase library..[@/libs/json/ JSON]:]
  * Added `object::stable_erase`.
  * Added `parse` overload for `std::istream` and  `operator>>` for `value`.
  * Added rvalue ref-qualified accessors for `value`.
  * Conversion traits were redesigned.
  * Added conversion support for described classes and enums, `std::optional`,
    `std::variant`, and null-like types (including `std::nullptr_t`,
    `std::nullopt_t`, and `std::monotype`).
  * Added non-throwing conversion from `value` to user types.

* [phrase library..[@/libs/locale/ Locale]:]
  * [*Major update with some breaking changes.]
  * C++11 support is now required, support for C++03 and earlier is dropped
  * Some enums have been converted to enum classes - Avoids name clashes
  * Replace `-sICU_LINK_LOCALE` & `-sICU_LINK` by fine-grained configuration options as done in Boost.RegEx
  * Fix detection of libiconv allowing Boost.Locale to be build (again) on some platforms
  * Remove use of and support for `std::auto_ptr`
  * Make the `codecvt` using `wchar_t` on Windows assume/use UTF-16 enconding
  * Performance improvements:
    Make `basic_format`, `date_time` & `hold_ptr` movable,
    Fix use of format cache
  * Make Boost.Locale compatible with more ICU versions (especially the tests)
  * Fix RTTI definitions for some classes (visibility issues)
  * Fix compatibility of the ICU backend with some libc++ versions
  * Fix return value of some operators to correctly return non-const `*this`
  * Fix int-overflow on negative roll of years in `date_time`
  * Handle or suppress many warnings which makes the build log cleaner
  * Add support for more Windows codepages
  * Fix support for  Windows codepages like ISO-2022-JP

* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * Maintenance work.

* [phrase library..[@/libs/nowide/ Nowide]:]
  * Fix build failure of tests on MSVC

* [phrase library..[@/libs/pfr/ PFR]:]
  * Maintenance work.

* [phrase library..[@/libs/stl_interfaces/ STLInterfaces]:]
  * Fix two ill-formed `iterator_interface` operators in pre-C++20 iterators
    with a `const` `value_type`.

* [phrase library..[@/libs/system/ System]:]
  * The macro `BOOST_SYSTEM_DISABLE_THREADS` can now be defined to disable
    the use of `<mutex>` (e.g. on single-threaded libstdc++).
  * Added `value_type`, `error_type`, `in_place_value`, `in_place_error`
    to `result<>`.
  * Added `emplace` to `result<>`.

* [phrase library..[@/libs/unordered/ Unordered]:]
  * [*Major update.]
  * Added fast containers `boost::unordered_flat_map` and `boost::unordered_flat_set`
    based on open addressing.
  * Added CTAD deduction guides for all containers.
  * Added missing constructors as specified in
    [@https://cplusplus.github.io/LWG/issue2713 LWG issue 2713].

* [phrase library..[@/libs/variant2/ Variant2]:]
  * Added support for `boost::json::value_from` and `boost::json::value_to`.

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++11: 3.4, 11.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++20: 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0

  * GCC: 4.6.3, 11, 12
  * GCC, C++11: 4.7.3, 4.8.5, 11, 12
  * GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11, 12
  * GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11, 12
  * GCC, C++20: 8.0.1, 9.1.0, 10, 11, 12

* OS X:
  * Apple Clang: 11.0.3
  * Apple Clang, C++11: 11.0.3
  * Apple Clang, C++14: 11.0.3
  * Apple Clang, C++17: 11.0.3
  * Apple Clang, C++20: 11.0.3

* Windows:
  * Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2, 14.3

[endsect]

[section Acknowledgements]

Marshall Clow and Glen Fernandes managed this release.

[endsect]
