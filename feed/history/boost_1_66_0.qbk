[article Version 1.66.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[section New Libraries]

* [phrase library..[@/libs/beast/ Beast]:]
  Portable HTTP, WebSocket, and network operations using only C++11 and
  Boost.Asio, from Vinnie Falco.

* [phrase library..[@/libs/callable_traits/ CallableTraits]:]
  A spiritual successor to Boost.FunctionTypes, Boost.CallableTraits is a
  header-only C++11 library for the compile-time inspection and manipulation of
  all 'callable' types. Additional support for C++17 features, from Barrett
  Adair.

* [phrase library..[@/libs/mp11/ Mp11]:]
  Simple C++11 metaprogramming library, from Peter Dimov.

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * `shared_ptr` is movable and supports aliasing ([ticket 1234]).
]

* [phrase library..[@/libs/atomic/ Atomic]:]
  * Implemented a set of experimental extended atomic operations for integral types:
    * `fetch_negate`, `fetch_complement` - atomically replaces the value with a negated or binary complemented value and returns the original value
    * `opaque_<op>` - equivalent to `fetch_<op>` except that it doesn't return the original value
    * `<op>_and_test` - atomically applies `<op>` and returns `true` if the result is zero
    * `bit_test_and_set`, `bit_test_and_reset`, `bit_test_and_complement` - atomically sets, resets or complements the specified bit and returns the original value of the bit
  * Following C++17 ([@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf P0558R1]), arithmetic operations for pointers to non-object types are no longer provided.
  * Also following C++17 exposed `atomic<T>::value_type` and `atomic<T>::difference_type` member typedefs, where applicable, to the user's code.
  * Improved compatibility with gcc 7. In particular, using 128-bit operations on x86-64 should no longer require linking with libatomic (the compiler-supplied library).

* [phrase library..[@/libs/date_time/ DateTime]:]
  * The library has been converted to use Boost.WinAPI as the abstraction layer for Windows SDK.
  * Fixed an integral overflow that could cause incorrect results when adding or subtracting many years from a date (see [@https://stackoverflow.com/questions/45537280/boost-datetime-issue-with-adding-long-year-durations here]).

* [phrase library..[@/libs/format/ Format]:]
  * Improvements:
    * Accept new conversion specifiers:
      * [@https://github.com/boostorg/format/pull/41 `a`]: sets flags `fixed | scientific` (i.e. `hexfloat`)
      * [@https://github.com/boostorg/format/pull/43 `b`]: sets flag `boolalpha`
      * [@https://github.com/boostorg/format/pull/41 `A`]: same as `a` plus flag `uppercase`
      * [@https://github.com/boostorg/format/pull/41 `F`]: same as `f` plus flag `uppercase`
    * [@https://github.com/boostorg/format/pull/42 42]
      Accept new argument types `j` and `z` from ISO C99 (parsed and ignored like all others).
    * [@https://github.com/boostorg/format/pull/44 44]
      Accept new argument types `I`, `I32`, `I64`, and `w` from Microsoft (parsed and ignored like all others).
    * [@https://github.com/boostorg/format/issues/33 33]
      Added a development tool called `format_matrix` that exercises as many different
      combinations of format strings as possible and logs them to a file:
      * helps prevent regressions in between boost releases
      * allows for comparison against `snprintf`
  * Bugfixes:
    * [@https://svn.boost.org/trac10/ticket/4636 4636]
      Explicit clamping provided to allow MSVC /RTCc to succeed
    * [@https://svn.boost.org/trac10/ticket/7477 7477]
      Fix compatibility with MSVC /Za
    * [@https://svn.boost.org/trac10/ticket/10324 10324]
      Const-correct cast issue resolved
    * [@https://svn.boost.org/trac10/ticket/11632 11632]
      Fix `-fsanitize=undefined` issue in `alt_sstream.hpp`

* [phrase library..[@/libs/iterator/ Iterator]:]
  * `next()`/`prior()` functions now support user's iterators that don't specify nested types such as `iterator_category`, `difference_type`, etc. and instead specialize `std::iterator_traits` to define those types. The compiler must support C++17-compatible `std::iterator_traits` for this to work.

* [phrase library..[@/libs/log/ Log]:]
  * Bug fixes:
    * Fixed a bug in `file_collector::scan_for_files` that could cause incorrectly named log files in the target directory after the user's application restart.
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.

* [phrase library..[@/libs/multi_index/index.html Multi-index Containers]:]
  * Made `modify` and `modify_key` more robust so that the modified element
    is erased if the modifier throws or the rollback functor does not properly
    restore the element (full discussion at ticket [ticket 12542]). This is
    technically backwards incompatible; for instance, the following code:
    ```
    c.modify(c.begin(),[](auto&){throw 0;});
    ```
    keeps the container `c` untouched in former versions of Boost whereas now
    `c.begin()` is erased. Thanks to Jon Kalb for raising the issue.
  * Maintenance fixes.

* [phrase library..[@/libs/poly_collection/ PolyCollection]:]
  * Boost.PolyCollection has been backported to GCC 4.8-9. In the case of GCC 4.8,
    there are some limitations coming from deficiencies in the version of libstdc++-v3
    this compiler uses:
      * Stateful allocators are not properly supported.
      * Allocator-extended move construction decays to allocator-extended copy construction.
      * Copy construction crashes if an exception is thrown during element copying.
  * Maintenance fixes.

* [phrase library..[@/libs/utility/ Utility]:]
  * `boost/next_prior.hpp` has been moved to Boost.Iterator. No changes needed to the user's code.

* [phrase library..[@/libs/uuid/ Uuid]:]
  * Improvements:
    * [@https://github.com/boostorg/uuid/issues/26 26]
      Refactored `name_generator` to support a configurable hash provider
      concept and provide an optional MD5 hash implementation per RFC-4122.
      This will make it easier to support whatever becomes the next
      standard hash algorithm.
    * [@https://github.com/boostorg/uuid/issues/34 34]
      Added RFC-4122 namespaces in `boost::uuids::ns`.
  * Bugfixes:
    * [@https://svn.boost.org/trac10/ticket/8630 8630]
      [@https://svn.boost.org/trac10/ticket/11482 11482]
      [@https://svn.boost.org/trac10/ticket/12253 12253]
      Various deficiencies in `string_generator` were resolved.
    * [@https://svn.boost.org/trac10/ticket/11483 11483]
       Invalid `string_generator` inputs now throw
      `std::invalid_argument` instead of `std::runtime_error`.
    * [@https://svn.boost.org/trac10/ticket/10665 10665]
      `name_generator::operator()` is now const, matching docs.
    * Detail headers were moved into the detail subdirectory.
      No changes needed to user's code, however you may get
      build warnings if you use the old header location.


* /TODO/

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
