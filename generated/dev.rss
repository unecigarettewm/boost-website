<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:boostbook="urn:boost.org:boostbook">
  <channel>
    <generator>Boost Website Site Tools</generator>
    <title>Release notes for work in progress boost</title>
    <link>http://www.boost.org/</link>
    <description></description>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)</copyright>
<item><title>Version 1.54.0</title><link>http://www.boost.org/users/history/version_1_54_0.html</link><guid>http://www.boost.org/users/history/version_1_54_0.html</guid><pubDate>In Progress</pubDate><description>


  &lt;div id=&quot;version_1_54_0.news&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;News&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost no longer supports the 80386 target CPU, the minimum x86 32-bit target
      is i486. The 80386 target was not properly supported by &lt;a href=&quot;http://www.boost.org/libs/smart_ptr/&quot;&gt;Boost.SmartPtr&lt;/a&gt;
      and &lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Boost.Atomic&lt;/a&gt; (as well as the libraries
      that used them internally) even before this release. Some Boost libraries may
      have higher requirements on the minimum target CPU (like &lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Boost.Log&lt;/a&gt;
      for example), see the respective library documentation for details.
    &lt;/p&gt;
    &lt;p&gt;
      Also by default, when building Boost for x86 32-bit targets it will compile
      for i686 (Pentium Pro) and later CPUs. This can be changed by specifying the
      &lt;tt&gt;instruction-set&lt;/tt&gt; property in &lt;tt&gt;b2&lt;/tt&gt; or &lt;tt&gt;bjam&lt;/tt&gt;
      command line, for example:
    &lt;/p&gt;
&lt;pre&gt;b2 variant=release architecture=x86 instruction-set=i486 stage
&lt;/pre&gt;
    &lt;p&gt;
      Possible values for the &lt;tt&gt;instruction-set&lt;/tt&gt; are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Target for the host CPU: &lt;tt&gt;native&lt;/tt&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Generic x86 CPUs: &lt;tt&gt;i486&lt;/tt&gt;, &lt;tt&gt;i586&lt;/tt&gt;, &lt;tt&gt;i686&lt;/tt&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Intel CPUs: &lt;tt&gt;pentium&lt;/tt&gt;, &lt;tt&gt;pentium-mmx&lt;/tt&gt;,
          &lt;tt&gt;pentiumpro&lt;/tt&gt;, &lt;tt&gt;pentium2&lt;/tt&gt;, &lt;tt&gt;pentium3&lt;/tt&gt;,
          &lt;tt&gt;pentium3m&lt;/tt&gt;, &lt;tt&gt;pentium-m&lt;/tt&gt;, &lt;tt&gt;pentium4&lt;/tt&gt;,
          &lt;tt&gt;pentium4m&lt;/tt&gt;, &lt;tt&gt;prescott&lt;/tt&gt;, &lt;tt&gt;nocona&lt;/tt&gt;,
          &lt;tt&gt;core2&lt;/tt&gt;, &lt;tt&gt;corei7&lt;/tt&gt;, &lt;tt&gt;corei7-avx&lt;/tt&gt;,
          &lt;tt&gt;core-avx-i&lt;/tt&gt;, &lt;tt&gt;conroe&lt;/tt&gt;, &lt;tt&gt;conroe-xe&lt;/tt&gt;,
          &lt;tt&gt;conroe-l&lt;/tt&gt;, &lt;tt&gt;allendale&lt;/tt&gt;, &lt;tt&gt;merom&lt;/tt&gt;,
          &lt;tt&gt;merom-xe&lt;/tt&gt;, &lt;tt&gt;kentsfield&lt;/tt&gt;, &lt;tt&gt;kentsfield-xe&lt;/tt&gt;,
          &lt;tt&gt;penryn&lt;/tt&gt;, &lt;tt&gt;wolfdale&lt;/tt&gt;, &lt;tt&gt;yorksfield&lt;/tt&gt;,
          &lt;tt&gt;nehalem&lt;/tt&gt;, &lt;tt&gt;sandy-bridge&lt;/tt&gt;, &lt;tt&gt;ivy-bridge&lt;/tt&gt;,
          &lt;tt&gt;haswell&lt;/tt&gt;, &lt;tt&gt;atom&lt;/tt&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AMD CPUs: &lt;tt&gt;k6&lt;/tt&gt;, &lt;tt&gt;k6-2&lt;/tt&gt;, &lt;tt&gt;k6-3&lt;/tt&gt;,
          &lt;tt&gt;athlon&lt;/tt&gt;, &lt;tt&gt;athlon-tbird&lt;/tt&gt;, &lt;tt&gt;athlon-4&lt;/tt&gt;,
          &lt;tt&gt;athlon-xp&lt;/tt&gt;, &lt;tt&gt;athlon-mp&lt;/tt&gt;, &lt;tt&gt;k8&lt;/tt&gt;,
          &lt;tt&gt;opteron&lt;/tt&gt;, &lt;tt&gt;athlon64&lt;/tt&gt;, &lt;tt&gt;athlon-fx&lt;/tt&gt;,
          &lt;tt&gt;k8-sse3&lt;/tt&gt;, &lt;tt&gt;opteron-sse3&lt;/tt&gt;, &lt;tt&gt;athlon64-sse3&lt;/tt&gt;,
          &lt;tt&gt;amdfam10&lt;/tt&gt;, &lt;tt&gt;barcelona&lt;/tt&gt;, &lt;tt&gt;bdver1&lt;/tt&gt;,
          &lt;tt&gt;bdver2&lt;/tt&gt;, &lt;tt&gt;bdver3&lt;/tt&gt;, &lt;tt&gt;btver1&lt;/tt&gt;,
          &lt;tt&gt;btver2&lt;/tt&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          VIA CPUs: &lt;tt&gt;c3&lt;/tt&gt;, &lt;tt&gt;c3-2&lt;/tt&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          IDT CPUs: &lt;tt&gt;winchip-c6&lt;/tt&gt;, &lt;tt&gt;winchip2&lt;/tt&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Note that not all these values may be supported by a particular compiler.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
  Logging library, from Andrey
          Semashev.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/tti/&quot;&gt;TTI&lt;/a&gt;:&lt;/span&gt;
  Type Traits Introspection library,
          from Edward Diener.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_erasure/&quot;&gt;Type Erasure&lt;/a&gt;:&lt;/span&gt;
  Runtime polymorphism
          based on concepts.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes comment typos (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7917&quot;&gt;#7917&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Silence unused variable warnings (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6926&quot;&gt;#6926&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The return types for copy_while and copy_until have been changed.
                This is an interface change. If you were using the return values
                from these functions, then you will have to modify your code. Instead
                of just returning the modified &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;OutputIterator&lt;/span&gt;&lt;/code&gt;,
                these functions now return a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;InputIterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;OutputIterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;. If this change affects your
                code, the simplest change is to add a &lt;code&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;second&lt;/span&gt;&lt;/code&gt; to the end of the call,
                which will get you the same behavior that you had before.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++14 versions of 'is_permutation', 'equal' and 'mismatch'.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++11 features support &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6999&quot;&gt;#6999&lt;/a&gt;:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Move assignment and move constructors.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                      modifiers.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new traits classes, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;handler_type&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_result&lt;/span&gt;&lt;/code&gt;,
                that allow the customisation of the return type of an initiating
                function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                function, a high-level wrapper for running stackful coroutines, based
                on the Boost.Coroutine library. The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function enables programs to implement
                asynchronous logic in a synchronous manner. For example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;
                &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_some&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_buffer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;/code&gt; special value, which
                provides first-class support for returning a C++11 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;/code&gt; from an asynchronous operation's
                initiating function. For example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;
                &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_some&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_buffer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Promoted the stackless coroutine class and macros to be part of Asio's
                documented interface, rather than part of the HTTP server 4 example.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a new handler hook called &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio_handler_is_continuation&lt;/span&gt;&lt;/code&gt;.
                Asynchronous operations may represent a continuation of the asynchronous
                control flow associated with the current executing handler. The
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio_handler_is_continuation&lt;/span&gt;&lt;/code&gt;
                hook can be customised to return &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/code&gt;
                if this is the case, and Asio's implementation can use this knowledge
                to optimise scheduling of the new handler. To cover common cases,
                Asio customises the hook for strands, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and composed asynchronous operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added four new generic protocol classes, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;datagram_protocol&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;raw_protocol&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;seq_packet_protocol&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;/code&gt;, which implement
                the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Protocol&lt;/span&gt;&lt;/code&gt; type
                requirements, but allow the user to specify the address family (e.g.
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;AF_INET&lt;/span&gt;&lt;/code&gt;) and protocol
                type (e.g. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;/code&gt;)
                at runtime.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++11 move constructors that allow the conversion of a socket
                (or acceptor) into a more generic type. For example, an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; can be converted into a
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; via move construction.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Extended the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_socket_acceptor&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; class's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_accept&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; functions to allow a new connection
                to be accepted directly into a socket of a more generic type. For
                example, an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;acceptor&lt;/span&gt;&lt;/code&gt; can be used to accept
                into a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; object.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Moved existing examples into a C++03-specific directory, and added
                a new directory for C++11-specific examples. A limited subset of
                the C++03 examples have been converted to their C++11 equivalents.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various SSL enhancements. Thanks go to Nick Jones, on whose work
                these changes are based.
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for SSL handshakes with re-use of data already
                      read from the wire. New overloads of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; class's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;handshake&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_handshake&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; functions have been added.
                      These accept a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConstBufferSequence&lt;/span&gt;&lt;/code&gt;
                      to be used as initial input to the ssl engine for the handshake
                      procedure.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for creation of TLSv1.1 and TLSv1.2 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; objects.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;set_verify_depth&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                      classes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added the ability to load SSL certificate and key data from
                      memory buffers. New functions, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;add_certificate_authority&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_certificate&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_certificate_chain&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_private_key&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_rsa_private_key&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_tmp_dh&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, have been added to the
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt;
                      to automatically disable SSL compression by default. To enable,
                      use the new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;clear_options&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function, as in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;my_context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;clear_options&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;no_compression&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a potential deadlock in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal_set&lt;/span&gt;&lt;/code&gt;
                implementation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an error in acceptor example in documentation &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8421&quot;&gt;#8421&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed copy-paste errors in waitable timer documentation &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8602&quot;&gt;#8602&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added assertions to satisfy some code analysis tools &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7739&quot;&gt;#7739&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a malformed &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#warning&lt;/span&gt;&lt;/code&gt;
                directive &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7939&quot;&gt;#7939&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a potential data race in the Linux &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll&lt;/span&gt;&lt;/code&gt;
                implementation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a Windows-specific bug, where certain operations might generate
                an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt; with
                an invalid (i.e. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;NULL&lt;/span&gt;&lt;/code&gt;)
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_category&lt;/span&gt;&lt;/code&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8613&quot;&gt;#8613&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_waitable_timer&lt;/span&gt;&lt;/code&gt;'s
                underlying implementation so that it can handle any &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;time_point&lt;/span&gt;&lt;/code&gt; value without overflowing
                the intermediate duration objects.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a problem with lost thread wakeups that can occur when making
                concurrent calls to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; on the same &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                object &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8354&quot;&gt;#8354&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed implementation of asynchronous connect operation so that it
                can cope with spurious readiness notifications from the reactor &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7961&quot;&gt;#7961&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8079&quot;&gt;#8079&lt;/a&gt;
                      Chrono memory leak
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8318&quot;&gt;#8318&lt;/a&gt;
                      BOOST_FORCEINLINE constructors of time_point and duration
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8367&quot;&gt;#8367&lt;/a&gt;
                      chrono does not compile with clang from XCode 4.5.2 with -std=c++11
                      -stdlib=libc++ and -arch armv7
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8370&quot;&gt;#8370&lt;/a&gt;
                      typo in chrono reference
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8435&quot;&gt;#8435&lt;/a&gt;
                      Can't compile Chrono on HP-UX due to no CLOCK_REALTIME macro.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8032&quot;&gt;#8032&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for SPARC architecture added.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for segmented stacks (stack grows on demand) added.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7805&quot;&gt;#7805&lt;/a&gt;
                Typo
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7972&quot;&gt;#7972&lt;/a&gt;
                GCC warnings
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7988&quot;&gt;#7988&lt;/a&gt;
                C++11 range-for
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8023&quot;&gt;#8023&lt;/a&gt;
                Using iterator traits
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8024&quot;&gt;#8024&lt;/a&gt;
                Create const_iterator
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8101&quot;&gt;#8101&lt;/a&gt;
                Postfix operator++ for iterator
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8526&quot;&gt;#8526&lt;/a&gt;
                memory leak
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8544&quot;&gt;#8544&lt;/a&gt;
                calling managed DLL
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      added Spatial Index, developed for Boost.Geometry by Adam Wulkiewicz.
                      The spatial index was originally started by Federico J. Fernandez
                      during the Google Summer of Code 2008 program, mentored by
                      Hartmut Kaiser.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      added SVG-output, this was already in extensions for several
                      years
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Documentation&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      small fixes of missing words
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      collinear opposite segments did sometimes (in circles) have
                      a robustness issue, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixed insertion of false intersection point (found by buffer)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      applied patch of Vladimir Petrovic for debugging traversals
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7462&quot;&gt;7462&lt;/a&gt;
                      degenerate union result for float, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7465&quot;&gt;7465&lt;/a&gt;
                      wrong construtors access type in scale_transformer class, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7802&quot;&gt;7802&lt;/a&gt;
                      cart_intersect.hpp unused parameter warnings, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8254&quot;&gt;8254&lt;/a&gt;
                      faulty intersection, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8393&quot;&gt;8393&lt;/a&gt;
                      polygon model doesn't adhere to stated Polygon concept rules,
                      doc updated.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8403&quot;&gt;8403&lt;/a&gt;
                      silenced compiler warning C4127: conditional expression is
                      constant
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8405&quot;&gt;8405&lt;/a&gt;
                      silenced compiler warning C4189: '...' : local variable is
                      initialized but not referenced
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Internal changes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Made several algorithms variant-aware (append, area, clear,
                      convert, equals, length, num_points)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6780&quot;&gt;#6780&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7016&quot;&gt;#7016&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7155&quot;&gt;#7155&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7845&quot;&gt;#7845&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7863&quot;&gt;#7863&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7877&quot;&gt;#7877&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8166&quot;&gt;#8166&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8192&quot;&gt;#8192&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8398&quot;&gt;#8398&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8411&quot;&gt;#8411&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8427&quot;&gt;#8427&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8428&quot;&gt;#8428&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8434&quot;&gt;#8434&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8490&quot;&gt;#8490&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added updates to VF2 subgraph isomorphism from Jakob Lykke Andersen
                and Flavio De Lorenzi.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added maximum adjacency search from Fernando Vilas.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added timeout support from Brammert Ottens to resource-constrained
                shortest paths (r_c_shortest_paths) algorithm.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various fixes to documentation and examples and removal of outdated
                compiler workarounds.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iostreams/&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tee&lt;/span&gt;&lt;/code&gt; now works correctly
                for std::streams (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8315&quot;&gt;#8315&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8385&quot;&gt;#8385&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8460&quot;&gt;#8460&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid warning from Clang's &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wimplicit&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fallthrough&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8482&quot;&gt;#8482&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Converting to character pointer now triggers compile time assert
                instead of runtime &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8334&quot;&gt;#8334&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Lexical cast is now capable of converting &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;int128_type&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;uint128_type&lt;/span&gt;&lt;/code&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7909&quot;&gt;#7909&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed internal stream buffer handling, now works with libc++ &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8267&quot;&gt;#8267&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7704&quot;&gt;#7704&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restored getting address of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;/code&gt;
                function that was broken in 1.53.0 &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7421&quot;&gt;#7421&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed warnings, internals and tests &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2558&quot;&gt;#2558&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7949&quot;&gt;#7949&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8162&quot;&gt;#8162&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8369&quot;&gt;#8369&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8547&quot;&gt;#8547&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Major reorganization to incorporate other Boost.Math like Integer
                Utilities (Greatest Common Divisor and Least Common Multiple), quaternions
                and octonions. Making new chapter headings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added many references to Boost.Multiprecision and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_dec_float_50&lt;/span&gt;&lt;/code&gt;
                as an example of a User-defined Type (UDT).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Clang to list of supported compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed constants to use a thread-safe cache of computed values when
                used at arbitrary precision.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added finding zeros of Bessel functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cyl_bessel_j_zero&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cyl_neumann_zero&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;airy_ai_zeros&lt;/span&gt;&lt;/code&gt; and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;airy_bi_zeros&lt;/span&gt;&lt;/code&gt;(by
                Christopher Kormanyos).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                More accuracy improvements to the Bessel J and Y functions from Rocco
                Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed nasty cyclic dependency bug that caused some headers to not
                compile &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7999&quot;&gt;#7999&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in __tgamma that caused spurious overflow for arguments
                between 142.5 and 143.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in raise_rounding_error that caused it to return an incorrect
                result when throwing an exception is turned off &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7905&quot;&gt;#7905&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added minimal __float128 support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in edge-cases of poisson quantile &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8308&quot;&gt;#8308&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Adjusted heuristics used in Halley iteration to cope with inverting
                the incomplete beta in tricky regions where the derivative is flatlining.
                Example is computing the quantile of the Fisher F distribution for
                probabilities smaller than machine epsilon. See ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8314&quot;&gt;#8314&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change&lt;/strong&gt; renamed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rational_adapter&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rational_adaptor&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for &lt;a href=&quot;http://perso.ens-lyon.fr/nathalie.revol/software.html&quot;&gt;MPFI&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add logged_adaptor.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for 128-bit floats via GCC's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__float128&lt;/span&gt;&lt;/code&gt;
                or Intel's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_Quad&lt;/span&gt;&lt;/code&gt;
                data types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for user-defined literals in cpp_int, improve &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;constexpr&lt;/span&gt;&lt;/code&gt; support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in integer division of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                that results in incorrect sign of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                when both arguments are small enough to fit in a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;double_limb_type&lt;/span&gt;&lt;/code&gt;.
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8126&quot;&gt;8126&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in subtraction of a single limb in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                that results in incorrect value when the result should have a 0 in
                the last limb: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8133&quot;&gt;8133&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                where division of 0 by something doesn't get zero in the result:
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8160&quot;&gt;8160&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in some transcendental functions that caused incorrect
                return values when variables are reused, for example with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8326&quot;&gt;8326&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updates and fixes to the Voronoi documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8026&quot;&gt;#8026&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8197&quot;&gt;#8197&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8257&quot;&gt;#8257&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_map/&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compose_property_map&lt;/span&gt;&lt;/code&gt;
                from Guillaume Pinot.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7285&quot;&gt;#7285&lt;/a&gt;
                      C++11 compliance: Allow to pass movable arguments for call_once.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7445&quot;&gt;#7445&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;.then
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7449&quot;&gt;#7449&lt;/a&gt;
                      Synchro: Add a synchronized value class
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4878&quot;&gt;#4878&lt;/a&gt;
                      MinGW 4.5.0 undefined reference to bool interruptible_wait(detail::win32::handle
                      handle_to_wait_for,detail::t imeout target_time).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4882&quot;&gt;#4882&lt;/a&gt;
                      Win32 shared_mutex does not handle timeouts correctly.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5752&quot;&gt;#5752&lt;/a&gt;
                      boost::call_once() is unreliable on some platforms
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6652&quot;&gt;#6652&lt;/a&gt;
                      Boost.Thread shared_mutex.hpp:50:99: warning: dereferencing
                      type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6843&quot;&gt;#6843&lt;/a&gt;
                      [Intel C++] Compile Errors with '#include &amp;lt;atomic&amp;gt;'
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6966&quot;&gt;#6966&lt;/a&gt;
                      future boost::future_category inconsistent dll linkage
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7720&quot;&gt;#7720&lt;/a&gt;
                      exception lock_error while intensive locking/unlocking of mutex
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7755&quot;&gt;#7755&lt;/a&gt;
                      Thread: deadlock with shared_mutex on Windows
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7980&quot;&gt;#7980&lt;/a&gt;
                      Build error: msvc-11.0 and BOOST_THREAD_DONT_USE_DATETIME
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7982&quot;&gt;#7982&lt;/a&gt;
                      pthread_delay_np() parm compile error on AIX
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8027&quot;&gt;#8027&lt;/a&gt;
                      thread library fails to compile with Visual Studio 2003
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8070&quot;&gt;#8070&lt;/a&gt;
                      prefer GetTickCount64 over GetTickCount
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8136&quot;&gt;#8136&lt;/a&gt;
                      boost::this_thread::sleep_for() sleeps longer than it should
                      in Windows
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8212&quot;&gt;#8212&lt;/a&gt;
                      Boost thread compilation error on Solaris 10
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8237&quot;&gt;#8237&lt;/a&gt;
                      fix documentation for 'thread_group'
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8239&quot;&gt;#8239&lt;/a&gt;
                      barrier::wait() not marked as interruption_point
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8323&quot;&gt;#8323&lt;/a&gt;
                      boost::thread::try_join_for/try_join_until may block indefinitely
                      due to a combination of problems in Boost.Thread and Boost.Chrono
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8337&quot;&gt;#8337&lt;/a&gt;
                      The internal representation of &amp;quot;std::string(this-&amp;gt;code()-&amp;gt;message())&amp;quot;
                      escapes, but is destroyed when it exits scope.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8371&quot;&gt;#8371&lt;/a&gt;
                      C++11 once_flag enabled when constexpr is not available
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8443&quot;&gt;#8443&lt;/a&gt;
                      Header file inclusion order may cause crashes
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8451&quot;&gt;#8451&lt;/a&gt;
                      Missing documented function 'boost::scoped_thread::joinable'
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8530&quot;&gt;#8530&lt;/a&gt;
                      [Coverity] Unused variable thread_handle, uninitialized variable
                      cond_mutex in thread/pthread/thread_data.hpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8596&quot;&gt;#8596&lt;/a&gt;
                      With C++0x enabled, boost::packaged_task stores a reference
                      to function objects, instead of a copy.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New type traits implemented &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8189&quot;&gt;#8189&lt;/a&gt;:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      is_nothrow_move_constructible
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      is_nothrow_move_assignable
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      has_trivial_move_assign
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      has_trivial_move_constructor
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some very basic &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                support.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_string_ref&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8067&quot;&gt;#8067&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;string_ref&lt;/span&gt;&lt;/code&gt;'s
                logical operators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Update noncopyable for C++11 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6578&quot;&gt;#6578&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix noncopyable compiler warning when used in DLL interface (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6935&quot;&gt;#6935&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;/code&gt; with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt;
                on SolarisStudio compiler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7079&quot;&gt;#7079&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disable annoying MSVC warning about operator comma (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7663&quot;&gt;#7663&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Now uses new type traits from Boost.TypeTrait to detect &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt; constructors and assignment
                operators &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8296&quot;&gt;#8296&lt;/a&gt;. This shall increase performance of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;variant&lt;/span&gt;&lt;/code&gt; for many types in C++11.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multivisitation implemented &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8459&quot;&gt;#8459&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation updated to reflect C++11 features support.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          [prase library..&lt;a href=&quot;http://www.boost.org/libs/xpressive&quot;&gt;xpressive&lt;/a&gt;:]
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove unused variables, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8039&quot;&gt;#8039&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid name clash with macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;None&lt;/span&gt;&lt;/code&gt;
                in glx.h, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8204&quot;&gt;#8204&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Silence a gcc warning, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8138&quot;&gt;#8138&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98 mode: 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.7.2, 4.7.3, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11 mode: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.2, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2, from Subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, with libc++: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.2, 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98 mode: 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.7.3, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11 mode: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from Subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from Subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.2, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 9.0, 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: 12.1.0.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.53.0</title><link>http://www.boost.org/users/history/version_1_53_0.html</link><guid>http://www.boost.org/users/history/version_1_53_0.html</guid><pubDate>Mon, 4 Feb 2013 10:29:19 -0800</pubDate><description>



  &lt;div id=&quot;version_1_53_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
  C++11-style &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
          from Helge Bahmann, maintained by Tim Blechmann.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
  Coroutine library,
          from Oliver Kowalke.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lockfree/&quot;&gt;Lockfree&lt;/a&gt;:&lt;/span&gt;
  Lockfree data structures,
          from Tim Blechmann.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
  Extended
          precision arithmetic types for floating point, integer and rational arithmetic
          from John Maddock and Christopher Kormanyos.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/odeint/&quot;&gt;Odeint&lt;/a&gt;:&lt;/span&gt;
  Solving ordinary
          differential equations, from Karsten Ahnert and Mario Mulansky.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.news&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;News&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      This release contains a fix for ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7743&quot;&gt;#7743&lt;/a&gt;, in Boost.Locale. For more
      details, see the &lt;a href=&quot;http://www.boost.org/users/news/boost_locale_security_notice.html&quot;&gt;security
      notice&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed non-ASCII char in comment (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7781&quot;&gt;#7781&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the Knuth-Morris-Pratt docs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7656&quot;&gt;#7656&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/array/&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for boost::get and std::get (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7652&quot;&gt;#7652&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some 64-to-32-bit conversion warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7459&quot;&gt;#7459&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some small errors in documentation and comments (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7761&quot;&gt;#7761&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an error in the example embedded in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_option&lt;/span&gt;&lt;/code&gt;'s
                documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7562&quot;&gt;#7562&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&lt;/code&gt;
                rather than &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/code&gt; for
                SSL_CTX options, to match OpenSSL (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7209&quot;&gt;#7209&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_snwprintf&lt;/span&gt;&lt;/code&gt;
                to address a compile error due to the changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swprintf&lt;/span&gt;&lt;/code&gt;
                signature in recent versions of MinGW (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7373&quot;&gt;#7373&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a deadlock that can occur on Windows when shutting down a pool
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt; threads
                due to running out of work (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7552&quot;&gt;#7552&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                qualifier for error categories (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7797&quot;&gt;#7797&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed UNIX domain socket example to treat errors from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;accept&lt;/span&gt;&lt;/code&gt; as non-fatal (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7488&quot;&gt;#7488&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a small block recycling optimisation to improve default memory
                allocation behaviour.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/bimap/&quot;&gt;Bimap&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Refactor map_view_iterator to improve error messages.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed replace_(left/right/key/data) bug when using relations with
                info.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed vector_of and list_of views &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; bug.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed vector_of views &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; functions return value.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The chrono i/o version included in Boost.Chrono 1.2.x has been
                      completly refactored in version 2.0.0
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The manipulators __duration_short, __duration_long
                      are depreceated. You should use the parameterized form __duration_fmt
                      or the renamed manipulators __duration_symbol and __duration_prefix
                      instead.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The __duration_punct&amp;lt;&amp;gt; facet is depreceated.
                      You should use the __get_duration_style free function to get
                      the informations and use the __duration_units facet for localization
                      purposes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      When BOOST_CHRONO_VERSION==2 the preceding deprecated functions
                      are not available.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7546&quot;&gt;#7546&lt;/a&gt;
                      time_point&amp;lt;system_clock&amp;gt; output version 2 fails to compile
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7547&quot;&gt;#7547&lt;/a&gt;
                      time_point&amp;lt;system_clock&amp;gt; input version 2 fails to compile
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7868&quot;&gt;#7868&lt;/a&gt;
                      chrono_io parses time incorrectly (1.53 and 1.52)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7650&quot;&gt;#7650&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;'s
                insertion performance.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed again experimental multiallocation interface for better performance
                (still experimental).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added no exception support for those willing to disable exceptions
                in their compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed GCC -Wshadow warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for iOS on ARM and MacOS X on x86 (32bit) added.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for SEH Overwrite Protection on Win32.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      avoid generating output polygons with interior rings below
                      minimum size (e.g. one or two points)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;disjoint&lt;/span&gt;&lt;/code&gt; for degenerate segments
                      (patched by Karsten Ahnert)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      problem in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;difference&lt;/span&gt;&lt;/code&gt;
                      for missing handling tangency, reported by H2
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;for_each&lt;/span&gt;&lt;/code&gt;
                      for use with Lambda's
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;comparable_distance&lt;/span&gt;&lt;/code&gt;
                      point-linestring (and -range, -polygon)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      combinations for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;disjoint&lt;/span&gt;&lt;/code&gt;:
                      point/ring, point/polygon, point/multi_polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      combinations for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intersects&lt;/span&gt;&lt;/code&gt;:
                      point/ring, point/polygon, point/multi_polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Internal changes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      updates in specializations/not_implemented for various algorithms
                      (as in an earlier version, these changes are still going on;
                      they take care for simplified structs, better error reporting,
                      and automatized documentation)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixes in unit tests
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/gil/&quot;&gt;GIL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed self-assignment warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4919&quot;&gt;#4919&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed the following bugs from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3468&quot;&gt;#3468&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4386&quot;&gt;#4386&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5269&quot;&gt;#5269&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7428&quot;&gt;#7428&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7457&quot;&gt;#7457&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7467&quot;&gt;#7467&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7600&quot;&gt;#7600&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7648&quot;&gt;#7648&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7684&quot;&gt;#7684&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7728&quot;&gt;#7728&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7741&quot;&gt;#7741&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7766&quot;&gt;#7766&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7771&quot;&gt;#7771&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7773&quot;&gt;#7773&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7780&quot;&gt;#7780&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7787&quot;&gt;#7787&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7801&quot;&gt;#7801&lt;/a&gt;
    plus other bugs not in Trac.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for reading from GraphML files containing multiple
                graphs.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added versions of A* search specifically for trees, removing the
                need for a color map when it is acceptable to visit the same vertex
                multiple times.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added VF2 subgraph isomorphism algorithm (contributed by Flavio De
                Lorenzi).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;int128_type&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;uint128_type&lt;/span&gt;&lt;/code&gt; where available.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On platforms that are known to have standard floating point functions,
                don't use the automatic detection (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7221&quot;&gt;#7221&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7470&quot;&gt;#7470&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed GCC -Wshadow warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Experimental multiple allocation interface improved and changed again.
                Still unstable.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;ABI breaking&lt;/em&gt;: changed node pool
                allocators internals for improved efficiency.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7795&quot;&gt;#7795&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7174&quot;&gt;#7174&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7529&quot;&gt;#7529&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7815&quot;&gt;#7815&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed GCC -Wshadow warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt;&lt;/code&gt;
                keyword in several intrusive container constructors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Small documentation fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New character type detection algorithm for user defined types &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6786&quot;&gt;#6786&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation updates (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7582&quot;&gt;#7582&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7831&quot;&gt;#7831&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs with std::array &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7799&quot;&gt;#7799&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with -ftrapv and numeric to numeric conversions
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7814&quot;&gt;#7814&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/locale/&quot;&gt;Locale&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Security related bug fix, some invalid UTF-8 sequences where accepted
                as valid &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7743&quot;&gt;#7743&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Invalid Windows codepage names used &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7386&quot;&gt;#7386&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed missing documentation, caused by a error in Doxygen formatting
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7734&quot;&gt;#7734&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed missing std:: in some places &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7701&quot;&gt;#7701&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Spelling, grammar, typos fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7368&quot;&gt;#7368&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7762&quot;&gt;#7762&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7325&quot;&gt;#7325&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7415&quot;&gt;#7415&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7416&quot;&gt;#7416&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7183&quot;&gt;#7183&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7649&quot;&gt;#7649&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7694&quot;&gt;#7694&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4445&quot;&gt;#4445&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7492&quot;&gt;#7492&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed mistake in calculating pooled standard deviation in two-sample
                students t example &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7402&quot;&gt;#7402&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve complex acos/asin/atan, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7290&quot;&gt;#7290&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7291&quot;&gt;#7291&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve accuracy in some corner cases of cyl_bessel_j and gamma_p/gamma_q
                thanks to suggestions from Rocco Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve accuracy in Bessel J and Y with integer orders thanks to
                suggestions from Rocco Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/minmax/&quot;&gt;MinMax&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a misuse of the comma operator (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7752&quot;&gt;#7752&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the docs to fix broken link (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7751&quot;&gt;#7751&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better header segregation (bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6524&quot;&gt;#6524&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Small documentation fixes
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7830&quot;&gt;#7830&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7832&quot;&gt;#7832&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6366&quot;&gt;#6366&lt;/a&gt; Bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;contains&lt;/span&gt;&lt;/code&gt;
                      for polygon_90 type.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7678&quot;&gt;#7678&lt;/a&gt; multiple definitions of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;
                      &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;belongs&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(...)&lt;/span&gt;&lt;/code&gt;
                      by multiple &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Internal changes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      refactored point/segment/interval data/concept/traits.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      added unit tests for point and interval data/concept/traits.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      simplified &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      to operate only in 2D.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      removed point_3d data/concept/traits.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/random/&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Now compiles with exceptions disabled (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5399&quot;&gt;#5399&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/range/&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bug fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5603&quot;&gt;#5603&lt;/a&gt; the &amp;quot;range/any_range.hpp&amp;quot; header is not
                      self-sufficient
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6103&quot;&gt;#6103&lt;/a&gt; boost::range_detail vs. boost::range::range_detail
                      compiler error
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Documentation fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5160&quot;&gt;#5160&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5314&quot;&gt;#5314&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5440&quot;&gt;#5440&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5775&quot;&gt;#5775&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6212&quot;&gt;#6212&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7585&quot;&gt;#7585&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7843&quot;&gt;#7843&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7916&quot;&gt;#7916&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7926&quot;&gt;#7926&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7616&quot;&gt;#7616&lt;/a&gt;
                      br_mul::nan - warning C4293: '&amp;lt;&amp;lt;' : shift count negative
                      or too big, undefined behavior`.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
   Fixed Issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7744&quot;&gt;#7744&lt;/a&gt;,
          &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7644&quot;&gt;#7644&lt;/a&gt;.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/&quot;&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Glen Fernandes provided implementations of make_shared and
                      allocate_shared for arrays. They achieve a single allocation
                      for an array that can be initialized with constructor arguments
                      or initializer lists as well as overloads for default initialization
                      and no value initialization. See the '&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/make_shared_array.html&quot;&gt;make_shared
                      and allocate_shared for arrays&lt;/a&gt;' page for more information.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;
                      can now be used to hold a pointer to a dynamically allocated
                      array. This is accomplished by using an array type (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt;
                      or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;)
                      as the template parameter.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Smart pointers now use &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt;
                      &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt;
                      on C++11 compilers. This can break code that passes a smart
                      pointer to a function taking a &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt;,
                      or that returns a smart pointer from a function with a &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; return type. Please use
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;!=&lt;/span&gt;
                      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span class=&quot;special&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;p&lt;/span&gt;&lt;/code&gt; in such cases.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/string&quot;&gt;StringAlgo&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug where it wouldn't find overlapping patterns (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7784&quot;&gt;#7784&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disambiguated some calls to insert (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7346&quot;&gt;#7346&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Deprecated features since boost 1.53 will be available only
                      until boost 1.58.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      C++11 compliance: packaged_task&amp;lt;R&amp;gt; is deprecated, use
                      instead packaged_task&amp;lt;R()&amp;gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7537&quot;&gt;#7537&lt;/a&gt;
                      deprecate Mutex::scoped_lock and scoped_try_lock and boost::condition
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6270&quot;&gt;#6270&lt;/a&gt;
                      C++11 compliance: Add thread constructor from movable callable
                      and movable arguments
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7279&quot;&gt;#7279&lt;/a&gt;
                      C++11 compliance: Add noexcept in system related functions
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7280&quot;&gt;#7280&lt;/a&gt;
                      C++11 compliance: Add promise::...at_thread_exit functions
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7281&quot;&gt;#7281&lt;/a&gt;
                      C++11 compliance: Add ArgTypes to packaged_task template.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7282&quot;&gt;#7282&lt;/a&gt;
                      C++11 compliance: Add packaged_task::make_ready_at_thread_exit
                      function
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7412&quot;&gt;#7412&lt;/a&gt;
                      C++11 compliance: Add async from movable callable and movable
                      arguments
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7413&quot;&gt;#7413&lt;/a&gt;
                      C++11 compliance: Add async when the launch policy is deferred.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7414&quot;&gt;#7414&lt;/a&gt;
                      C++11 compliance: future::get post-condition should be valid()==false.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7422&quot;&gt;#7422&lt;/a&gt;
                      Provide a condition variable with zero-overhead performance
                      penality.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7444&quot;&gt;#7444&lt;/a&gt;
                      Async: Add make_future/make_shared_future.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7540&quot;&gt;#7540&lt;/a&gt;
                      Threads: Add a helper class that join a thread on destruction.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7541&quot;&gt;#7541&lt;/a&gt;
                      Threads: Add a thread wrapper class that joins on destruction.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7575&quot;&gt;#7575&lt;/a&gt;
                      C++11 compliance: A future created by async should &amp;quot;join&amp;quot;
                      in the destructor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7587&quot;&gt;#7587&lt;/a&gt;
                      Synchro: Add strict_lock and nested_strict_lock.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7588&quot;&gt;#7588&lt;/a&gt;
                      Synchro: Split the locks.hpp in several files to limit dependencies.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7590&quot;&gt;#7590&lt;/a&gt;
                      Synchro: Add lockable concept checkers based on Boost.ConceptCheck.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7591&quot;&gt;#7591&lt;/a&gt;
                      Add lockable traits that can be used with enable_if.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7592&quot;&gt;#7592&lt;/a&gt;
                      Synchro: Add a null_mutex that is a no-op and that is a model
                      of UpgardeLockable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7593&quot;&gt;#7593&lt;/a&gt;
                      Synchro: Add a externally_locked class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7590&quot;&gt;#7594&lt;/a&gt;
                      Threads: Allow to disable thread interruptions.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7464&quot;&gt;#7464&lt;/a&gt;
                      BOOST_TEST(n_alive == 1); fails due to race condition in a
                      regression test tool.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7657&quot;&gt;#7657&lt;/a&gt;
                      Serious performance and memory consumption hit if condition_variable
                      methods condition notify_one or notify_all is used repeatedly.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7665&quot;&gt;#7665&lt;/a&gt;
                      this_thread::sleep_for no longer uses steady_clock in thread.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7668&quot;&gt;#7668&lt;/a&gt;
                      thread_group::join_all() should check whether its threads are
                      joinable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7669&quot;&gt;#7669&lt;/a&gt;
                      thread_group::join_all() should catch resource_deadlock_would_occur.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7671&quot;&gt;#7671&lt;/a&gt;
                      Error including boost/thread.hpp header on iOS.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7672&quot;&gt;#7672&lt;/a&gt;
                      lockable_traits.hpp syntax error: &amp;quot;defined&amp;quot; token
                      misspelled.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7798&quot;&gt;#7798&lt;/a&gt;
                      boost::future set_wait_callback thread safety issues.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7808&quot;&gt;#7808&lt;/a&gt;
                      Incorrect description of effects for this_thread::sleep_for
                      and this_thread::sleep_until.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7812&quot;&gt;#7812&lt;/a&gt;
                      Returns: cv_status::no_timeout if the call is returning because
                      the time period specified by rel_time has elapsed, cv_status::timeout
                      otherwise.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7874&quot;&gt;#7874&lt;/a&gt;
                      compile warning: thread.hpp:342: warning: type attributes are
                      honored only at type definition.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7875&quot;&gt;#7875&lt;/a&gt;
                      BOOST_THREAD_THROW_IF_PRECONDITION_NOT_SATISFIED should not
                      be enabled by default.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7882&quot;&gt;#7882&lt;/a&gt;
                      wrong exception text from condition_variable::wait(unique_lock&amp;lt;mutex&amp;gt;&amp;amp;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7890&quot;&gt;#7890&lt;/a&gt;
                      thread::do_try_join_until() is missing a return type.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove support for the old pre-standard variadic pair constructors,
                and equality implementation. Both have been deprecated since Boost
                1.48.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                More internal implementation changes, including a much simpler implementation
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;/code&gt;, and removed
                more deprecated config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;a href=&quot;http://www.boost.org/libs/utility/doc/html/string_ref.html&quot;&gt;string_ref&lt;/a&gt;,
                a non-owning reference to a contiguous sequence of characters.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added rvalue constructors and rvalue assignment operators (for C++11
                compatible compilers only). Library now can be used with move-only
                types (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7620&quot;&gt;#7620&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7718&quot;&gt;#7718&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Accomodate recent smart pointer changes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7809&quot;&gt;#7809&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/tools/build/index.html&quot;&gt;Boost Build System&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Qt5 toolset
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                improved rcc support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7576&quot;&gt;#7576&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.1.2, 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang: 2.8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang, with libc++: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cray: 4.6.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang, with libc++: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.1, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.9
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++11 mode: 13.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age:
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: V12.1.0.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.52.0</title><link>http://www.boost.org/users/history/version_1_52_0.html</link><guid>http://www.boost.org/users/history/version_1_52_0.html</guid><pubDate>Mon, 5 Nov 2012 08:05:58 -0800</pubDate><description>



  &lt;div id=&quot;version_1_52_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix long-standing dependency tracking bug, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7409&quot;&gt;#7409&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_SFINAE_EXPR&lt;/span&gt;&lt;/code&gt;
                for gcc-4.4, since the support was found to be too buggy.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5980&quot;&gt;#5980&lt;/a&gt; Enhance chrono I/O with H. Hinnant proposal &lt;a href=&quot;http://home.roadrunner.com/~hinnant/bloomington/chrono_io.html&quot;&gt;proposal&lt;/a&gt;
                      which has the advantage to provide I/O for system clocks using
                      the Gregorian Calendar.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5981&quot;&gt;#5981&lt;/a&gt; Add i/o state savers for duration and time_point formatting
                      state.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7059&quot;&gt;#7059&lt;/a&gt; Add low level i/o facilities.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The chrono i/o version included in Boost.Chrono 1.2.x has been
                      completly refactored in version 2.0.0
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The manipulators &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_short&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_long&lt;/span&gt;&lt;/code&gt;
                      are depreceated. You should use the parameterized form &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_fmt&lt;/span&gt;&lt;/code&gt; or the renamed
                      manipulators &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_symbol&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_prefix&lt;/span&gt;&lt;/code&gt;
                      instead.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_punct&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; facet is deprecated.
                      You should use the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__get_duration_style&lt;/span&gt;&lt;/code&gt;
                      free function to get the informations and use the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_units&lt;/span&gt;&lt;/code&gt; facet for
                      localization purposes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      When &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_CHRONO_VERSION&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;
                      the preceding deprecated functions are not available.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7381&quot;&gt;#7381&lt;/a&gt; C++11 compliance: unresolved symbol when assigning
                      a constexpr duration to a non-const local variable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7479&quot;&gt;#7479&lt;/a&gt;
                      Compile fails with compilers supporting constexpr fails if
                      the standard library doesn't provides the constexpr interface
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Would not fix:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6871&quot;&gt;#6871&lt;/a&gt; chrono_io.hpp: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;...)&lt;/span&gt;&lt;/code&gt;
                      modifies the state of os. The neww io interface provided in
                      version 2 solves this issue. You should move to the new version.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;stable_vector&lt;/span&gt;&lt;/code&gt;'s
                template code bloat and type safety.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed typedefs and reordered functions of sequence containers to
                improve doxygen documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6615&quot;&gt;#6615&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7139&quot;&gt;#7139&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7215&quot;&gt;#7215&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7232&quot;&gt;#7232&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7269&quot;&gt;#7269&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7439&quot;&gt;#7439&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented LWG Issue #149 (range insertion now returns an iterator)
                &amp;amp; cleaned up insertion code in most containers
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Corrected aliasing errors.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/date_time/&quot;&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Document &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_DATE_TIME_NO_LIB&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6077&quot;&gt;#6077&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;nth_as_str&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7022&quot;&gt;#7022&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7234&quot;&gt;#7234&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/foreach/&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix alignment warning on gcc.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/function/&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Move constructors and move assignment operators added (only for compilers
                with C++11 rvalue references support) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7330&quot;&gt;#7330&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6950&quot;&gt;#6950&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7226&quot;&gt;#7226&lt;/a&gt;,&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7308&quot;&gt;#7308&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7327&quot;&gt;#7327&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7338&quot;&gt;#7338&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7341&quot;&gt;#7341&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7378&quot;&gt;#7378&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7380&quot;&gt;#7380&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7398&quot;&gt;#7398&lt;/a&gt;, and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7428&quot;&gt;#7428&lt;/a&gt;, plus others
                not in Trac.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restore &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt;&lt;/code&gt; support,
                which was accidentally removed in the last version (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7437&quot;&gt;#7437&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New floating point hasher - will hash the binary representation on
                more platforms, which should be faster.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shrink_by&lt;/span&gt;&lt;/code&gt; and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;advise&lt;/span&gt;&lt;/code&gt; functions
                in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mapped_region&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;ABI breaking:&lt;/em&gt; Reimplemented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;message_queue&lt;/span&gt;&lt;/code&gt; with a circular buffer
                index (the old behavior used an ordered array, leading to excessive
                copies). This should greatly increase performance but breaks ABI.
                Old behaviour/ABI can be used undefining macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_MSG_QUEUE_CIRCULAR_INDEX&lt;/span&gt;&lt;/code&gt;
                in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;interprocess&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;workaround&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;message_queue&lt;/span&gt;&lt;/code&gt;
                insertion time avoiding priority search for common cases (both array
                and circular buffer configurations).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;interproces_sharable_mutex&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;interproces_condition_any&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;offset_ptr&lt;/span&gt;&lt;/code&gt;
                performance.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added integer overflow checks.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iterator/&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5825&quot;&gt;#5825&lt;/a&gt; constructing function_input_iterator without consuming
                      an item
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7194&quot;&gt;#7194&lt;/a&gt; Error in documentation of make_function_input_iterator
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Breaking changes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Due to the fix for &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5825&quot;&gt;#5825&lt;/a&gt;, a function_input_iterator will
                      no longer make unnecessary invokations to the wrapped nullary
                      function. For example, constructing an end iterator will now
                      not trigger an invokation; and dereferencing-and-incrementing
                      an iterator N times will trigger N invokations, not N+1 as
                      before. User code that relied on the old behavior will need
                      to be adjusted.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restored compilation on MSVC-2003 (was broken in 1.51.0) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7255&quot;&gt;#7255&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;CharType&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; function overload. &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6663&quot;&gt;#6663&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7228&quot;&gt;#7228&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Airy functions and Jacobi Elliptic functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In several distributions (particulary the Students T) corrected moments
                for small degrees of freedom &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7177&quot;&gt;#7177&lt;/a&gt;
                (reported by Thomas Mang).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Corrected failure to detect bad parameters in many distributions
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6934&quot;&gt;#6934&lt;/a&gt;
                (reported by Florian Schoppmann) by adding a function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;check_out_of_range&lt;/span&gt;&lt;/code&gt; to test many
                possible bad parameters. This test revealed several distributions
                where the checks for bad parameters were ineffective, and these have
                been rectified.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issue in Hankel functions that causes incorrect values to be
                returned for &lt;em&gt;x &amp;lt; 0&lt;/em&gt; and &lt;em&gt;ν&lt;/em&gt;
                odd, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7135&quot;&gt;#7135&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In non-central T permitted infinite degrees of freedom &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7259&quot;&gt;#7259&lt;/a&gt;
                implemented using the normal distribution (requested by Thomas Mang).
                Also much enhanced accuracy for large degrees of freedom and/or large
                non-centrality parameters by switching to use the Students t distribution
                (or Normal distribution for infinite degrees of freedom) centered
                at delta, when delta / (4 * v) &amp;lt; epsilon for the floating-point
                type in use. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7259&quot;&gt;#7259&lt;/a&gt;.
                It was also found that the incomplete beta was suffering from serious
                cancellation errors when degrees of freedom was very large. (That
                has now been fixed in our code, but any code based on Didonato and
                Morris's original papers (probably every implementation out there
                actually) will have the same issue).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed minor issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6517&quot;&gt;#6517&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6362&quot;&gt;#6362&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7053&quot;&gt;#7053&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2693&quot;&gt;#2693&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6937&quot;&gt;#6937&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7099&quot;&gt;#7099&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/phoenix/&quot;&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make Phoenix work with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;-based
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Included Voronoi diagram extensions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Introduced new Segment concept.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation issues.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The data parameter to primitive transforms can now optionally have
                slots indexed by key.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Primitive transforms can now operatate on temporary expressions that
                are non-const qualified.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add callable function object types for the free functions in &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and also for some Boost.Range
                functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Boost.MPL algorithms work on Proto expression nodes.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pass_through&lt;/span&gt;&lt;/code&gt; primitive transform
                now accepts an optional &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Domain&lt;/span&gt;&lt;/code&gt;
                template parameter for specifying the target domain of the resulting
                expression.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Replace the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;short_name&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;long_name&lt;/span&gt;&lt;/code&gt;
                      functions by symbol and prefix functions respectively.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;short_name&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;long_name&lt;/span&gt;&lt;/code&gt;
                      are deprecated. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;symbol&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;prefix&lt;/span&gt;&lt;/code&gt;
                      respectively. These functions be removed in 1.55.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7478&quot;&gt;#7478&lt;/a&gt;
                      Compiles fails with compilers supporting char16_t and char32_t
                      fails if the library doesn't provides std::u16string and std::u32string.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/utility.htm#result_of&quot;&gt;Result_of&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Switch &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt; on compilers for which
                support is deemed &amp;quot;good enough&amp;quot;. That means if the compiler
                implements &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf&quot;&gt;n3276&lt;/a&gt;.
                (For now, that only includes very recent versions of clang.)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; is now &amp;quot;sfinae-friendly&amp;quot;
                when it uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;.
                See &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3436.html&quot;&gt;n3436&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated Features&lt;/em&gt;: Deprecated
                features since boost 1.50 available only until boost 1.55. These
                deprecated features will be provided by default up to boost 1.52.
                If you don't want to include the deprecated features you could define
                BOOST_THREAD_DONT_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0. Since
                1.53 these features will not be included any more by default. Since
                this version, if you want to include the deprecated features yet
                you could define BOOST_THREAD_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0.
                These deprecated features will be only available until boost 1.55,
                that is you have yet 1 year to move to the new features.
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Time related functions don't using the Boost.Chrono library,
                      use the chrono overloads instead.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Breaking changes when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THREAD_VERSION&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;
                (Default value since Boost 1.53): There are some new features which
                share the same interface but with different behavior. These breaking
                features are provided by default when BOOST_THREAD_VERSION is 3,
                but the user can however choose the version 2 behavior by defining
                the corresponding macro. As for the deprecated features, these broken
                features will be only available until boost 1.55.
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6229&quot;&gt;#6229&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: Rename the
                      unique_future to future following the c++11.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6266&quot;&gt;#6266&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: thread destructor
                      should call terminate if joinable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6269&quot;&gt;#6269&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: thread move
                      assignment should call terminate if joinable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4710&quot;&gt;#4710&lt;/a&gt; C++11 compliance: Missing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7283&quot;&gt;#7283&lt;/a&gt; C++11 compliance: Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;notify_all_at_thread_exit&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7345&quot;&gt;#7345&lt;/a&gt; C++11 compliance: Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                      to recursive mutex &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;try_lock&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2361&quot;&gt;#2361&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread_specific_ptr&lt;/span&gt;&lt;/code&gt;:
                      document nature of the key, complexity and rationale.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2797&quot;&gt;#2797&lt;/a&gt; Two problems with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread_specific_ptr&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5274&quot;&gt;#5274&lt;/a&gt; failed to compile &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      with stlport 5.1.5 under msvc8.1, because of undefined class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5431&quot;&gt;#5431&lt;/a&gt; compile error in Windows CE 6.0(interlocked).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5752&quot;&gt;#5752&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;call_once&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; is unreliable on some platforms.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7045&quot;&gt;#7045&lt;/a&gt; Thread library does not automatically compile date_time.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7173&quot;&gt;#7173&lt;/a&gt; wrong function name &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;interrupt_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7200&quot;&gt;#7200&lt;/a&gt; Unable to build boost.thread modularized.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7220&quot;&gt;#7220&lt;/a&gt; gcc 4.6.2 warns about inline+dllimport functions.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7238&quot;&gt;#7238&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;sleep_for&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; does not respond to interrupt().
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7245&quot;&gt;#7245&lt;/a&gt; Minor typos on documentation related to version 3.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7272&quot;&gt;#7272&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;win32&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread_primitives&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;:
                      (Unneccessary) Warning.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7284&quot;&gt;#7284&lt;/a&gt; Clarify that there is no access priority between lock
                      and shared_lock on shared mutex.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7329&quot;&gt;#7329&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      does not compile on HPUX.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7336&quot;&gt;#7336&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THREAD_DONT_USE_SYSTEM&lt;/span&gt;&lt;/code&gt;
                      doesn't work.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7349&quot;&gt;#7349&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;packaged_task&lt;/span&gt;&lt;/code&gt;
                      holds reference to temporary.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7350&quot;&gt;#7350&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_destructor&lt;/span&gt;&lt;/code&gt;
                      does not destroy object
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/ublas/&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                improved performance of inplace_solve (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4024&quot;&gt;#4024&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                fixed coordinate_matrix for use with gcc 4.7 (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7363&quot;&gt;#7363&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                In assignment, reuse existing nodes where possible.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bugs when erasing ranges (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7471&quot;&gt;#7471&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some work on the implementation.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/uuid/&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6118&quot;&gt;#6118&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6788&quot;&gt;#6788&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7375&quot;&gt;#7375&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7128&quot;&gt;#7128&lt;/a&gt; - fixed bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                for messages longer than 536,870,912 bytes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sub_match&lt;/span&gt;&lt;/code&gt; work
                with Boost.Range. Fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7237&quot;&gt;#7237&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_52_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang: 2.8
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cray: 8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang:
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2, 4.6.3, 4.7.0, 4.7.1, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.9
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age: 10.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: V12.1.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun: 5.10
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_52_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.51.0</title><link>http://www.boost.org/users/history/version_1_51_0.html</link><guid>http://www.boost.org/users/history/version_1_51_0.html</guid><pubDate>Mon, 20 Aug 2012 16:00:21 -0700</pubDate><description>



  &lt;div id=&quot;version_1_51_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
  Context switching library,
          from Oliver Kowalke.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_51_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_sorted_until&lt;/span&gt;&lt;/code&gt;
                ; now matches the c++11 standard behavior on ranges with duplicate
                values.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added range support for the rest of the search algorithms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unhex&lt;/span&gt;&lt;/code&gt; now uses Boost.Exception
                to signal bad input.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an incompatibility between &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iostream&lt;/span&gt;&lt;/code&gt;
                and C++11 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7162&quot;&gt;#7162&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Decorated GCC attribute names with underscores to prevent interaction
                with user-defined macros (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6415&quot;&gt;#6415&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;
                &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cctype&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, needed for some versions of
                MinGW.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use &lt;tt&gt;gcc&lt;/tt&gt;'s atomic builtins on ARM CPUs,
                when available (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7140&quot;&gt;#7140&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed strand destruction to be a no-op, to allow strand objects
                to be destroyed after their associated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                has been destroyed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for some newer versions of glibc which provide the
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_create1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                function but always fail with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ENOSYS&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7012&quot;&gt;#7012&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the SSL implementation to throw an exception if SSL engine
                initialisation fails (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6303&quot;&gt;#6303&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed another regression in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;buffered_write_stream&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6310&quot;&gt;#6310&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented various minor performance improvements, primarily targeted
                at Linux x86 and x86-64 platforms.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Deprecated a whole bunch of macros that were c++11 specific, but
                not named to show that they were c++11 specific. Made new macros
                with better names, and paired the old macros with the new ones. Updated
                the documentation to list the deprecated macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6918&quot;&gt;#6918&lt;/a&gt;
                Boost Chrono compilation failure on HP uX due to undefined pthread_getcpuclockid.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6241&quot;&gt;#6241&lt;/a&gt;
                boost::chrono compilation problems without std::wstring support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6987&quot;&gt;#6987&lt;/a&gt;
                Documentation &amp;amp; C++11.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7041&quot;&gt;#7041&lt;/a&gt;
                time_point.hpp depends on Boost.System.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7042&quot;&gt;#7042&lt;/a&gt;
                Avoiding time_point and duration dependency on time.h and CLOCK_REALTIME.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7058&quot;&gt;#7058&lt;/a&gt;
                Make it work when BOOST_NO_EXCEPTIONS is defined.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7069&quot;&gt;#7069&lt;/a&gt;
                Misspellings in clock_string&amp;lt;thread_clock&amp;gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7081&quot;&gt;#7081&lt;/a&gt;
                WinError.h capitalization in boost/detail/win/basic_types.hpp.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                points accessed through a pointer (e.g. in a linestring) should now
                be specialized without the pointer. In previous versions a type
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;/code&gt; used like
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;linestring&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt;
                had to be specalized like: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt;.
                Now the library itself removes the pointer before calling the traits
                class, so now it should be like: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                intersection was sometimes wrong for integer points, fixed
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                documentation, order of parameters in simplify was wrong, fixed
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7030&quot;&gt;7030&lt;/a&gt;
                spherical distance, fixed (by patch of Karsten Ahnert)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Refactored support for internal and bundled properties in Boost.Graph-provided
                graph types, and cleaned up named parameter functionality:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Enabled old-style (non-bundled) internal properties in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compressed_sparse_row_graph&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bundled properties should work correctly for all graph types
                      and adaptors.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6993&quot;&gt;#6993&lt;/a&gt;: Typo Bundled Properties document
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7002&quot;&gt;#7002&lt;/a&gt;: Problem with initialization of CSR bidirectional
                      graph
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7023&quot;&gt;#7023&lt;/a&gt;: Enclose internal type graphml_reader in anonymous
                      namespace
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Other bugs and warnings not in Trac
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support the standard smart pointers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;hash_value&lt;/span&gt;&lt;/code&gt; now implemented
                using SFINAE to avoid implicit casts to built in types when calling
                it.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better performance, less memory usage for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;character_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;character_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; conversions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug with volatile input parameter &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7157&quot;&gt;#7157&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;MSM&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for boost::any &lt;a href=&quot;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s03.html#any-event&quot;&gt;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s03.html#any-event&lt;/a&gt;
                or kleene &lt;a href=&quot;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s04.html#kleene-event&quot;&gt;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s04.html#kleene-event&lt;/a&gt;
                as acceptable events
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: compiler error with fsm internal table and none (compound)
                event.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: euml::defer_ leading to stack overflow.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Proto transforms get pseudo-parameter pack expansion support for
                unpacking expressions. See the &lt;a href=&quot;http://www.boost.org/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_51&quot;&gt;Release
                Notes&lt;/a&gt; for more information.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7075&quot;&gt;#7075&lt;/a&gt;
                Workaround for error: the type of partial specialization template
                parameter constant &amp;quot;n1&amp;quot; depends on another template parameter.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4258&quot;&gt;#4258&lt;/a&gt;
                Linking with boost thread does not work on mingw/gcc 4.5.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4885&quot;&gt;#4885&lt;/a&gt;
                Access violation in set_tss_data at process exit due to invalid assumption
                about TlsAlloc.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6931&quot;&gt;#6931&lt;/a&gt;
                mutex waits forwever with Intel Compiler and /debug:parallel
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7044&quot;&gt;#7044&lt;/a&gt;
                boost 1.50.0 header missing.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7052&quot;&gt;#7052&lt;/a&gt;
                Thread: BOOST_THREAD_PROVIDES_DEPRECATED_FEATURES_SINCE_V3_0_0 only
                masks thread::operator==, thread::operator!= forward declarations,
                not definitions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7066&quot;&gt;#7066&lt;/a&gt;
                An attempt to fix current_thread_tls_key static initialization order.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7074&quot;&gt;#7074&lt;/a&gt;
                Multiply defined symbol boost::allocator_arg.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7078&quot;&gt;#7078&lt;/a&gt;
                Trivial 64-bit warning fix on Windows for thread attribute stack
                size
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7089&quot;&gt;#7089&lt;/a&gt;
                BOOST_THREAD_WAIT_BUG limits functionality without solving anything
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix construction/destruction issue when using a C++11 compiler with
                a C++03 allocator (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7100&quot;&gt;#7100&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove a &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;&lt;/code&gt; to support compiling without
                exceptions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Adjust SFINAE use to try to supprt g++ 3.4 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7175&quot;&gt;#7175&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Work around buggy wide ctype facet on cygwin and mingw.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Work around absence of __isctype on some glibc implementations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;as&lt;/span&gt;&lt;/code&gt; shouldn't assume &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;/code&gt; != &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix assertion in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_regex_traits&lt;/span&gt;&lt;/code&gt;
                on libc++, thanks to John Fletcher.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_51_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2, 4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang 2.8
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang: 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.4, 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.0, 4.7.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.4, 4.5.3, 4.6.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.9
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age: 10.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.6.3, 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: V12.1.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun: 5.10
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_51_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.50.0</title><link>http://www.boost.org/users/history/version_1_50_0.html</link><guid>http://www.boost.org/users/history/version_1_50_0.html</guid><pubDate>Thu, 28 Jun 2012 08:48:57 -0400</pubDate><description>



  &lt;div id=&quot;version_1_50_0.patches&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Patches&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_50_0/001-unordered.patch&quot;&gt;Boost.Unordered patch&lt;/a&gt;
          - Fixes a bug when compiled using a C++11 compiler, but with a C++03 allocator.
          When inserting elements, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
          detects that the node can be constructed using an accidental implicit conversion
          which causes several problems.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;div id=&quot;version_1_50_0.patches.new_libraries&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
  A collection of
            useful generic algorithms, from Marshall Clow. This includes several
            different searching algorithms, as well as most of the new algorithms
            from the C++11 standard library
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/overloaded_function/&quot;&gt;Functional/OverloadedFunction&lt;/a&gt;:&lt;/span&gt;
  Overload
            different functions into a single function object, from Lorenzo Caminiti.
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/local_function/&quot;&gt;LocalFunction&lt;/a&gt;:&lt;/span&gt;
  Program
            functions locally, within other functions, directly within the scope
            where they are needed, from Lorenzo Caminiti.
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/identity_type/&quot;&gt;Utility/IdentityType&lt;/a&gt;:&lt;/span&gt;
  Wrap
            types within round parenthesis so they can always be passed as macro
            parameters, from Lorenzo Caminiti.
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div id=&quot;version_1_50_0.patches.updated_libraries&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  add missing &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;
                  &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6702&quot;&gt;#6702&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  work around for msvc which allows ctor templates to be copy ctors,
                  fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6535&quot;&gt;#6535&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  shorten filenames to meet boost guidelines, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6196&quot;&gt;#6196&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/array/&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  add support for Boost.Hash &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6791&quot;&gt;#6791&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;
                  backend to do lazy registration for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EPOLLOUT&lt;/span&gt;&lt;/code&gt;
                  events.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;
                  handling of out-of-band data, which was broken by an incomplete
                  fix in the last release.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed Asio's SSL wrapper to respect OpenSSL's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;OPENSSL_NO_ENGINE&lt;/span&gt;&lt;/code&gt;
                  feature test &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#define&lt;/span&gt;&lt;/code&gt;
                  (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6432&quot;&gt;#6432&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;object_handle&lt;/span&gt;&lt;/code&gt; so that it works
                  with Windows compilers that support C++11 move semantics (such
                  as &lt;tt&gt;g++&lt;/tt&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Improved the performance of strand rescheduling.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added support for &lt;tt&gt;g++&lt;/tt&gt; 4.7 when compiling in
                  C++11 mode (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6620&quot;&gt;#6620&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed a problem where &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal_set&lt;/span&gt;&lt;/code&gt;
                  handlers were not being delivered when the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                  was constructed with a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;concurrency_hint&lt;/span&gt;&lt;/code&gt;
                  of 1 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6657&quot;&gt;#6657&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/bimap/&quot;&gt;Bimap&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Remove spurious dependency on Boost.Serialization, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3868&quot;&gt;#3868&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Solve unused constructor parameter warning, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5749&quot;&gt;#5749&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add key_type and mapped_type (leaving data_type for backward compatibility)
                  typedefs to map views, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6031&quot;&gt;#6031&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6361&quot;&gt;#6361&lt;/a&gt;
                        integer overflow in boost::chrono::process_real_cpu_clock::now()
                        under Windows 32bits.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6628&quot;&gt;#6628&lt;/a&gt;
                        compiler warning in process_cpu_clocks.hpp.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6666&quot;&gt;#6666&lt;/a&gt;
                        thread_clock.hpp needs pthread.h.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/concept_check/&quot;&gt;Concept Check&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6738&quot;&gt;#6738&lt;/a&gt;
                        Shadowed variable warning.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/filesystem/&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Remove Filesystem Version 2 from the distribution. Version 3 is
                  now the only distributed version. Those still using V2 are urged
                  to migrate to V3 as soon as possible.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add constexpr value_type preferred_separator to class path.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5118&quot;&gt;#5118&lt;/a&gt;,
                  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;replace_extension&lt;/span&gt;&lt;/code&gt;
                  doesn't work as specified in documentation. The documentation,
                  implementation, and test cases have all had fixes applied. The
                  documentation had failed to mention that any existing extension
                  is removed. The behavior for simple cases has been reverted to
                  the Version 2 behavior, but with corrections so that complex replacements
                  now work. Two test cases from &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5118&quot;&gt;#5118&lt;/a&gt;
                  have been added.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3737&quot;&gt;#3737&lt;/a&gt;,
                  Boost.Filesystem does not compile on Windows Mobile. On Windows,
                  &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; is no longer included.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4065&quot;&gt;#4065&lt;/a&gt;,
                  Boost Filesystem lexicographic path comparison inconsistent. This
                  required multiple source code bug fixes and code cleanup, correcting
                  problems not related to lexicographical issues.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add class path member function compare for consistency with std::string.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Tighten &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FILESYSTEM_DYN_LINK&lt;/span&gt;&lt;/code&gt;
                  and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FILESYSTEM_STATIC_LINK&lt;/span&gt;&lt;/code&gt;
                  logic in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;filesystem&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                  so that one or the other is always defined, and both being defined
                  is a &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#error&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6690&quot;&gt;#6690&lt;/a&gt;
                  and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6737&quot;&gt;#6737&lt;/a&gt;,
                  resolving static linking related problems with VC++ 8 through 11.
                  Note that this fix may reintroduce codecvt thread safety problems
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4889&quot;&gt;#4889&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6320&quot;&gt;#6320&lt;/a&gt;,
                  for these compilers if static linking is used.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;+=&lt;/span&gt;&lt;/code&gt;
                  and concat functions to tack on things like suffixes or numbers.
                  Suggested by Ed Smith-Rowland and others.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6809&quot;&gt;#6809&lt;/a&gt;,
                  Implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;filesystem&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; method for MS Windows is wrong,
                  by adding &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;MOVEFILE_COPY_ALLOWED&lt;/span&gt;&lt;/code&gt;
                  to deal with renames across drives, volumes, file systems. Fix
                  has no effect on non-Windows systems.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6819&quot;&gt;#6819&lt;/a&gt;,
                  A path operand with a source that was a one character array was
                  treated as empty, even if it wasn't empty. Such arrays can occur
                  in unions or in code using C variable length array idioms.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6932&quot;&gt;#6932&lt;/a&gt;,
                  create_directories throws exception even if &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt;
                  is specified.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/foreach/&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Revert fix for &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6131&quot;&gt;#6131&lt;/a&gt;
                  which caused more harm than good.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        the return type of comparable projected point strategy for
                        integer points was wrong (integer), fixed
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        several robustness issues in intersection of segments and
                        polygons, fixed
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        invalid intersection output is filtered out
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        disjoint for multi_polygon's might incorrectly return true,
                        fixed
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Solved tickets
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6585&quot;&gt;6585&lt;/a&gt;
                        patch for alternative syntax multipoint, applied
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6584&quot;&gt;6584&lt;/a&gt;
                        patch for bug in distance, applied
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5730&quot;&gt;5730&lt;/a&gt;
                        same issue as 6584, fixed
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6166&quot;&gt;6166&lt;/a&gt;
                        patch for missing transformation, applied
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6696&quot;&gt;6696&lt;/a&gt;
                        invalid intersection output, was (by chance) already fixed
                        in Trunk before reported
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Additional functionality
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        added algorithm &amp;quot;touches&amp;quot; (OGC SF compliant) for
                        *polygon/*polygon
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4622&quot;&gt;#4622&lt;/a&gt;
                        clear_vertex on a vertex with a self-loop can cause a segmentation
                        fault.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6033&quot;&gt;#6033&lt;/a&gt;
                        Lowpoint map calculated by biconnected_components(...) is
                        sometimes wrong.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6242&quot;&gt;#6242&lt;/a&gt;
                        isomorphism doesn't reset mapping.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6435&quot;&gt;#6435&lt;/a&gt;
                        cube_topology documentation should say 3D, not 2D.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6520&quot;&gt;#6520&lt;/a&gt;
                        small_world_1_70_6_0p02.png is broken in documentation of
                        graph_parallel.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6564&quot;&gt;#6564&lt;/a&gt;
                        BGL copy constructor for subgraph does not track local vertices/edges.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6573&quot;&gt;#6573&lt;/a&gt;
                        BGL: boost::isomorphism routine fails with large graphs.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6583&quot;&gt;#6583&lt;/a&gt;
                        Dijkstra Visitor Concept docs probably show wrong type for
                        variable.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6647&quot;&gt;#6647&lt;/a&gt;
                        BGL strong_components do not compile on MSVC 8.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6656&quot;&gt;#6656&lt;/a&gt;
                        Dependent type in subgraph used without typename.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6707&quot;&gt;#6707&lt;/a&gt;
                        is_straight_line_drawing.hpp missing #include &amp;lt;map&amp;gt;.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6708&quot;&gt;#6708&lt;/a&gt;
                        Make bool boost::intersects() in is_straight_line_drawing.hpp
                        inline?
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6739&quot;&gt;#6739&lt;/a&gt;
                        Cannot use write_graphviz_dp with a constified subgraph.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6858&quot;&gt;#6858&lt;/a&gt;
                        boost::get() calls wrongly resolved by g++.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6892&quot;&gt;#6892&lt;/a&gt;
                        VertexIndexGraph concept not required for bron_kerbosch_all_cliques().
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Other bugs and warnings not in Trac.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Support &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tuple&lt;/span&gt;&lt;/code&gt;
                  when available (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6806&quot;&gt;#6806&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Avoid gcc's &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wfloat&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;equal&lt;/span&gt;&lt;/code&gt;
                  warning (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6771&quot;&gt;#6771&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add deprecation warning to the long deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;container_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iostreams/&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Improved gzip support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5908&quot;&gt;#5908&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Update tests for latest Boost.Filesystem and Boost.Test.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix some documentation errors (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6530&quot;&gt;#6530&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6650&quot;&gt;#6650&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iterator/&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5127&quot;&gt;#5127&lt;/a&gt;
                        Incorrect result_of usage in transform_iterator
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5697&quot;&gt;#5697&lt;/a&gt;
                        iterator_facade::operator-&amp;gt; is broken for proxy references
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_array/&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Concepts bug fix and Workaround for Visual Studio 2010 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4874&quot;&gt;#4874&lt;/a&gt;)
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix to assert.cpp test case (&lt;a href=&quot;https://svn.boost.org/trac/boost/changeset/78498&quot;&gt;Patch&lt;/a&gt;)
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_lexical_cast&lt;/span&gt;&lt;/code&gt; exception is
                  now globaly visible and can be catched even if code is compiled
                  with -fvisibility=hidden
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Now it is possible to compile and use library with disabled exceptions
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5800&quot;&gt;#5800&lt;/a&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Better performance, less memory usage and bugfixes for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator_range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;character_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt;
                  conversions
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed bugs and warnings: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6645&quot;&gt;#6645&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6562&quot;&gt;#6562&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6812&quot;&gt;#6812&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6852&quot;&gt;#6852&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6717&quot;&gt;#6717&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6670&quot;&gt;#6770&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6504&quot;&gt;#6504&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/locale/&quot;&gt;Locale&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed build issues with STLPort library
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Boost.System is now required depenency
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6635&quot;&gt;#6635&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6833&quot;&gt;#6833&lt;/a&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Promoted math constants to be 1st class citizens, including convenient
                  access to the most widely used built-in float, double, long double
                  via three namespaces.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added the Owen's T function and Skew Normal distribution written
                  by Benjamin Sobotta.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added Hankel functions.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Corrected issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6627&quot;&gt;#6627
                  nonfinite_num_put formatting of 0.0 is incorrect&lt;/a&gt; based
                  on a patch submitted by K R Walker.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed constant initialization mechanism so that it is thread
                  safe even for user-defined types, also so that user defined types
                  get the full precision of the constant, even when &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&lt;/code&gt;
                  does not. So for example 128-bit rational approximations will work
                  with UDT's and do the right thing, even though &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;
                  &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&lt;/code&gt; may be only 64 or
                  80 bits.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed issue in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bessel_jy&lt;/span&gt;&lt;/code&gt;
                  which causes Y[sub 8.5](4[pi]) to yield a NaN.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;MSM&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  eUML : better syntax for front-ends defined with eUML as transition
                  table only. Caution: Breaking Change!&lt;a href=&quot;http://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table&quot;&gt;http://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table&lt;/a&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: graph building was only working if initial_state defined
                  as a sequence.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: flags defined for a Terminate or Interrupt state do not
                  break the blocking function of these states any more.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: multiple deferred events from several regions were not
                  working in every case.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: visitor was passed by value to submachines.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: no_transition was not called for submachines who send an
                  event to themselves.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed warnings with gcc.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/program_options/&quot;&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Improved error reporting (&lt;a href=&quot;https://svn.boost.org/trac/boost/changeset/77827&quot;&gt;Patch
                  from Leo Goodstadt&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Support for customizing name of option's value in help messages
                  (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4781&quot;&gt;#4781&lt;/a&gt;)
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed compilation with gcc 4.7 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6790&quot;&gt;#6790&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_map/&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6539&quot;&gt;#6539&lt;/a&gt;
                        the return type of get() is not documented correctly.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6721&quot;&gt;#6721&lt;/a&gt;
                        property_map_traits documentation does not mention reference.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;-based
                  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; if and
                  only if the compiler implements N3276.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  For C++11, force parameter to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;eval_if_c&lt;/span&gt;&lt;/code&gt;
                  and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;if_c&lt;/span&gt;&lt;/code&gt; to be &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Disable &lt;tt&gt;'__forceinline not inlined'&lt;/tt&gt; warning
                  on msvc.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6498&quot;&gt;#6498&lt;/a&gt;
                        boost::ratio won't compile with default settings.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/scope_exit/&quot;&gt;ScopeExit&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  New Features:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Use variadic macros to specify captures as commas-separated
                        lists (but kept preprocessor sequence syntax for backward
                        compatibility).
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Capture the object in scope using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;this_&lt;/span&gt;&lt;/code&gt;.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Support empty captures using &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/code&gt;.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Implicit lambda-like captures using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_SCOPE_EXIT_ALL&lt;/span&gt;&lt;/code&gt;
                        on compilers that support C++11 lambda functions.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  New Features:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1850&quot;&gt;#1850&lt;/a&gt;
                        Request for unlock_guard to compliment lock_guard.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2637&quot;&gt;#2637&lt;/a&gt;
                        Request for shared_mutex duration timed_lock and timed_lock_shared.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2741&quot;&gt;#2741&lt;/a&gt;
                        Proposal to manage portable and non portable thread attributes.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3567&quot;&gt;#3567&lt;/a&gt;
                        Request for shared_lock_guard.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6194&quot;&gt;#6194&lt;/a&gt;
                        Adapt to Boost.Move.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6195&quot;&gt;#6195&lt;/a&gt;
                        c++11 compliance: Provide the standard time related interface
                        using Boost.Chrono.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6217&quot;&gt;#6217&lt;/a&gt;
                        Enhance Boost.Thread shared mutex interface following Howard
                        Hinnant proposal.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6224&quot;&gt;#6224&lt;/a&gt;
                        c++11 compliance: Add the use of standard noexcept on compilers
                        supporting them.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6226&quot;&gt;#6226&lt;/a&gt;
                        c++11 compliance: Add explicit bool conversion from locks.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6228&quot;&gt;#6228&lt;/a&gt;
                        Add promise constructor with allocator following the standard
                        c++11.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6230&quot;&gt;#6230&lt;/a&gt;
                        c++11 compliance: Follows the exception reporting mechanism
                        as defined in the c++11.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6266&quot;&gt;#6266&lt;/a&gt;
                        Breaking change: thread destructor should call terminate
                        if joinable.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6269&quot;&gt;#6269&lt;/a&gt;
                        Breaking change: thread move assignment should call terminate
                        if joinable.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6272&quot;&gt;#6272&lt;/a&gt;
                        c++11 compliance: Add thread::id hash specialization.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6273&quot;&gt;#6273&lt;/a&gt;
                        c++11 compliance: Add cv_status enum class and use it on
                        the conditions wait functions.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6231&quot;&gt;#6231&lt;/a&gt;
                        Add BasicLockable requirements in the documentation to follow
                        c++11.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6342&quot;&gt;#6342&lt;/a&gt;
                        c++11 compliance: Adapt the one_flag to the c++11 interface.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6671&quot;&gt;#6671&lt;/a&gt;
                        upgrade_lock: missing mutex and release functions.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6672&quot;&gt;#6672&lt;/a&gt;
                        upgrade_lock:: missing constructors from time related types.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6675&quot;&gt;#6675&lt;/a&gt;
                        upgrade_lock:: missing non-member swap.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Added missing packaged_task::result_type and packaged_task::
                        constructor with allocator.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Added packaged_task::reset()
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2575&quot;&gt;#2575&lt;/a&gt;
                        Bug- Boost 1.36.0 on Itanium platform.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4345&quot;&gt;#4345&lt;/a&gt;
                        thread::id and joining problem with cascade of threads.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4921&quot;&gt;#4921&lt;/a&gt;
                        BOOST_THREAD_USE_DLL and BOOST_THREAD_USE_LIB are crucial
                        and need to be documented.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5013&quot;&gt;#5013&lt;/a&gt;
                        documentation: boost::thread: pthreas_exit causes terminate().
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5173&quot;&gt;#5173&lt;/a&gt;
                        boost::this_thread::get_id is very slow.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5351&quot;&gt;#5351&lt;/a&gt;
                        interrupt a future get boost::unknown_exception.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5516&quot;&gt;#5516&lt;/a&gt;
                        Upgrade lock is not acquired when previous upgrade lock releases
                        if another read lock is present.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5990&quot;&gt;#5990&lt;/a&gt;
                        shared_future&amp;lt;T&amp;gt;::get() has wrong return type.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6174&quot;&gt;#6174&lt;/a&gt;
                        packaged_task doesn't correctly handle moving results.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6222&quot;&gt;#6222&lt;/a&gt;
                        Compile error with SunStudio: unique_future move.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6673&quot;&gt;#6673&lt;/a&gt;
                        shared_lock: move assign doesn't works with c++11.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6674&quot;&gt;#6674&lt;/a&gt;
                        shared_mutex: try_lock_upgrade_until doesn't works.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Fix issue signaled on the ML with task_object(task_object
                        const&amp;amp;) in presence of task_object(task_object&amp;amp;&amp;amp;)
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix equality for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_multiset&lt;/span&gt;&lt;/code&gt;
                  and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_multimap&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Implement &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;reserve&lt;/span&gt;&lt;/code&gt;
                  (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6857&quot;&gt;#6857&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Avoid gcc's &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wfloat&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;equal&lt;/span&gt;&lt;/code&gt;
                  and &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wshadow&lt;/span&gt;&lt;/code&gt;
                  warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6190&quot;&gt;#6190&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6771&quot;&gt;#6771&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix namespace issue with bcp (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6905&quot;&gt;#6905&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix Sun workarounds (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6784&quot;&gt;#6784&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Some internal changes to bucket allocation.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  See the &lt;a href=&quot;http://www.boost.org/doc/html/unordered/changes.html#unordered.changes.boost_1_50_0&quot;&gt;change
                  log&lt;/a&gt; for full details.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Wave V2.3.2, see the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;
                  for details.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Remove very ugly &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;/code&gt;
                  hack with a slightly less ugly one.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Replace MPL assert with static assert since it's problematic in
                  C++11, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6846&quot;&gt;#6846&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div id=&quot;version_1_50_0.patches.compilers_tested&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        Boost's primary test compilers are:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            Linux:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Intel: 11.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  LLVM Clang 2.8
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            OS X:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Intel: 11.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 4.4.4
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode: 4.4.4
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Windows:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual C++ 8.0, 9.0, 10.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1, 4.7.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            FreeBSD:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC 4.2.1, 32 and 64 bit
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            QNX:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  QCC, C++0x mode: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
        Boost's additional test compilers include:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            Linux:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang from subversion
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode: 4.3.4, 4.4.4, 4.5.3, 4.6.2
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  pgCC: 11.9
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Intel: 10.1, 11.1, 12.0, 12.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual Age 10.1
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            OS X:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang from subversion
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Intel 11.1, 12.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 4.4.4
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode: 4.4.4
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Windows:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual C++ 8.0, 10.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual C++ with STLport: 9.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual C++, Windows Mobile 5, with STLport: 9.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, mingw: 4.4.0, 4.4.7, 4.5.2, 4.5.4, 4.6.4, 4.7.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode, mingw: 4.5.2
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            AIX:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  IBM XL C/C++ Enterprise Edition, V12.1.0.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            FreeBSD:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC 4.2.1, 32 and 64 bit
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Solaris:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Sun 5.10
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div id=&quot;version_1_50_0.patches.acknowledgements&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
        &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
        Vladimir Prus and Marshall Clow managed this release.
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description></item>
  </channel>
</rss>
