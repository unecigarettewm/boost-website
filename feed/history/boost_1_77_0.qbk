[article Version 1.77.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* [phrase library..[@/libs/describe/ Describe]:] A C++14 reflection library,
  from Peter Dimov. Provides macros for describing enumerators and struct/class members,
  and primitives for querying this information.

* [phrase library..[@/libs/lambda2/ Lambda2]:] A C++14, dependency-free, single header
  lambda library, from Peter Dimov. Allows simple function objects to be constructed via
  expressions such as `_1 + 5`, `_1 % 2 == 0`, `_1 > _2`, or `_1 == ' ' || _1 == '\t'`.

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* /TODO/
* [phrase library..[@/libs/any/ Any]:]
  * Added `boost::anys::basic_any` - a data type with customizable Small Object Optimization whose instances can hold instances of any type that satisfies ValueType requirements (many thanks to Ruslan Arutyunyan @rarutyun). If you are not sure that you really need it, then use `boost::any` instead.
  * Started using GithubActions CI for additional testing

* [phrase library..[@/libs/conversion/ Conversion]:]
  * `boost::implicit_cast` is now `constexpr` ([github conversion 25]).
  * Fixed broken links ([github_pr conversion 23]).
  * Started using GithubActions CI for additional testing

* [phrase library..[@/libs/dll/ DLL]:]
  * More runtime checks for malformed ELFs in `boost::dll::library_info`
  * In `boost::dll::library_info` use info from `.dynsym` ELF section if `.symtab` is empty or missing
  * List protected ELF symbols in `boost::dll::library_info` as they are available for import ([github dll 50])
  * Remove unneeded convert from `wchar_t` to char on POSIX environment, thanks to Vladislav Shchapov ([github_pr dll 49])
  * Started using GithubAction CI for additional testing

* [phrase library..[@/libs/lexical_cast/ LexicalCast]:]
  * Fixed assignment to an int of a floating point value that is out of representable range for int.
  * Started using GithubActions CI for additional testing

* [phrase library..[@/libs/pfr/ PFR]:]
  * A MurMur Hash based implementation of hash_combine() is now used to reduce collisions count and improve quality of `boost::pfr::hash_value()`
  * Visual Studio 2017 now supported in C++14 mode (thanks to Denis Mikhailov aka @denzor200)
  * Issues found by inspect tool were fixed
  * Fixed some warnings, including removal of extra semicolons in include/boost/pfr/detail/fields_count.hpp ([github pfr 72])
  * Added a compile time assert for inherited types (thanks to Denis Mikhailov aka @denzor200)
  * Reflection of aggregates with non movable fields is now possible if guaranteed copy elision is on
  * Fixed spelling issues
  * Started using GithubActions CI for additional testing

* [phrase library..[@/libs/uuid/ Uuid]:]
  * Added `to_chars` for writing uuid strings without allocating ([github_pr uuid 116])

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
