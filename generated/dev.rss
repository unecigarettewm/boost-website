<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:boostbook="urn:boost-org:boostbook" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <generator>Boost Website Site Tools</generator>
    <title>Release notes for work in progress boost</title>
    <link>https://www.boost.org/</link>
    <atom:link href="https://www.boost.org/generated/dev.rss" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt)</copyright>
<item><title>Version 1.76.0</title><link>https://www.boost.org/users/history/version_1_76_0.html</link><guid>https://www.boost.org/users/history/version_1_76_0.html</guid><pubDate>Fri, 16 Apr 2021 21:05:27 +0000</pubDate><description>


  &lt;div id="version_1_76_0.new_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          No new libraries
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_76_0.updated_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;scope_id_type&lt;/span&gt;&lt;/code&gt; type alias.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;port_type&lt;/span&gt;&lt;/code&gt; type alias.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt; specialisations for IP addresses.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt; specialisations for &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_endpoint&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Refactored SFINAE usage to improve compile times.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added friendship support to customisation points, and made most customisations
                private.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class="identifier"&gt;any_io_executor&lt;/span&gt;&lt;/code&gt;
                to a "strong typedef"-style class.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;as_single&lt;/span&gt;&lt;/code&gt;
                to work with handler hook deprecation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured pthread condition variable attributes are cleaned up on all
                platforms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clarified thread safety notes on sockets and descriptors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured &lt;code&gt;&lt;span class="identifier"&gt;errno&lt;/span&gt;&lt;/code&gt; is
                not overwritten if &lt;code&gt;&lt;span class="identifier"&gt;socket&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; fails on macOS/FreeBSD.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed work tracking for &lt;code&gt;&lt;span class="identifier"&gt;io_context&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;thread_pool&lt;/span&gt;&lt;/code&gt; executors
                when move-assigned.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured internal &lt;code&gt;&lt;span class="identifier"&gt;call_stack&lt;/span&gt;&lt;/code&gt;
                objects are accessed only from implementation files.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed I/O object move-assignment to ensure the executor is left in
                a valid state.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed detection of compiler support for defaulted template argument
                on functions with MSVC.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Prevented the &lt;code&gt;&lt;span class="identifier"&gt;blocking&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;always&lt;/span&gt;&lt;/code&gt;
                property from being used with &lt;code&gt;&lt;span class="identifier"&gt;strand&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, as it did not produce the
                correct semantics.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed deprecated file &lt;tt&gt;asio/impl/src.cpp&lt;/tt&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with MSVC for ARM. (&lt;a href="https://github.com/boostorg/atomic/pull/49"&gt;PR#49&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This update brings minor bug fixes and revamped CI reporting.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                We'd love to know how you or your company use Beast, consider adding
                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
                and Individuals Using Beast&lt;/a&gt; list.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
                Notes&lt;/a&gt; for a complete list of changes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/bind/"&gt;Bind&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for using the standard C++11 placeholders with &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;bind&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Update &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;apply&lt;/span&gt;&lt;/code&gt; to use variadic templates
                and perfect forwarding.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/continer/"&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added [[no-discard]] attribute in all containers to catch bugs related
                to unused return values.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced default standard exception classes with Boost.Container
                own classes, reducing considerably the included files overhead. Example:
                in MSVC 19 &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;container&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;vector&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                preprocessed file size reduces from 1,5MB to 930KB. If you still
                want to use standard exception classes, you can define &lt;code&gt;&lt;span class="identifier"&gt;BOOST_CONTAINER_USE_STD_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
                before using any Boost.Container class.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs/issues:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/102"&gt;GitHub
                      #102: &lt;em&gt;"flat_map::insert ambiguous with initializer
                      list &amp;amp; pairs that need to convert"&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/139"&gt;GitHub
                      #139: &lt;em&gt;"flat_map merge and iterators"&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/141"&gt;GitHub
                      #141: &lt;em&gt;"small_vector does not propagate no throw
                      properties of move operation of contained type"&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/164"&gt;GitHub
                      #164: &lt;em&gt;"Compile error when using &lt;code&gt;&lt;span class="identifier"&gt;pmr&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;map&lt;/span&gt;&lt;/code&gt; with a &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;pair&lt;/span&gt;&lt;/code&gt;; works when using a
                      &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tuple&lt;/span&gt;&lt;/code&gt;"&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/171"&gt;GitHub
                      #171: &lt;em&gt;"deque::clear() uses undefined behaviour"&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add implicit conversion between compatible reference wrappers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;cmath&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, a portable implementation
                of the floating point classification functions from &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;cmath&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;bit&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, a portable implementation
                of the C++20 standard header &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;bit&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_EQ&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_NE&lt;/span&gt;&lt;/code&gt; for
                character types under C++20.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Revise allocator access utilities (now support VS2013, and no workarounds
                use &lt;code&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;.)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;BREAKING CHANGE&lt;/strong&gt;: &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;import&lt;/span&gt;&lt;/code&gt;
                was renamed to &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;import_symbol&lt;/span&gt;&lt;/code&gt;
                to avoid collision with C++20 &lt;code&gt;&lt;span class="identifier"&gt;import&lt;/span&gt;&lt;/code&gt;
                keyword.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated docs, including FAQ section.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated compatibility with WASI platform. (&lt;a href="https://github.com/boostorg/filesystem/pull/169"&gt;PR#169&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an exception being thrown by &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;remove_filename&lt;/span&gt;&lt;/code&gt;
                if the path is "////". (&lt;a href="https://github.com/boostorg/filesystem/issues/176"&gt;#176&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;create_directories&lt;/span&gt;&lt;/code&gt;
                disregarding errors from file status query operations issued internally.
                This could result in incorrect error codes returned by &lt;code&gt;&lt;span class="identifier"&gt;create_directories&lt;/span&gt;&lt;/code&gt;. (&lt;a href="https://github.com/boostorg/filesystem/issues/182"&gt;#182&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/gil/"&gt;GIL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                BREAKING: In next release, we are going to drop support for GCC 5.
                We will also change the required minimum C++ version from C++11 to
                C++14.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/histogram/"&gt;Histogram&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This release contains critical fixes, please check that your results
                are not affected.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href="https://www.boost.org/libs/histogram/doc/html/histogram/history.html"&gt;Release
                Notes&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/intrusive/"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced compile-time dependencies:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;linear_slist_algorithms&lt;/span&gt;&lt;/code&gt;
                      use a simple node_ptr instead of std::pair on return.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;list&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;slist&lt;/span&gt;&lt;/code&gt; use &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;
                      &lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;
                      &lt;span class="special"&gt;==&lt;/span&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;equal_to&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;less&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;a href="https://github.com/boostorg/intrusive/issues/54"&gt;GitHub
                #54: &lt;em&gt;set.rbegin() looks like O(log(N))&lt;/em&gt;&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/interprocess/"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="keyword"&gt;wchar_t&lt;/span&gt;&lt;/code&gt; API support
                for named resources in operating systems that offer native wide character
                API (e.g. Windows). The following classes were updated with &lt;code&gt;&lt;span class="keyword"&gt;wchar_t&lt;/span&gt;&lt;/code&gt; name support:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;file_mapping&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;managed_mapped_file&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;managed_shared_memory&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;managed_windows_shared_memory&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;shared_memory_object&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;windows_shared_memory_object&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;file_lock&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;named_condition&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;named_condition_any&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;named_mutex&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;named_recursive_mutex&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;named_semaphore&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;named_sharable_mutex&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;named_upgradable_mutex&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;message_queue&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;BOOST_INTERPROCESS_FORCE_NATIVE_EMULATION&lt;/span&gt;&lt;/code&gt;
                macro option to disable the use of generic emulation code for process
                shared synchronization primitives instead of native POSIX or Winapi
                functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/issues/76"&gt;GitHub
                      #76 (&lt;em&gt;"Cygwin compilation errors"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/pull/83"&gt;GitHub
                      #83 (&lt;em&gt;"Add BOOST_INTERPROCESS_FORCE_NATIVE_EMULATION
                      option"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/pull/92"&gt;GitHub
                      #92 (&lt;em&gt;"bufferstream: Correct MSVC compilation
                      warning"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/pull/106"&gt;GitHub
                      #106 (&lt;em&gt;"Use fallocate on truncate_file"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/issues/120"&gt;GitHub
                      #120 (&lt;em&gt;"segment_manager customization"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/issues/122"&gt;GitHub
                      #122 (&lt;em&gt;"Mark constructors/assignment/swap noexcept
                      where possible"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/issues/126"&gt;GitHub
                      #126 (&lt;em&gt;"_ReadWriteBarrier is deprecated warning
                      when compiling with clang-cl.exe"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/json/"&gt;JSON&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="https://cppalliance.org/pdf/C%20Plus%20Plus%20Alliance%20-%20Boost%20JSON%20Security%20Assessment%202020%20-%20Assessment%20Report%20-%2020210317.pdf"&gt;Security
                Report&lt;/a&gt; from Bishop Fox.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                (&lt;a href="https://github.com/boostorg/json/issues/481"&gt;#481&lt;/a&gt;) Refactored &lt;code&gt;&lt;span class="identifier"&gt;value_from&lt;/span&gt;&lt;/code&gt;
                implementation; user customizations are now always preferred over
                library-provided overloads.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                (&lt;a href="https://github.com/boostorg/json/issues/484"&gt;#484&lt;/a&gt;) Fix imprecise parsing for some floating point numbers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                (&lt;a href="https://github.com/boostorg/json/issues/485"&gt;#485&lt;/a&gt;) Fix link errors in standalone mode, when used alongside
                Boost.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                (&lt;a href="https://github.com/boostorg/json/issues/497"&gt;#497&lt;/a&gt;) Fix Boost.Build builds on GCC 4.8.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lexical_cast/"&gt;LexicalCast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Dropped dependency on Boost.Math (thanks to Peter Dimov &lt;a href="https://github.com/boostorg/lexical_cast/issues/37"&gt;#37&lt;/a&gt;,
                &lt;a href="https://github.com/boostorg/lexical_cast/issues/39"&gt;#39&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes for the CI and coverage (thanks to Sam Darwin from "The
                C++ Alliance" &lt;a href="https://github.com/boostorg/lexical_cast/issues/38"&gt;#38&lt;/a&gt;, &lt;a href="https://github.com/boostorg/lexical_cast/issues/42"&gt;#42&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Corrected a formal race condition in the thread-safe log record
                      queue implementation used in the &lt;code&gt;&lt;span class="identifier"&gt;unbounded_fifo_queue&lt;/span&gt;&lt;/code&gt;
                      policy of the &lt;code&gt;&lt;span class="identifier"&gt;asynchronous_sink&lt;/span&gt;&lt;/code&gt;
                      frontend. The race could be detected by TSAN, but it was not
                      a real problem on most current CPU architectures and compilers.
                      (&lt;a href="https://github.com/boostorg/log/issues/139"&gt;#139&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      When copying a logger with a channel attribute (e.g. &lt;code&gt;&lt;span class="identifier"&gt;channel_logger&lt;/span&gt;&lt;/code&gt;), the channel
                      attribute is now deep-copied from the original logger. This
                      means that modifying the channel in the new logger will no
                      longer affect the original logger.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Replaced the use of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; in template parameters
                      with a new tag type &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;log&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;use_std_allocator&lt;/span&gt;&lt;/code&gt;
                      to silence libc++ warnings about the former being deprecated
                      in C++17 and later. The tag indicates that the instantiated
                      template should be using a specialization of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator&lt;/span&gt;&lt;/code&gt; internally to allocate
                      dynamic memory, so the change has no functional effect. (&lt;a href="https://github.com/boostorg/log/issues/141"&gt;#141&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Boost.Log no longer defines &lt;code&gt;&lt;span class="identifier"&gt;__MSVCRT_VERSION__&lt;/span&gt;&lt;/code&gt;
                      macro on MinGW and MinGW-w64. Defining this macro caused incompatibility
                      with UCRT, which is available as an option in recent MinGW-w64.
                      (&lt;a href="https://github.com/boostorg/log/pull/149"&gt;PR#149&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking Change:&lt;/strong&gt; C++03 support is
                now removed, a C++11 or later conformant compiler is now required
                to use this library.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;span class="link"&gt;Z-test&lt;/span&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added execution policy support to univariate and bivariate statistics:
                enables parallel execution (requires C++17 and &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;execution&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Big update/improvement on CI testing.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bivariate statistics now have integer support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                T-Test now has integer support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Linear regression now has integer support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct PDF of the beta distribution at the endpoints.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct use of Stirling's approximation in certain multiprecision
                cases, fixes &lt;a href="https://github.com/boostorg/math/issues/396"&gt;#396&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Eliminate -Wimplicit-int-float-conversion on clang.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix some constexpr issues in quaternion/octonion.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minor performance fix to tanh_sinh integration.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Update hypergeometric functions internal scaling to allow for 64-bit
                (long long) exponents with multiprecision types.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/move/"&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="https://github.com/boostorg/move/issues/35"&gt;Git Issue
                #35: &lt;em&gt;"New nothrow move traits are incomplete"&lt;/em&gt;&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;BREAKING CHANGE&lt;/strong&gt;: Massive refactoring
                and code simplification makes C++11 an absolute requirement.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Use BOOST_TRY/CATCH in headers so code can be used in exception-free
                environments.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct corner case in pow, fixes &lt;a href="https://github.com/boostorg/multiprecision/issues/277"&gt;#277&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct exception type thrown to match docs in lsb/msb: fixes &lt;a href="https://github.com/boostorg/multiprecision/issues/257"&gt;#257&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Allow moves and operators between related but different types (ie
                types with the same allocator), fixes &lt;a href="https://github.com/boostorg/multiprecision/issues/278"&gt;#278&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/nowide/"&gt;Nowide&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix discarding of characters for text file streams when seek or sync
                functions are used and newlines were converted (e.g. on Windows)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix potential use-after-free bug when reusing (via &lt;code&gt;&lt;span class="identifier"&gt;open&lt;/span&gt;&lt;/code&gt;) a file stream that has been
                closed
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix potential invalid memory access when using a file stream that
                has been moved or swapped to where the source had a put-back character
                or was set to unbuffered mode
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix compatibility with ucrt runtime by not defining &lt;code&gt;&lt;span class="identifier"&gt;__MSVCRT_VERSION__&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Known issues: Read performance for text files is degraded. Binary
                files and writing is unaffected.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/optional/"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed MSVC warning C4702.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/outcome/"&gt;Outcome&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Announcements:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      BREAKING CHANGE: After a year and three major Boost releases
                      announcing this upcoming change, this is the FIRST RELEASE
                      of the v2.2 branch. This branch has a number of major breaking
                      changes to the Outcome v2.1 which shipped in Boost 1.75 and
                      earlier, see the documentation for details.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enhancements:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      VS2019.8 changed how to enable Coroutines, which caused Outcome
                      to not compile on that compiler.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      If on C++ 20, we now use C++ 20 &lt;code&gt;&lt;span class="special"&gt;[[&lt;/span&gt;&lt;span class="identifier"&gt;likely&lt;/span&gt;&lt;span class="special"&gt;]]&lt;/span&gt;&lt;/code&gt;
                      instead of compiler-specific markup to indicate when TRY has
                      likely success or failure.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      BREAKING CHANGE: Previously the value of &lt;code&gt;&lt;span class="identifier"&gt;spare_storage&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;const&lt;/span&gt;
                      &lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;|&lt;/span&gt;&lt;span class="identifier"&gt;basic_outcome&lt;/span&gt; &lt;span class="special"&gt;*)&lt;/span&gt;
                      &lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt; was not propagated
                      over &lt;code&gt;&lt;span class="identifier"&gt;BOOST_OUTCOME_TRY&lt;/span&gt;&lt;/code&gt;,
                      which causes things like stack backtraces captured at the point
                      of construction of an errored result to get dropped at every
                      &lt;code&gt;&lt;span class="identifier"&gt;TRY&lt;/span&gt;&lt;/code&gt; point.
                      This has been fixed by adding an optional &lt;code&gt;&lt;span class="identifier"&gt;spare_storage&lt;/span&gt;&lt;/code&gt;
                      to &lt;code&gt;&lt;span class="identifier"&gt;success_type&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;failure_type&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, as well as to &lt;code&gt;&lt;span class="keyword"&gt;auto&lt;/span&gt; &lt;span class="identifier"&gt;success&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;
                      &lt;span class="special"&gt;&amp;amp;&amp;amp;,&lt;/span&gt; &lt;span class="special"&gt;...)&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class="keyword"&gt;auto&lt;/span&gt; &lt;span class="identifier"&gt;failure&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;
                      &lt;span class="special"&gt;&amp;amp;&amp;amp;,&lt;/span&gt; &lt;span class="special"&gt;...)&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Boost.Outcome should now compile with &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
                      defined. Thanks to Emil, maintainer of Boost.Exception, making
                      a change for me, Boost.Outcome should now compile with C++
                      exceptions globally disabled. You won't be able to use &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;exception_ptr&lt;/span&gt;&lt;/code&gt; as it can't
                      be included if C++ exceptions are globally disabled.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      BREAKING CHANGE &lt;a href="https://github.com/ned14/outcome/issues/244"&gt;#244&lt;/a&gt;
                      It came as a shock to learn that &lt;code&gt;&lt;span class="identifier"&gt;BOOST_OUTCOME_TRY&lt;/span&gt;&lt;/code&gt;
                      had been broken since the inception of this library for certain
                      corner case code, which required a breaking change in how TRY
                      works. See &lt;a href="https://boostorg.github.io/outcome/changelog.html"&gt;the
                      changelog in the documentation for more detail&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/parameter/"&gt;Parameter&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a workaround for MSVC 2015 code miscompilation when an rvalue
                was used as a default value of a named parameter of a function. (&lt;a href="https://github.com/boostorg/parameter/pull/109"&gt;PR#109&lt;/a&gt;,
                &lt;a href="https://github.com/boostorg/log/issues/132"&gt;#132&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/pfr/"&gt;PFR&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed reflection of types with missing &lt;code&gt;&lt;span class="keyword"&gt;const&lt;/span&gt;&lt;/code&gt;
                in SFINAE expressions in template constructor. Now reflection of
                aggregates with &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;chrono&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;duration&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;???&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; fields works on any
                Standard Library implementation, even if LWG3050 is not fixed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Comparison functions are now &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
                &lt;a href="https://github.com/boostorg/pfr/issues/52"&gt;#52&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed numerous typos in docs (thanks to Phil Miller &lt;a href="https://github.com/boostorg/pfr/issues/63"&gt;#63&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Worked around &lt;a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95888"&gt;GCC
                bug&lt;/a&gt; affecting GCC versions 9.3-10.2 (issue &lt;a href="https://github.com/boostorg/poly_collection/issues/20"&gt;#20&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Version 1.13
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class="identifier"&gt;ARCH_PPC_64&lt;/span&gt;&lt;/code&gt; predef.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class="identifier"&gt;ARCH_WORD_BITS&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; redefinition warnings/errors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class="identifier"&gt;ARCH_E2K&lt;/span&gt;&lt;/code&gt;, Elbrus
                2000, architecture from Konstantin Ivlev.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix not handling recent C++ version that go above 10.x version.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Version 1.12
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Switch to using the endian.h header on OpenBSD. (Brad Smith)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix not handling recent versions of stdcxx that go above version
                9.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix including sub-BSD OS headers directly causing redef warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add CI testing of direct inclusion of all headers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add CI testing on FreeBSD for clang and gcc.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class="identifier"&gt;WORD_BITS&lt;/span&gt;&lt;/code&gt; set
                of predefs to detect the architecture word size. Initial implementation
                inspired by submission from Mikhail Komarov.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add CI testing for Cygwin 32 and 64.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/property_tree/"&gt;PropertyTree&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Property Tree has a new maintainer.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix usage of deprecated Boost.Bind features.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Link to Wikipedia fixed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Use BOOST_OVERRIDE to fix GCC warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add extensive CI testing.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/regex/"&gt;Regex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Regex is now header only except in C++03 mode.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for C++03 is now deprecated.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The library can now be used "standalone" without the rest
                of Boost being present.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better support for pre-C++11 builds on clang &lt;a href="https://github.com/boostorg/stacktrace/issues/102"&gt;#102&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bigger warning for &lt;strong&gt;do not use boost::stacktrace::stacktrace
                in signal handlers&lt;/strong&gt; &lt;a href="https://github.com/boostorg/stacktrace/issues/71"&gt;#71&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_traits/"&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix for Visual Studio managed code projects.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant2/"&gt;Variant2&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved generated code for the double buffered case.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_76_0.updated_tools"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/tools/build/"&gt;Build&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Includes release of &lt;a href="https://www.boost.org/tools/build/doc/html/#_version_4_4_1"&gt;B2
                version 4.4.1&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_76_0.compilers_tested"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 4.0.1, 6.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++0x: 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0,
                9.0.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
                6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++14: 18.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 9.0.0, 9.1.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++17: 9.1.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++1z: 9.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++2a: 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.6.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1z: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++0x: 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
                6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++14: 18.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++17: 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++1z: 9.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++2a: 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.6.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1z: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_76_0.acknowledgements"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.75.0</title><link>https://www.boost.org/users/history/version_1_75_0.html</link><guid>https://www.boost.org/users/history/version_1_75_0.html</guid><pubDate>Fri, 11 Dec 2020 19:50:02 +0000</pubDate><description>


  &lt;div id="version_1_75_0.known_issues"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Known Issues&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost.Operators is currently &lt;strong&gt;incompatible with C++20&lt;/strong&gt;
      compilers, which in some cases may manifest as an infinite recursion or infinite
      loop in runtime when a comparison operator is called. The problem is caused
      by the new operator rewriting behavior introduced in C++20. As a workaround,
      users are advised to target C++17 or older C++ standard. More details can be
      found in &lt;a href="https://github.com/boostorg/utility/issues/65"&gt;#65&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id="version_1_75_0.new_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/json/"&gt;JSON&lt;/a&gt;:&lt;/span&gt; JSON parsing, serialization,
          and DOM in C++11, from Vinnie Falco and Krystian Stasiowski.
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fast compilation requiring only C++11
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Easy and safe modern API with allocator support
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Compile without Boost, define &lt;code&gt;&lt;span class="identifier"&gt;BOOST_JSON_STANDALONE&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Optional header-only, without linking to a library
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/leaf/"&gt;LEAF&lt;/a&gt;:&lt;/span&gt; A lightweight error-handling
          library for C++11, from Emil Dotchevski.
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Small single-header format, no dependencies.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Designed for maximum efficiency ("happy" path and "sad"
                path).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                No dynamic memory allocations, even with heavy payloads.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                O(1) transport of arbitrary error types (independent of call stack
                depth).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Can be used with or without exception handling.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/pfr/"&gt;PFR&lt;/a&gt;:&lt;/span&gt; Basic reflection without macro
          or boilerplate code for user defined types, from Antony Polukhin.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_75_0.updated_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled support for UNIX domain sockets on Windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added executor-converting construction and assignment to &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_resolver&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added compatibility between polymorphic executors and the (deprecated)
                handler invocation hook.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;as_single&lt;/span&gt;&lt;/code&gt;
                completion token adapter.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class="identifier"&gt;MSG_NOSIGNAL&lt;/span&gt;&lt;/code&gt;
                on more platforms by using &lt;code&gt;&lt;span class="identifier"&gt;_POSIX_VERSION&lt;/span&gt;&lt;/code&gt;
                to detect whether it is supported.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the ability to compile using libpthread on Windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added workarounds for the Intel C++ compiler.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added more support for detecting and optimising for handlers that
                have no custom executor.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced lock contention for timer cancellation on Windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reinstated a previously removed null-pointer check, as it had a measurable
                impact on performance.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed the &lt;code&gt;&lt;span class="identifier"&gt;executor&lt;/span&gt;&lt;/code&gt;
                concept to test for a const-qualified &lt;code&gt;&lt;span class="identifier"&gt;execute&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;any_executor&lt;/span&gt;&lt;/code&gt;
                support for builds without RTTI support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed the &lt;code&gt;&lt;span class="identifier"&gt;thread_pool&lt;/span&gt;&lt;/code&gt;
                unit test to work without RTTI support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed C++20 coroutines compatibility with clang on Windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some compatibility issues with Windows Runtime.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed shadow name warnings caused by addition of &lt;code&gt;&lt;span class="identifier"&gt;asio&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;query&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a "logical ‘or’ of equal expressions" warning
                on linux.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a benign switch fallthrough warning.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class="identifier"&gt;push&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;pop_options&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                includes.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppressed zero-as-null-pointer-constant warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a comma-operator warning.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the documentation to clarify when the &lt;tt&gt;select&lt;/tt&gt;
                reactor is used on Windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed potential ambiguity caused by &lt;code&gt;&lt;span class="identifier"&gt;any_executor&lt;/span&gt;&lt;/code&gt;
                comparisons and conversion.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added detection of non-experimental C++20 coroutines on MSVC 19.8.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compatibility with uClibc.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;strand&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                adaptation of Networking TS executors when targeting older C++ versions
                or less conformant compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Consult the &lt;a href="https://www.boost.org/doc/libs/1_75_0/doc/html/boost_asio/history.html"&gt;Revision
                History&lt;/a&gt; for further details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented SSE2 and SSE4.1 versions of address lookup algorithm,
                which is used in the internal lock pool implementation. This may
                improve performance of waiting and notifying operations in heavily
                contended cases.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a possible compilation error on AArch64 targets caused by incorrect
                instructions generated for bitwise (logical) operations with immediate
                constants. (&lt;a href="https://github.com/boostorg/atomic/issues/41"&gt;#41&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This update brings bug fixes and support for the &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_ENBALE_HANDLER_TRACKING&lt;/span&gt;&lt;/code&gt;
                compile flag from Boost.Asio:
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                We'd love to know how you or your company use Beast, consider adding
                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
                and Individuals Using Beast&lt;/a&gt; list.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
                Notes&lt;/a&gt; for a complete list of changes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/container/"&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New &lt;code&gt;devector&lt;/code&gt;
                container.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs/issues:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/152"&gt;#152&lt;/a&gt; Tree-based containers have troubles with move-only
                      types.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/156"&gt;#156&lt;/a&gt; Compile error with vector.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/pull/157"&gt;PR#157&lt;/a&gt; Add missing include.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/159"&gt;#159&lt;/a&gt;: pmr::monotonic_buffer_resource crashes on
                      large single allocations.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/160"&gt;#160&lt;/a&gt;: Usage of uses_allocator needs a remove_cvref_t.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/162"&gt;#162&lt;/a&gt;: small_vector on MSVC x86 call-by-value crash.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/161"&gt;#161&lt;/a&gt;: polymorphic_allocator(memory_resource*) non-standard
                      extension causes headache.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/pull/163"&gt;PR#163&lt;/a&gt;: container_rebind for small_vector with
                      options.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/165"&gt;#165&lt;/a&gt;: Link error with shared library and memory_resource
                      inline members.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/pull/166"&gt;PR#166&lt;/a&gt;: Fix encoding error in copyright headers.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/pull/167"&gt;PR#167&lt;/a&gt;: error: the address of 'msg' will always
                      evaluate as 'true' warning with GCC 4.4.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/169"&gt;#169&lt;/a&gt;: flood of warnings building dlmalloc_ext_2_8_6.c
                      on clang11.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/endian/"&gt;Endian&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;endian_arithmetic&lt;/span&gt;&lt;/code&gt;
                no longer inherits from &lt;code&gt;&lt;span class="identifier"&gt;endian_buffer&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                When &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ENDIAN_NO_CTORS&lt;/span&gt;&lt;/code&gt;
                is defined, the unaligned &lt;code&gt;&lt;span class="identifier"&gt;endian_buffer&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;endian_arithmetic&lt;/span&gt;&lt;/code&gt;
                are C++03 PODs, to enable use of &lt;code&gt;&lt;span class="identifier"&gt;__attribute__&lt;/span&gt;&lt;span class="special"&gt;((&lt;/span&gt;&lt;span class="identifier"&gt;packed&lt;/span&gt;&lt;span class="special"&gt;))&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;creation_time&lt;/span&gt;&lt;/code&gt;
                operation, which allows to obtain file creation time. (Inspired by
                &lt;a href="https://github.com/boostorg/filesystem/pull/134"&gt;PR#134&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The returned value of &lt;code&gt;&lt;span class="identifier"&gt;last_write_time&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;p&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;ec&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; operation in case of failure has
                been changed to a minimal value representable by &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;time_t&lt;/span&gt;&lt;/code&gt;
                instead of -1.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The returned value of &lt;code&gt;&lt;span class="identifier"&gt;hard_link_count&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;p&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;ec&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; operation in case of failure has
                been changed to &lt;code&gt;&lt;span class="keyword"&gt;static_cast&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;uintmax_t&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;(-&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; instead of 0.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On POSIX systems, &lt;code&gt;&lt;span class="identifier"&gt;file_size&lt;/span&gt;&lt;/code&gt;
                will now indicate error code &lt;code&gt;&lt;span class="identifier"&gt;errc&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;function_not_supported&lt;/span&gt;&lt;/code&gt;
                if the path resolves to a non-regular file. Previously, &lt;code&gt;&lt;span class="identifier"&gt;errc&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;operation_not_permitted&lt;/span&gt;&lt;/code&gt; was reported.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Linux, many operations now use &lt;code&gt;&lt;span class="identifier"&gt;statx&lt;/span&gt;&lt;/code&gt;
                system call internally, when possible, which allows to reduce the
                amount of information queried from the filesystem and potentially
                improve performance. The &lt;code&gt;&lt;span class="identifier"&gt;statx&lt;/span&gt;&lt;/code&gt;
                system call was introduced in Linux kernel 4.11.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed &lt;code&gt;&lt;span class="keyword"&gt;const&lt;/span&gt;&lt;/code&gt;-qualification
                from return types of some &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;
                methods. This could prevent move construction and move assignment
                at the call site in some cases. (&lt;a href="https://github.com/boostorg/filesystem/issues/160"&gt;#160&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On OpenBSD 4.4 and newer, use &lt;code&gt;&lt;span class="identifier"&gt;statvfs&lt;/span&gt;&lt;/code&gt;
                system call to obtain filesystem space information. (Inspired by
                &lt;a href="https://github.com/boostorg/filesystem/pull/162"&gt;PR#162&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows, &lt;code&gt;&lt;span class="identifier"&gt;space&lt;/span&gt;&lt;/code&gt;
                now returns with an error if the provided path does not idendify
                an existing file. (&lt;a href="https://github.com/boostorg/filesystem/issues/167"&gt;#167&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                WARNING: Following the deprecation notice of C++03 issued with Boost
                1.73, from now on the Boost.Geometry requires a capable C++14 compiler.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/gil/"&gt;GIL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                BREAKING: In next release, we are going to drop support for GCC 5.
                We may also change the required minimum C++ version from C++11 to
                C++14.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/histogram/"&gt;Histogram&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This update brings
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug-fixes for corner-cases
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Small documentation improvements
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixes for new warnings from latest compilers and when compiling
                      against the C++20 standard
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the full &lt;a href="https://www.boost.org/libs/histogram/doc/html/histogram/history.html"&gt;Release
                Notes&lt;/a&gt; for a complete list of changes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/interprocess/"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/issues/127"&gt;#127&lt;/a&gt;: static assertion failure with boost interprocess
                      1.74 and basic_managed_shared_memory.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/intrusive/"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/intrusive/pull/48"&gt;PR#48&lt;/a&gt;: MSVC "assignment within conditional"
                      warning fix.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/intrusive/pull/49"&gt;PR#49&lt;/a&gt;: Fix empty control statement warnings.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/intrusive/issues/52"&gt;#52&lt;/a&gt;: Invalid casting in BOOST_INTRUSIVE_BSR_INTRINSIC.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Corrected the file counter that would be used in &lt;code&gt;&lt;span class="identifier"&gt;text_file_backend&lt;/span&gt;&lt;/code&gt; when generating
                      the target file name (based on the pattern set by &lt;code&gt;&lt;span class="identifier"&gt;set_target_file_name_pattern&lt;/span&gt;&lt;/code&gt;
                      method) when the log file is rotated. (&lt;a href="https://github.com/boostorg/log/issues/125"&gt;#125&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Replaced a volatile version counter in &lt;code&gt;&lt;span class="identifier"&gt;basic_sink_frontend&lt;/span&gt;&lt;/code&gt;
                      with an atomic. (&lt;a href="https://github.com/boostorg/log/issues/128"&gt;#128&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      In the &lt;code&gt;&lt;span class="identifier"&gt;asynchronous_sink&lt;/span&gt;&lt;/code&gt;
                      frontend, resolved a possible conflict between &lt;code&gt;&lt;span class="identifier"&gt;flush&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;run&lt;/span&gt;&lt;/code&gt;
                      methods, if &lt;code&gt;&lt;span class="identifier"&gt;run&lt;/span&gt;&lt;/code&gt;
                      is called from a user's thread instead of the internal dedicated
                      thread spawned by the frontend. (&lt;a href="https://github.com/boostorg/log/issues/131"&gt;#131&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/move/"&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/move/issues/30"&gt;#30&lt;/a&gt;: (void) C-cast is a non-portable way of suppressing
                      compiler warnings.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/mp11/"&gt;Mp11&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_pairwise_fold&lt;/span&gt;&lt;/code&gt;
                (suggested by Barry Revzin)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed &lt;code&gt;&lt;span class="identifier"&gt;mp_invoke&lt;/span&gt;&lt;/code&gt;
                (use &lt;code&gt;&lt;span class="identifier"&gt;mp_invoke_q&lt;/span&gt;&lt;/code&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/optional/"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;none&lt;/span&gt;&lt;/code&gt; is &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;-declared.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;a href="https://github.com/boostorg/optional/issues/78"&gt;issue
                #78&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/outcome/"&gt;Outcome&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Announcements:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      After a year and three major Boost releases announcing this
                      upcoming change, this is the FINAL RELEASE of the v2.1 branch.
                      From Boost 1.76 onwards, the v2.2 branch becomes the default.
                      This branch has a number of major breaking changes to Outcome
                      v2.1, see the documentation for details.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enhancements:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The ADL discovered event hooks have been replaced with policy-specified
                      event hooks instead. This is due to brittleness (where hooks
                      would quietly self-disable if somebody changed something),
                      compiler bugs (a difference in compiler settings causes the
                      wrong hooks, or some but not all hooks, to get discovered),
                      and end user difficulty in using them at all. The policy-specified
                      event hooks can be told to default to ADL discovered hooks
                      for backwards compatibility: set &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/span&gt;&lt;/code&gt;
                      to less than &lt;code&gt;&lt;span class="number"&gt;220&lt;/span&gt;&lt;/code&gt;
                      to enable emulation.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Improve configuring &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_GCC6_CONCEPT_BOOL&lt;/span&gt;&lt;/code&gt;.
                      Older GCCs had boolean based concepts syntax, whereas newer
                      GCCs are standards conforming. However the precise logic of
                      when to use legacy and conforming syntax was not well understood,
                      which caused Outcome to fail to compile depending on what options
                      you pass to GCC. The new logic always uses the legacy syntax
                      if on GCC 8 or older, otherwise we use conforming syntax if
                      and only if GCC is in C++ 20 mode or later. This hopefully
                      will resolve the corner case build failures on GCC.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Boost.Outcome should now compile with &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
                      defined. Thanks to Emil, maintainer of Boost.Exception, making
                      a change for me, Boost.Outcome should now compile with C++
                      exceptions globally disabled. You won't be able to use &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;exception_ptr&lt;/span&gt;&lt;/code&gt; as it can't
                      be included if C++ exceptions are globally disabled.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/ned14/outcome/issues/236"&gt;#236&lt;/a&gt;
                      In the Coroutine support the &lt;code&gt;&lt;span class="identifier"&gt;final_suspend&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; was not &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt;,
                      despite being required to be so in the C++ 20 standard. This
                      has been fixed, but only if your compiler implements &lt;code&gt;&lt;span class="identifier"&gt;noop_coroutine&lt;/span&gt;&lt;/code&gt;. Additionally,
                      if &lt;code&gt;&lt;span class="identifier"&gt;noop_coroutine&lt;/span&gt;&lt;/code&gt;
                      is available, we use the much more efficient coroutine handle
                      returning variant of &lt;code&gt;&lt;span class="identifier"&gt;await_suspend&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; which should significantly
                      improve codegen and context switching performance.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/polygon/"&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                C++20 fixes for &lt;code&gt;&lt;span class="identifier"&gt;event_comparison_type&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;vertex_equality_predicate_type&lt;/span&gt;&lt;/code&gt;,
                and &lt;code&gt;&lt;span class="identifier"&gt;voronoi_predicates&lt;/span&gt;&lt;/code&gt;.
                (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/preprocessor/"&gt;Preprocessor&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                When variadic data is empty in C++20 mode with __VA_OPT__ support
                the variadic size has been corrected to be 0. This also means that
                in this C++20 mode it is now valid to convert to and from empty arrays
                and lists and variadic data. The end-user can read the "C++20
                Support For Variadic Macros" part of the "variadic macros"
                topic for more information about empty variadic data in the library.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The macro BOOST_PP_IS_STANDARD() has been added for identifying if
                the currently used preprocessor is a C++ standard conforming preprocessor.
                A number of preprocessors which generally work correctly with the
                library but need various internal workarounds, including the currently
                default VC++ preprocessor, are not considered C++ standard conforming
                preprocessors. However most preprocessors, including among others
                gcc, clang, and the new but currently non-default VC++ preprocessor
                in VS2019, are C++ standard conforming preprocessors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                For C++ standard conforming preprocessors a number of the limits
                defined in the config/limits.hpp can now be changed to higher amounts
                for a TU. The end-user should read the "limitations" topic
                to understand how and which limits can be changed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                For C++ standard conforming preprocessors, in order to allow the
                maximum number of FOR and WHILE iterations, the beginning 'r' and
                'd' iteration numbers in the user-defined macros start at 1 and not
                2, as it did in previous releases. This could be a breaking change
                if these iteration numbers are used in the user-defined macros (
                they probably would not be ), but the change was necessary to fix
                some arcane bugs when dealing with numerical/logical operations with
                maximum numbers as well to allow the user-defined macros to be called
                the correct possible maximum number of times. For non-C++ conforming
                preprocessors, this change was not made because those non-conforming
                C++ preprocessors generally have limitations which disallow the maximum
                number of looping constructs to be run, and it was felt not to introduce
                a possible breaking change to those more fragile preprocessors would
                be better. It was also felt that besides fixing some arcane preprocessor
                bugs and providing the possible maximum number of user-defined macro
                invocations, this change could be made because it has never been
                documented what the starting 'r' and 'd' iteration numbers actually
                are but only that these numbers are incremented for each iteration.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The library has been upgraded to assume variadic macro support for
                any compiler working with the library. Ostensibly this means that
                the library is now a C++11 on up library, yet most of the major compilers,
                including gcc, clang, and VC++, also support variadic macros in C++98/C++03
                mode as long as strict compliance to C++98/C++03 is not turned on
                when using one of those compilers.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/rational/"&gt;Rational&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix Rational operators to not break under new C++20 &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;==&lt;/span&gt;&lt;/code&gt;
                rewriting rules. (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/signals2/"&gt;Signals2&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct C++ allocator model support to fix compilation in C++20 standards
                mode. (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/system/"&gt;System&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The platform-specific headers &lt;code&gt;&lt;span class="identifier"&gt;windows_error&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;linux_error&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;cygwin_error&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                emit deprecation messages and are slated for removal.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The old names for &lt;code&gt;&lt;span class="identifier"&gt;generic_category&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;system_category&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; emit deprecation messages and are
                slated for removal.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;failed&lt;/span&gt;&lt;/code&gt; is deprecated and is slated
                for removal. &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
                for &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;/code&gt;
                has been reverted to its old meaning of &lt;code&gt;&lt;span class="identifier"&gt;value&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt; &lt;span class="special"&gt;!=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;/code&gt;. This is done for compatibility with
                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;/code&gt; as the next release
                is expected to improve interoperability with &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;system_error&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                even further. &lt;em&gt;Note that this does not
                affect&lt;/em&gt; &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;failed&lt;/span&gt;&lt;/code&gt;,
                which is still alive and well.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The overload of &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;message&lt;/span&gt;&lt;/code&gt;
                that takes a buffer is deprecated and is slated for removal, for
                the same reasons. &lt;em&gt;Note that this does
                not affect&lt;/em&gt; &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;message&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/numeric/ublas/"&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct C++ allocator model support to fix compilation in C++20 standards
                mode. (Glen Fernandes and Conrad Poelman)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/vmd/"&gt;VMD&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The VMD number parsing has been upgraded to support the ability for
                the end-user to change the number limits in the Preprocessor library.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The macro BOOST_VMD_IS_GENERAL_IDENTIFIER has been added to support
                the parsing of input that represents a preprocessor token which matches
                the VMD identifier syntax, without having to register the identifier
                as a specific identifier.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/wave/"&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new C++20 tokens, including the spaceship operator &amp;lt;=&amp;gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/wave/issues/94"&gt;#94&lt;/a&gt;: fix incorrect behavior of __LINE__ and __FILE__
                      under rescanning
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_75_0.compilers_tested"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 4.0.1, 6.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++0x: 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0,
                9.0.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
                6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++14: 18.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 9.0.0, 9.1.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++17: 9.1.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++1z: 9.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++2a: 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.6.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1z: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++0x: 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
                6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++14: 18.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++17: 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++1z: 9.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++2a: 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.6.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1z: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_75_0.acknowledgements"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.74.0</title><link>https://www.boost.org/users/history/version_1_74_0.html</link><guid>https://www.boost.org/users/history/version_1_74_0.html</guid><pubDate>Fri, 14 Aug 2020 05:02:54 +0000</pubDate><description>


  &lt;div id="version_1_74_0.new_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stl_interfaces/"&gt;STLInterfaces&lt;/a&gt;:&lt;/span&gt; A library
          of CRTP bases to ease the writing of STL views, iterators, and sequence
          containers, from Zach Laine.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_74_0.updated_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added an implementation of the proposed standard executors (&lt;a href="http://wg21.link/P0443r13"&gt;P0443r13&lt;/a&gt;, &lt;a href="http://wg21.link/P1348r0"&gt;P1348r0&lt;/a&gt;,
                and &lt;a href="http://wg21.link/P1393r0"&gt;P1393r0&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for the proposed standard executors to Asio's I/O facilities.
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The supplied executors now meet the requirements for the proposed
                      standard executors. These classes also continue to meet the
                      existing requirements for the Networking TS model of executors.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      All I/O objects, asynchronous operations, and utilities will
                      interoperate with both new proposed standard executors, and
                      with existing Networking TS executors.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The &lt;code&gt;&lt;span class="identifier"&gt;any_io_executor&lt;/span&gt;&lt;/code&gt;
                      type alias has been introduced as the default runtime-polymorphic
                      executor for all I/O objects. This defaults to the &lt;code&gt;&lt;span class="identifier"&gt;execution&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;any_executor&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                      template. If required for backward compatibility, &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT&lt;/span&gt;&lt;/code&gt;
                      can be defined to use the old &lt;code&gt;&lt;span class="identifier"&gt;asio&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;executor&lt;/span&gt;&lt;/code&gt;
                      polymorphic wrapper instead.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Support for the existing Networking TS model of executors can
                      be disabled by defining &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_NO_TS_EXECUTORS&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added converting move construction and assignment to &lt;code&gt;&lt;span class="identifier"&gt;basic_waitable_timer&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled C++20 coroutine support when using &lt;tt&gt;gcc&lt;/tt&gt;
                10.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added overloads of &lt;code&gt;&lt;span class="identifier"&gt;co_spawn&lt;/span&gt;&lt;/code&gt;
                that launch an awaitable.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a new constructor overload to &lt;code&gt;&lt;span class="identifier"&gt;use_awaitable_t&lt;/span&gt;&lt;/code&gt;'s
                default executor adapter, to enable conversion between executor types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for using &lt;code&gt;&lt;span class="identifier"&gt;detached_t&lt;/span&gt;&lt;/code&gt;
                as a default completion token, by adding members &lt;code&gt;&lt;span class="identifier"&gt;as_default_on&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;as_default_on_t&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a move constructor to &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stream&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stream&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                write operations to linearise gather-write buffer sequences.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added compile-time detection of the deprecated &lt;code&gt;&lt;span class="identifier"&gt;asio_handler_invoke&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;asio_handler_allocate&lt;/span&gt;&lt;/code&gt;,
                and &lt;code&gt;&lt;span class="identifier"&gt;asio_handler_deallocate&lt;/span&gt;&lt;/code&gt;
                hooks, when &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_NO_DEPRECATED&lt;/span&gt;&lt;/code&gt;
                is defined.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented a number of performance optimisations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added source location support to handler tracking.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented various improvements to the &lt;tt&gt;handlerviz.pl&lt;/tt&gt;
                tool.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;tt&gt;handlerlive.pl&lt;/tt&gt; tool, which processes
                handler tracking output to produce a list of "live" handlers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;tt&gt;handlertree.pl&lt;/tt&gt; tool, which filters handler
                tracking output to include only those events in the tree that produced
                the nominated handlers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added changes for clang-based Embarcadero C++ compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a deadlock that can occur when multiple threads concurrently
                initialise the Windows I/O completion port backend.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;async_compose&lt;/span&gt;&lt;/code&gt;
                to work with copyable handlers when passed by lvalue.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed completion signature deduction in &lt;code&gt;&lt;span class="identifier"&gt;co_spawn&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed a spurious &lt;code&gt;&lt;span class="identifier"&gt;Executor&lt;/span&gt;&lt;/code&gt;
                base class from the &lt;code&gt;&lt;span class="identifier"&gt;executor_binder&lt;/span&gt;&lt;/code&gt;
                implementation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various fixes and improvements in the documentation and examples.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Consult the &lt;a href="https://www.boost.org/doc/libs/1_74_0/doc/html/boost_asio/history.html"&gt;Revision
                History&lt;/a&gt; for further details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class="keyword"&gt;const&lt;/span&gt;&lt;/code&gt;
                qualifiers to some operations in &lt;code&gt;&lt;span class="identifier"&gt;atomic_ref&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class="identifier"&gt;yield&lt;/span&gt;&lt;/code&gt;
                instruction on ARMv8-A. The instruction is used internally in spin
                loops to reduce CPU power consumption.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for C++20 &lt;a href="https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_wait_notify_ops"&gt;waiting
                and notifying operations&lt;/a&gt;. The implementation includes generic
                backend that involves the internal lock pool, as well as specialized
                backends for Windows, Linux, FreeBSD, DragonFly BSD and NetBSD. Atomic
                types provide a new method &lt;code&gt;&lt;span class="identifier"&gt;has_native_wait_notify&lt;/span&gt;&lt;/code&gt;,
                a static boolean constant &lt;code&gt;&lt;span class="identifier"&gt;always_has_native_wait_notify&lt;/span&gt;&lt;/code&gt;
                and a set of capability macros that allow to detect if the implementation
                supports native waiting and notifying operations for a given type.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed internal representation of &lt;code&gt;&lt;span class="identifier"&gt;atomic_flag&lt;/span&gt;&lt;/code&gt;
                to use 32-bit storage. This allows for more efficient waiting and
                notifying operations on &lt;code&gt;&lt;span class="identifier"&gt;atomic_flag&lt;/span&gt;&lt;/code&gt;
                on some platforms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for build-time configuration of the internal lock pool
                size. The user can define the &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ATOMIC_LOCK_POOL_SIZE_LOG2&lt;/span&gt;&lt;/code&gt;
                macro to specify binary logarithm of the size of the lock pool. The
                default value is 8, meaning that the size of the lock pool is 256,
                up from 64 used in the previous release.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for a new set of atomic types dedicated for &lt;a href="https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_ipc"&gt;inter-process
                communication&lt;/a&gt;: &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic_flag&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic_ref&lt;/span&gt;&lt;/code&gt;. Users are recommended
                to port their code using non-IPC types for inter-process communication
                to the new types. The new types provide the same set of operations
                as their non-IPC counterparts, with the following differences:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Most operations have an added precondition that &lt;code&gt;&lt;span class="identifier"&gt;is_lock_free&lt;/span&gt;&lt;/code&gt; returns &lt;code&gt;&lt;span class="keyword"&gt;true&lt;/span&gt;&lt;/code&gt; for the given atomic object.
                      The library will issue a compile time error if this precondition
                      is known to be not satisfied at compile time.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      All provided operations are address-free, meaning that the
                      atomic object (in case of &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic_ref&lt;/span&gt;&lt;/code&gt;
                      - the referenced object) may be located in process-shared memory
                      or mapped into the same process at multiple different addresses.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The new &lt;code&gt;&lt;span class="identifier"&gt;has_native_wait_notify&lt;/span&gt;&lt;/code&gt;
                      operation and &lt;code&gt;&lt;span class="identifier"&gt;always_has_native_wait_notify&lt;/span&gt;&lt;/code&gt;
                      constant indicate support for native inter-process waiting
                      and notifying operations. When that support is not present,
                      the operations are implemented with a busy loop, which is less
                      efficient, but still is address-free. A separate set of capability
                      macros is also provided to indicate this support.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new &lt;code&gt;&lt;span class="identifier"&gt;atomic_unsigned_lock_free&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;atomic_signed_lock_free&lt;/span&gt;&lt;/code&gt;
                types introduced in C++20. The types indicate the atomic object type
                for an unsigned or signed integer, respectively, that is lock-free
                and preferably has native support for waiting and notifying operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new gcc assembler backends for ARMv8-A (for both AArch32 and
                AArch64). The new backends are used to implement operations not supported
                by compiler intrinsics (including 128-bit operations on AArch64)
                and can also be used when compiler intrinsics are not available.
                Both little and big endian targets are supported. AArch64 backend
                supports extensions defined in ARMv8.1 and ARMv8.3.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for big endian targets in the legacy ARM backend based
                on gcc assembler blocks (this backend is used on ARMv7 and older
                targets). Previously, the backend assumed little endian memory layout,
                which is significant for 64-bit operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved performance of seq_cst stores and thread fences on x86 by
                using &lt;code&gt;&lt;span class="identifier"&gt;lock&lt;/span&gt;&lt;/code&gt;-prefixed
                instructions instead of &lt;code&gt;&lt;span class="identifier"&gt;mfence&lt;/span&gt;&lt;/code&gt;.
                This means that the operations no longer affect non-temporal stores,
                which was also not guaranteed before. Use specialized instructions
                and intrinsics to order non-temporal memory accesses.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed capability macros for 80-bit &lt;code&gt;&lt;span class="keyword"&gt;long&lt;/span&gt;
                &lt;span class="keyword"&gt;double&lt;/span&gt;&lt;/code&gt; on x86 targets not
                indicating lock-free operations even if 128-bit atomic operations
                were available.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation of gcc asm blocks on Alpha targets.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In the gcc &lt;code&gt;&lt;span class="identifier"&gt;__sync&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; intrinsics backend, fixed that store
                and load operations of large objects (larger than a pointer size)
                could be non-atomic. The implementation currently assumes that small
                objects can be stored with a single instruction atomically on all
                modern architectures.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This update brings bug fixes and support for the following changes
                changes in Boost.Asio:
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Beast supports &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_NO_DEPRECATED&lt;/span&gt;&lt;/code&gt;.
                Define this to help identify areas of your Beast and Asio code which
                use deprecated Asio interfaces.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Beast also supports &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_NO_TS_EXECUTORS&lt;/span&gt;&lt;/code&gt;.
                Define this to identify uses of executors from the now potentially
                outdated &lt;a href="https://cplusplus.github.io/networking-ts/draft.pdf"&gt;Networking
                TS&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Asio will use the &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0443r11.html"&gt;Standard
                Executors&lt;/a&gt; model by default. You can prevent this behaviour
                by defining &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT&lt;/span&gt;&lt;/code&gt;
                in which the Networking TS model will be used by default. Setting
                this flag does not prevent a program from using executors from the
                Standard Executors model explicitly.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                We'd love to know how you or your company use Beast, consider adding
                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
                and Individuals Using Beast&lt;/a&gt; list.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
                Notes&lt;/a&gt; for a complete list of changes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/bimap/"&gt;Bimap&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct allocator usage (fixes C++20 compilation). (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/config/"&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implement &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_CXX11_OVERRIDE&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_OVERRIDE&lt;/span&gt;&lt;/code&gt;.
                (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented the allocator access utilities which provide a replacement
                for &lt;code&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
                with individual traits and functions for each facility. They support
                the C++11 allocator model when possible and provide a fallback for
                C++98 compatibility. These are now used in Circular_Buffer, Wave,
                Lockfree, Heap, Smart_Ptr, Dynamic_Bitset, Format, Bimap and more.
                (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multiple fixes for the &lt;code&gt;&lt;span class="identifier"&gt;library_info&lt;/span&gt;&lt;/code&gt;
                work on empty shared objects.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Compilation fixes for C++98 and C++11 modes (&lt;a href="https://github.com/boostorg/dll/issues/28"&gt;#28&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes for &lt;code&gt;&lt;span class="identifier"&gt;smart_library&lt;/span&gt;&lt;/code&gt;
                manglings (thanks to XiaLiChao82 &lt;a href="https://github.com/boostorg/dll/issues/37"&gt;#37&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/endian/"&gt;Endian&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled scoped enumeration types in &lt;code&gt;&lt;span class="identifier"&gt;endian_reverse&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled &lt;code&gt;&lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="keyword"&gt;enum&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="keyword"&gt;float&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="keyword"&gt;double&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class="identifier"&gt;endian_reverse_inplace&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added an overload of &lt;code&gt;&lt;span class="identifier"&gt;endian_reverse_inplace&lt;/span&gt;&lt;/code&gt;
                for arrays.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed compile-time checks for support for symlinks and hardlink
                on Windows. Instead, a runtime check is used. (&lt;a href="https://github.com/boostorg/filesystem/pull/142"&gt;PR#142&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed handling of reparse points in &lt;code&gt;&lt;span class="identifier"&gt;canonical&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;read_symlink&lt;/span&gt;&lt;/code&gt;
                on Windows. This also affects other algorithms that involve &lt;code&gt;&lt;span class="identifier"&gt;canonical&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;read_symlink&lt;/span&gt;&lt;/code&gt;
                in their implementation. (&lt;a href="https://github.com/boostorg/filesystem/pull/100"&gt;PR#100&lt;/a&gt;, &lt;a href="https://github.com/boostorg/filesystem/issues/85"&gt;#85&lt;/a&gt;, &lt;a href="https://github.com/boostorg/filesystem/issues/99"&gt;#99&lt;/a&gt;,
                &lt;a href="https://github.com/boostorg/filesystem/issues/123"&gt;#123&lt;/a&gt;, &lt;a href="https://github.com/boostorg/filesystem/issues/125"&gt;#125&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed that &lt;code&gt;&lt;span class="identifier"&gt;read_symlink&lt;/span&gt;&lt;/code&gt;
                on Windows could potentially fail or cause failures elsewhere with
                a sharing violation error, if the same symlink was opened concurrently.
                (&lt;a href="https://github.com/boostorg/filesystem/issues/138"&gt;#138&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed that &lt;code&gt;&lt;span class="identifier"&gt;is_symlink&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;directory_entry&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; would always return &lt;code&gt;&lt;span class="keyword"&gt;false&lt;/span&gt;&lt;/code&gt;, even if the directory entry
                actually referred to a symlink. (&lt;a href="https://github.com/boostorg/filesystem/pull/148"&gt;PR#148&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing status inspection operation overloads for &lt;code&gt;&lt;span class="identifier"&gt;directory_entry&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt; (e.g. &lt;code&gt;&lt;span class="identifier"&gt;is_directory&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;directory_entry&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt;
                &lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;&amp;amp;)&lt;/span&gt;&lt;/code&gt;).
                Removed incorrect &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                specifications for the overloads not taking the &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
                arguments.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt; implementation
                has been updated to perform checks on the source and target files,
                as required by C++20 ([fs.op.copy.file]/4.1). In particular, the
                operation will fail if the source or target file is not a regular
                file or the source and target paths identify the same file.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt; on POSIX
                systems will now also copy the source file permissions to the target
                file, if the target file is overwritten.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
                implementations based on &lt;code&gt;&lt;span class="identifier"&gt;sendfile&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;copy_file_range&lt;/span&gt;&lt;/code&gt;
                system calls on Linux, which may improve file copying performance,
                especially on network filesystems.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Deprecated:&lt;/strong&gt; The &lt;code&gt;&lt;span class="identifier"&gt;copy_option&lt;/span&gt;&lt;/code&gt;
                enumeration that is used with the &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
                operation is deprecated. As a replacement, the new enum &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;/code&gt; (note the trailing
                's') has been added. The new enum contains values similar to the
                &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;/code&gt; enum
                from C++20. The old enum values are mapped onto the new enum. The
                old enum will be removed in a future release.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;skip_existing&lt;/span&gt;&lt;/code&gt;
                option, which allows &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
                operation to succeed without overwriting the target file, if it exists.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;update_existing&lt;/span&gt;&lt;/code&gt;
                option, which allows &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
                operation to conditionally overwrite the target file, if it exists,
                if its last write time is older than that of the replacement file.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
                now returns &lt;code&gt;&lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;/code&gt;, which
                indicates whether the file was copied.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New, breaking change:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;copy&lt;/span&gt;&lt;/code&gt; operation has been extended
                and reworked to implement behavior specified in C++20 [fs.op.copy].
                This includes support for &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;recursive&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;copy_symlinks&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;skip_symlinks&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;directories_only&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;create_symlinks&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;create_hard_links&lt;/span&gt;&lt;/code&gt; options. The
                operation performs additional checks based on the specified options.
                Applying &lt;code&gt;&lt;span class="identifier"&gt;copy&lt;/span&gt;&lt;/code&gt; to
                a directory with default &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;/code&gt;
                will now also copy files residing in that directory (but not nested
                directories or files in those directories).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;create_directory&lt;/span&gt;&lt;/code&gt;
                overload taking two paths. The second path is a path to an existing
                directory, which is used as a source of permission attributes to
                use in the directory to create.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Deprecated:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;copy_directory&lt;/span&gt;&lt;/code&gt;
                operation has been deprecated in favor of the new &lt;code&gt;&lt;span class="identifier"&gt;create_directory&lt;/span&gt;&lt;/code&gt;
                overload. Note that the two operations have reversed order of the
                path arguments.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;equivalent&lt;/span&gt;&lt;/code&gt; on POSIX
                systems now returns the actual error code from the OS if one of the
                paths does not resolve to a file. Previously the function would return
                an error code of 1. (&lt;a href="https://github.com/boostorg/filesystem/issues/141"&gt;#141&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;equivalent&lt;/span&gt;&lt;/code&gt; no longer
                considers file size and last modification time in order to test whether
                the two paths refer to the same file. These checks could result in
                a false negative if the file was modified during the &lt;code&gt;&lt;span class="identifier"&gt;equivalent&lt;/span&gt;&lt;/code&gt; call.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;absolute&lt;/span&gt;&lt;/code&gt;
                overloads taking &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
                argument.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Operations that have &lt;code&gt;&lt;span class="identifier"&gt;current_path&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; as the default value of their arguments
                and also have an &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
                argument will use the &lt;code&gt;&lt;span class="identifier"&gt;current_path&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;&amp;amp;&lt;/span&gt; &lt;span class="identifier"&gt;ec&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; overload to obtain the current path,
                so that its failure is reported via the &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
                argument instead of an exception.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;space&lt;/span&gt;&lt;/code&gt; now initializes
                the &lt;code&gt;&lt;span class="identifier"&gt;space_info&lt;/span&gt;&lt;/code&gt; structure
                members to -1 values on error, as required by C++20 ([fs.op.space]/1).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;space&lt;/span&gt;&lt;/code&gt; on Windows
                now accepts paths referring to arbitrary files, not only directories.
                This is similar to POSIX systems and corresponds to the operation
                description in C++20. (&lt;a href="https://github.com/boostorg/filesystem/issues/73"&gt;#73&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added implementation of &lt;code&gt;&lt;span class="identifier"&gt;temp_directory_path&lt;/span&gt;&lt;/code&gt; for Windows
                CE. (&lt;a href="https://github.com/boostorg/filesystem/pull/25"&gt;PR#25&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Improved compatibility with
                &lt;a href="https://wasi.dev/"&gt;WASI&lt;/a&gt; platform. (&lt;a href="https://github.com/boostorg/filesystem/pull/144"&gt;PR#144&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Improved support for Embarcadero
                compilers. (&lt;a href="https://github.com/boostorg/filesystem/pull/130"&gt;PR#130&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added implementations of &lt;code&gt;&lt;span class="identifier"&gt;unique_path&lt;/span&gt;&lt;/code&gt; operation based on
                &lt;code&gt;&lt;span class="identifier"&gt;getrandom&lt;/span&gt;&lt;/code&gt; (Linux),
                &lt;code&gt;&lt;span class="identifier"&gt;arc4random_buf&lt;/span&gt;&lt;/code&gt; (OpenBSD/FreeBSD/CloudABI)
                and BCrypt (Windows) system APIs.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Deprecated:&lt;/strong&gt; Auto-linking against
                system libraries on Windows with MSVC-compatible compilers is deprecated
                and will be removed in a future release. This affects users linking
                against static library of Boost.Filesystem. Users are advised to
                update their project build systems to either use a shared library
                of Boost.Filesystem, or explicitly specify the dependencies of Boost.Filesystem
                in the linker command line. Users of shared library of Boost.Filesystem
                are not affected.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/flyweight/index.html"&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance work.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/format/"&gt;Format&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct allocator usage (fixes C++20 compilation). (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improvements
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/720"&gt;PR#720&lt;/a&gt; Additional R-tree constructors (thanks to
                      Caian Benedicto).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Various improvements in buffer, set and relational operations.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Solved issues
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/issues/709"&gt;#709&lt;/a&gt; memcpy called for object with no trivial copy-assignment.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/issues/721"&gt;#721&lt;/a&gt; Compilation error in bgi::detail::rtree::visitors::insert.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/issues/727"&gt;#727&lt;/a&gt; MSVC warning: conditional expression is constant.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfixes
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/700"&gt;PR#700&lt;/a&gt; Missing cases for default strategies in distance
                      algorithm.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/738"&gt;PR#738&lt;/a&gt; Longitudes out of range in direct geodesic
                      formulas.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/gil/"&gt;GIL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added new constructor initializing &lt;code&gt;&lt;span class="identifier"&gt;any_image&lt;/span&gt;&lt;/code&gt;
                      from r-value reference to any image (&lt;a href="https://github.com/boostorg/gil/pull/486"&gt;PR#486&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Implemented mechanism to reverse &lt;code&gt;&lt;span class="identifier"&gt;kernel_2d&lt;/span&gt;&lt;/code&gt;
                      (&lt;a href="https://github.com/boostorg/gil/pull/489"&gt;PR#489&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      BREAKING: Replace Boost.Variant with Boost.Variant2 (&lt;a href="https://github.com/boostorg/gil/pull/474"&gt;PR#474&lt;/a&gt;)
                      which completes removal on uses of Boost.MPL (missing from
                      Boost 1.72.0 change added &lt;a href="https://github.com/boostorg/gil/pull/274"&gt;PR#274&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Use perfect forwarding from apply_operation to visit (&lt;a href="https://github.com/boostorg/gil/pull/491"&gt;PR#491&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      BREAKING: Removed dependency on Boost.Variant
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed invalid conversion from RGB8 to CMYK32 due to overflow
                      (&lt;a href="https://github.com/boostorg/gil/pull/470"&gt;PR#470&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;image&lt;/span&gt;&lt;/code&gt;
                      constructor from other image (&lt;a href="https://github.com/boostorg/gil/pull/477"&gt;PR#477&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed error &lt;code&gt;&lt;span class="identifier"&gt;plane_view_t&lt;/span&gt;&lt;/code&gt;
                      is not a class or namespace name (&lt;a href="https://github.com/boostorg/gil/pull/481"&gt;PR#481&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;interleaved_view&lt;/span&gt;&lt;/code&gt;
                      factory using &lt;code&gt;&lt;span class="identifier"&gt;point&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;ptrdiff_t&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; for dimension (&lt;a href="https://github.com/boostorg/gil/pull/487"&gt;PR#487&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed documentation replacing uses MPL with MP11 in tutorial
                      (&lt;a href="https://github.com/boostorg/gil/pull/494"&gt;PR#494&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed missing header in &lt;code&gt;&lt;span class="identifier"&gt;numeric&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;kernel&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      to make it self-contained (&lt;a href="https://github.com/boostorg/gil/pull/502"&gt;PR#502&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Acknowledgements
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Samuel Debionne, Pranam Lashkari, Mateusz Loskot, Debabrata
                      Mandal
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/heap/"&gt;Heap&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct destruction of top node in &lt;code&gt;&lt;span class="identifier"&gt;skew_heap&lt;/span&gt;&lt;/code&gt;.
                (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct and simplify allocator use. (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/integer/"&gt;Integer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation of &lt;code&gt;&lt;span class="identifier"&gt;gcd&lt;/span&gt;&lt;/code&gt;
                in C++20 mode with clang 10.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved support for Embarcadero compilers. (&lt;a href="https://github.com/boostorg/integer/pull/21"&gt;PR#21&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/iterator/"&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;function_output_iterator&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; header is now deprecated. Users
                should replace its inclusion with &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;function_output_iterator&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
                (&lt;a href="https://github.com/boostorg/iterator/pull/51"&gt;PR#51&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved support for Embarcadero compilers. (&lt;a href="https://github.com/boostorg/iterator/pull/55"&gt;PR#55&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lexical_cast/"&gt;LexicalCast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed warnings on missing &lt;code&gt;&lt;span class="identifier"&gt;override&lt;/span&gt;&lt;/code&gt;
                (thanks to EugeneZelenko &lt;a href="https://github.com/boostorg/lexical_cast/issues/35"&gt;#35&lt;/a&gt;, &lt;a href="https://github.com/boostorg/lexical_cast/issues/34"&gt;#34&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes for the the Embarcadero compilers (thanks to Edward Diener).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The syslog sink backend now verifies the IP version of the
                      local and target addresses set by user. The addresses must
                      have the same IP version as was specified in the &lt;code&gt;&lt;span class="identifier"&gt;ip_version&lt;/span&gt;&lt;/code&gt; named parameter
                      on the sink backend construction (by default, IPv4 is assumed).
                      When an address is obtained as a result of host name resolution,
                      only addresses with matching IP version are considered. (&lt;a href="https://github.com/boostorg/log/issues/119"&gt;#119&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New Features:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Move constructors and assignment operators of various components
                      were marked &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a new &lt;code&gt;&lt;span class="identifier"&gt;range_manip&lt;/span&gt;&lt;/code&gt;
                      stream manipulator that can be used for outputting elements
                      of a range, optionally separated by a delimiter.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a new &lt;code&gt;&lt;span class="identifier"&gt;tuple_manip&lt;/span&gt;&lt;/code&gt;
                      stream manipulator that can be used for outputting elements
                      of a tuple or any other heterogeneous sequence, optionally
                      separated by a delimiter.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a new &lt;code&gt;&lt;span class="identifier"&gt;optional_manip&lt;/span&gt;&lt;/code&gt;
                      stream manipulator that can be used for outputting optionally
                      present values.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/mp11/"&gt;Mp11&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved compilation performance of &lt;code&gt;&lt;span class="identifier"&gt;mp_with_index&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;N&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; for large &lt;code&gt;&lt;span class="identifier"&gt;N&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;tuple_transform&lt;/span&gt;&lt;/code&gt;
                (contributed by Hans Dembinski.)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;a href="https://www.boost.org/libs/multi_index/doc/tutorial/basics.html#node_handling"&gt;node
                extraction and insertion&lt;/a&gt; following the analogous interface
                of associative containers as introduced in C++17. This feature has
                also been extended to non key-based indices, in contrast to C++ standard
                library sequence containers, which do not provide such functionality.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clarified documentation on read/write key extractors (issue &lt;a href="https://github.com/boostorg/multi_index/issues/32"&gt;#32&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance work.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/nowide/"&gt;Nowide&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The library now requires a C++11-compliant compiler and stdlib
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LFS: Add support for files &amp;gt; 2 GB where the underlying system
                supports it
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Generic UTF conversion functions are now available in the &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;nowide&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;utf&lt;/span&gt; &lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for &lt;code&gt;&lt;span class="identifier"&gt;stat&lt;/span&gt;&lt;/code&gt;
                with UTF-8 paths
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/outcome/"&gt;Outcome&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Announcements:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The v2.1 branch is expected to be retired end of 2020, with
                      the v2.2 branch becoming the default. You can use the future
                      v2.2 branch now using &lt;a href="https://github.com/ned14/outcome/tree/better_optimisation"&gt;&lt;code&gt;&lt;span class="identifier"&gt;better_optimisation&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
                      This branch has a number of major breaking changes to Outcome
                      v2.1, see the front page for details.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enhancements:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      BREAKING CHANGE &lt;code&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;/code&gt;
                      results and outcomes no longer default construct types during
                      explicit construction. Previously if you explicitly constructed
                      a &lt;code&gt;&lt;span class="identifier"&gt;result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                      from a non-errored &lt;code&gt;&lt;span class="identifier"&gt;result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, it default constructed
                      &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;/code&gt;. This was
                      found to cause unhelpful surprise, so it has been disabled.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New macro &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/span&gt;&lt;/code&gt;.
                      The macro &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/span&gt;&lt;/code&gt;
                      can be used to enable aliasing of older naming and features
                      to newer naming and features when using a newer version of
                      Outcome.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Concepts now have snake case style naming instead of camel
                      case style. When Outcome was first implemented, it was thought
                      that C++ 20 concepts were going to have camel case style. This
                      was changed before the C++ 20 release, and Outcome's concepts
                      have been renamed similarly. This won't break any code in Outcome
                      v2.1, as compatibility aliases are provided. However code compiled
                      against Outcome v2.2 will need to be upgraded, unless &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/span&gt;&lt;/code&gt;
                      is set to &lt;code&gt;&lt;span class="number"&gt;210&lt;/span&gt;&lt;/code&gt; or
                      lower.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Concepts now live in &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_V2_NAMESPACE&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;concepts&lt;/span&gt;&lt;/code&gt;
                      namespace. Previously concepts lived in the &lt;code&gt;&lt;span class="identifier"&gt;convert&lt;/span&gt;&lt;/code&gt;
                      namespace, now they live in their own namespace.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New concepts &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;basic_outcome&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; added. End users were finding
                      an unhelpful gap in between &lt;code&gt;&lt;span class="identifier"&gt;is_basic_result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;value_or_error&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; where they wanted a concept
                      that matched types which were &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;/code&gt;,
                      but not exactly one of those. Concepts filling that gap were
                      added.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Operation &lt;code&gt;&lt;span class="identifier"&gt;TRY&lt;/span&gt;&lt;/code&gt;
                      works differently from Outcome v2.2 onwards. This is a severely
                      code breaking change which change the syntax of how one uses
                      &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_TRY&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;. A regular expression suitable
                      for upgrading code can be found in the list of changes between
                      Outcome v2.1 and v2.2.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/ned14/outcome/issues/224"&gt;#224&lt;/a&gt;
                      The clang Apple ships in Xcode 11.4 (currently the latest)
                      has not been patched with the fixes to LLVM clang that fix
                      &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_constructible&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt;
                      &lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;
                      failing to compile which I originally submitted years ago.
                      So give up waiting on Apple to fix their clang, add a workaround
                      to Outcome.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Spare storage could not be used from within no-value policy
                      classes. Due to an obvious brain fart when writing the code
                      at the time, the spare storage APIs had the wrong prototype
                      which prevented them working from within policy classes. Sorry.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed internal ambiguity problem between &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;type_erasure&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;any&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;any&lt;/span&gt;&lt;/code&gt; (issue &lt;a href="https://github.com/boostorg/poly_collection/issues/17"&gt;#17&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance work.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/smart_ptr/"&gt;SmartPtr&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;owner_equals&lt;/span&gt;&lt;/code&gt;
                to &lt;code&gt;&lt;span class="identifier"&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;weak_ptr&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;local_shared_ptr&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;owner_hash_value&lt;/span&gt;&lt;/code&gt;
                to &lt;code&gt;&lt;span class="identifier"&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;weak_ptr&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;owner_equal_to&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;owner_hash&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt; specializations for &lt;code&gt;&lt;span class="identifier"&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;local_shared_ptr&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt; support to, and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;equal_to&lt;/span&gt;&lt;/code&gt;
                specializations for, &lt;code&gt;&lt;span class="identifier"&gt;weak_ptr&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a build error when compiled with &lt;code&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;fno&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;exceptions&lt;/span&gt;&lt;/code&gt; (thanks to Jeremiah
                Rodriguez &lt;a href="https://github.com/boostorg/stacktrace/issues/91"&gt;#91&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/system/"&gt;System&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; now returns &lt;code&gt;&lt;span class="identifier"&gt;failed&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;span class="identifier"&gt;value&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt; &lt;span class="special"&gt;!=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_traits/"&gt;Type_Traits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;code&gt;&lt;span class="identifier"&gt;conjunction&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;disjunction&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;negation&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;is_trivially_copyable&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;is_scoped_enum&lt;/span&gt;&lt;/code&gt;, and
                &lt;code&gt;&lt;span class="identifier"&gt;is_unscoped_enum&lt;/span&gt;&lt;/code&gt;.
                (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed warnings on missing &lt;code&gt;&lt;span class="identifier"&gt;override&lt;/span&gt;&lt;/code&gt;
                (thanks to EugeneZelenko &lt;a href="https://github.com/boostorg/variant/issues/78"&gt;#78&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes for the the Embarcadero compilers (thanks to Edward Diener
                &lt;a href="https://github.com/boostorg/variant/issues/79"&gt;#79&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated header locations to avoid warnings about using deprecated
                headers (thanks to Andrey Semashev &lt;a href="https://github.com/boostorg/variant/issues/80"&gt;#80&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant2/"&gt;Variant2&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for derived types in &lt;code&gt;&lt;span class="identifier"&gt;visit&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved compilation performance for many (hundreds of) alternatives.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class="identifier"&gt;visit&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;R&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/wave/"&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implement C++20 features for variadics, including &lt;code&gt;&lt;span class="identifier"&gt;__VA_OPT__&lt;/span&gt;&lt;/code&gt;
                (&lt;a href="https://github.com/boostorg/wave/pull/75"&gt;PR#75&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implement &lt;code&gt;&lt;span class="identifier"&gt;__has_include&lt;/span&gt;&lt;/code&gt;
                (&lt;a href="https://github.com/boostorg/wave/pull/102"&gt;PR#102&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Introduce new sample: &lt;code&gt;&lt;span class="identifier"&gt;check_macro_naming&lt;/span&gt;&lt;/code&gt;,
                useful with Boost itself (&lt;a href="https://github.com/boostorg/wave/pull/97"&gt;PR#97&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix compilation issue caused by &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator&lt;/span&gt;&lt;/code&gt;
                member removal in C++20 (&lt;a href="https://github.com/boostorg/wave/pull/72"&gt;PR#72&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Repair Xpressive lexer and &lt;code&gt;&lt;span class="identifier"&gt;token_statistics&lt;/span&gt;&lt;/code&gt;
                sample (&lt;a href="https://github.com/boostorg/wave/pull/79"&gt;PR#79&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Repair lexertl lexer (&lt;a href="https://github.com/boostorg/wave/pull/78"&gt;PR#78&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensure hooks are run on predefined macros as well (&lt;a href="https://github.com/boostorg/wave/pull/87"&gt;PR#87&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various minor bug fixes
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                C++98/03 support is now deprecated and will be removed in 1.77
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/yap/"&gt;YAP&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation errors for placeholders; they now work in the general
                case, and in particular work with yap::print().
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                constexpr all the YAP.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix printing of correct value category in yap::print().
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Doc clarification.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_74_0.updated_tools"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/tools/boostbook/"&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Change encoding of generated documentation from US-ASCII to UTF-8.
                (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_74_0.compilers_tested"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 4.0.1, 6.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++0x: 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
                6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++14: 18.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++17: 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++1z: 9.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++2a: 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.6.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1z: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++0x: 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
                6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++14: 18.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++17: 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++1z: 9.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++2a: 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.6.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1z: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_74_0.acknowledgements"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.73.0</title><link>https://www.boost.org/users/history/version_1_73_0.html</link><guid>https://www.boost.org/users/history/version_1_73_0.html</guid><pubDate>Tue, 28 Apr 2020 03:57:05 +0000</pubDate><description>


  &lt;div id="version_1_73_0.known_issues"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Known Issues&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      These are patches from library authors which were found too late to be fixed
      in the release. Be careful as they have not been through the normal testing
      process.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Outcome &lt;code&gt;&lt;span class="identifier"&gt;status_code_domain&lt;/span&gt;&lt;/code&gt;
          assertion removal
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="https://www.boost.org/patches/1_73_0/0001-outcome-assert.patch"&gt;Outcome patch&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Beast and coroutines
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="https://www.boost.org/patches/1_73_0/0002-beast-coroutines.patch"&gt;Beast patch&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;div id="version_1_73_0.known_issues.new_libraries"&gt;
      &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/nowide/"&gt;Nowide&lt;/a&gt;:&lt;/span&gt; Standard library functions
            with UTF-8 API on Windows, from Artyom Beilis.
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/static_string/"&gt;StaticString&lt;/a&gt;:&lt;/span&gt; A dynamically
            resizable string of characters with compile-time fixed capacity and contiguous
            embedded storage, from Vinnie Falco and Krystian Stasiowski
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div id="version_1_73_0.known_issues.updated_libraries"&gt;
      &lt;h3&gt;&lt;span class="link"&gt;Updated
      Libraries&lt;/span&gt;&lt;/h3&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/align/"&gt;Align&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Update &lt;code&gt;&lt;span class="identifier"&gt;aligned_alloc&lt;/span&gt;&lt;/code&gt;
                  to support older mingw32.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/any/"&gt;Any&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Speedup compilation by not including &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;algorithm&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Maintenance work, including CI hardening.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed compatibility with C++20 concept syntax.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Marked the POSIX descriptor classes' move constructors as &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added the &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;host_name_verification&lt;/span&gt;&lt;/code&gt; class,
                  which is a drop-in replacement for &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;rfc2818_verification&lt;/span&gt;&lt;/code&gt;.
                  The &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;rfc2818_verification&lt;/span&gt;&lt;/code&gt; class has
                  been marked as deprecated. As a consequence of this change, SSL
                  support now depends on functions that were introduced in OpenSSL
                  1.0.2.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added an &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;context&lt;/span&gt;&lt;/code&gt; constructor to take ownership
                  of a native handle.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed C++ language version detection with &lt;tt&gt;gcc&lt;/tt&gt;
                  to use &lt;code&gt;&lt;span class="identifier"&gt;__cplusplus&lt;/span&gt;&lt;/code&gt;
                  macro.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed a work counting issue in the asynchronous resolve operation
                  for endpoints.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed the &lt;code&gt;&lt;span class="identifier"&gt;strand&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; converting constructors
                  and assignment operators.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Ensured that resolvers are restarted correctly after a fork.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed compatibility with the current NetBSD release.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Removed spurious handler requirement checks in some &lt;code&gt;&lt;span class="identifier"&gt;async_read&lt;/span&gt;&lt;/code&gt; overloads.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed the &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;context&lt;/span&gt;&lt;/code&gt;
                  class to propagate non-EOF errors from the &lt;code&gt;&lt;span class="identifier"&gt;add_certificate_authority&lt;/span&gt;&lt;/code&gt;
                  function.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed a Windows-specific &lt;code&gt;&lt;span class="identifier"&gt;thread_pool&lt;/span&gt;&lt;/code&gt;
                  destructor hang that occurred when the pool had an associated I/O
                  object.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed the &lt;tt&gt;select&lt;/tt&gt; reactor to recreate the "self
                  pipe trick" sockets on error. This addresses an issue on some
                  versions of Windows, where these sockets are discconected after
                  a system sleep.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed a compile error in the buffered streams due to the lack of
                  reference collapsing in C++98.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed the &lt;code&gt;&lt;span class="identifier"&gt;priority_scheduler&lt;/span&gt;&lt;/code&gt;
                  example to demonstrate calls to &lt;code&gt;&lt;span class="identifier"&gt;shutdown&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;destroy&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Removed some unnecessary null pointer checks.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed Windows platform detection to recognise TV titles as Windows
                  apps.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added some emscripten compatibility patches.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed a compile error in the &lt;code&gt;&lt;span class="identifier"&gt;use_awaitable_t&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;as_default_on&lt;/span&gt;&lt;/code&gt;
                  function.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed all uses of the boost.bind placeholders to use the &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;placeholders&lt;/span&gt;&lt;/code&gt; namespace.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed a potential compile error in the &lt;code&gt;&lt;span class="identifier"&gt;async_compose&lt;/span&gt;&lt;/code&gt;
                  implementation due to incorrect overload selection.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Suppressed some non-virtual destructor warnings.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Various documentation fixes and improvements.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/assert/"&gt;Assert&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added &lt;code&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Implemented C++20 &lt;code&gt;&lt;span class="identifier"&gt;atomic_ref&lt;/span&gt;&lt;/code&gt;.
                  See &lt;a href="https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref"&gt;docs&lt;/a&gt;
                  and especially the &lt;a href="https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref.caveats"&gt;caveats&lt;/a&gt;
                  section.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Implemented &lt;code&gt;&lt;span class="identifier"&gt;atomic_flag&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;test&lt;/span&gt;&lt;/code&gt;
                  operation, which was introduced in C++20.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                  should now take into account alignment requirements of &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;/code&gt;, which makes a difference if
                  those requirements are higher than that of the internal storage
                  of &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added static asserts enforcing the requirements on the value type
                  &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;/code&gt; used with &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;atomic_ref&lt;/span&gt;&lt;/code&gt;.
                  This should prohibit invalid types from being used as atomics.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Improved internal lock pool implementation. The pool is larger,
                  and lock selection accounts for atomic object alignment, which
                  should reduce the potential of thread contention.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed incorrect x86 code generated for &lt;code&gt;&lt;span class="identifier"&gt;bit_test_and_&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; operations on 8 and 16-bit arguments.
                  Other architectures are not affected.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed a possible unaligned memory access in &lt;code&gt;&lt;span class="identifier"&gt;compare_exchange_&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; operations, if alignment requirements
                  of &lt;code&gt;&lt;span class="identifier"&gt;value_type&lt;/span&gt;&lt;/code&gt; are
                  less than that of the internal storage of &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; no longer includes &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atomic_flag&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;fences&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                  and only defines the &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;/code&gt;
                  class template and related typedefs. Include the other headers
                  explicitly or use &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                  to include all parts of Boost.Atomic.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  The &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;storage&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
                  accessor and associated &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;storage_type&lt;/span&gt;&lt;/code&gt;
                  type are deprecated. Instead, users are advised to use &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;value&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
                  and &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;value_type&lt;/span&gt;&lt;/code&gt;, respectively. Users
                  can define &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ATOMIC_SILENCE_STORAGE_DEPRECATION&lt;/span&gt;&lt;/code&gt;
                  to disable deprecation warnings for the time of transition. The
                  deprecated pieces will be removed in a future release.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Removed support for &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ATOMIC_DETAIL_HIGHLIGHT_OP_AND_TEST&lt;/span&gt;&lt;/code&gt;.
                  This macro was used as a helper for transition to the updated returned
                  values of &lt;code&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;span class="identifier"&gt;_and_test&lt;/span&gt;&lt;/code&gt;
                  operations in Boost.Atomic 1.67, which was released 2 years before
                  1.73.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  This is a maintenance update.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Nested &lt;code&gt;&lt;span class="identifier"&gt;mutable_data_type&lt;/span&gt;&lt;/code&gt;
                  in Beast dynamic buffers is deprecated.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  We'd love to know how you or your company use Beast, consider adding
                  an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
                  and Individuals Using Beast&lt;/a&gt; list.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
                  Notes&lt;/a&gt; for a complete list of changes.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href="https://github.com/boostorg/context/issues/133"&gt;#133&lt;/a&gt;: IBM Z: Fix fcontext routines
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href="https://github.com/boostorg/context/issues/132"&gt;#132&lt;/a&gt;: mips64/n64: .align 3
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href="https://github.com/boostorg/context/issues/131"&gt;#131&lt;/a&gt;: Use OSPLAT MIPS32/MIPS64 to set different ABI
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href="https://github.com/boostorg/context/issues/129"&gt;#129&lt;/a&gt;: Fix non-PIC in RISC-V assembly
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/conversion/"&gt;Conversion&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;polymorphic_downcast&lt;/span&gt;&lt;/code&gt; for references
                  (thanks to Julien Delacroix for the patch).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Significant docs update.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/date_time/"&gt;date_time&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href="https://github.com/boostorg/date_time/issues/123"&gt;#123&lt;/a&gt;: Support constexpr in c++14 and above
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href="https://github.com/boostorg/date_time/issues/134"&gt;#134&lt;/a&gt;: Make date_time all inline. Users no longer need
                  to link the library for any functions. Library remains for build
                  compatibility.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href="https://github.com/boostorg/date_time/issues/132"&gt;#132&lt;/a&gt;: Deprecate support for legacy io and &lt;code&gt;&lt;span class="identifier"&gt;USE_DATE_TIME_PRE_1_33_FACET_IO&lt;/span&gt;&lt;/code&gt;
                  macro
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Misc documentation updates and bugfixes.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixes and tests for demangling in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;smart_library&lt;/span&gt;&lt;/code&gt;
                  (thanks to Ramil Gauss for &lt;a href="https://github.com/boostorg/dll/issues/35"&gt;#35&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Make UB sanitizers happy with &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;load_mode&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;type&lt;/span&gt;&lt;/code&gt;
                  &lt;a href="https://github.com/boostorg/dll/issues/30"&gt;#30&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Ceased dependence on MPL improving compile times (thanks to Nikita
                  Kniazev for &lt;a href="https://github.com/boostorg/dll/issues/34"&gt;#34&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang and ICC on Windows fixes and CI support for those platforms
                  (thanks to Nikita Kniazev &lt;a href="https://github.com/boostorg/dll/issues/33"&gt;#33&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Maintenance work, including CI hardening and tests improving.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dynamic_bitset/"&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed a portability issue in the definition of the maximum block
                  limit.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/flyweight/index.html"&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Maintenance work.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Improvements
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href="https://github.com/boostorg/geometry/pull/650"&gt;PR#650&lt;/a&gt; Missing input combinations in &lt;code&gt;&lt;span class="identifier"&gt;intersection&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
                        and introduction of tupled-output.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href="https://github.com/boostorg/geometry/pull/671"&gt;PR#671&lt;/a&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;d3&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;point_xyz&lt;/span&gt;&lt;/code&gt;
                        geometry model (thanks to Digvijay Janartha).
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Solved issues
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href="https://github.com/boostorg/geometry/issues/657"&gt;#657&lt;/a&gt; Incorrect definition of &lt;code&gt;&lt;span class="identifier"&gt;EPSG&lt;/span&gt;&lt;span class="special"&gt;:&lt;/span&gt;&lt;span class="number"&gt;3785&lt;/span&gt;&lt;/code&gt;.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfixes
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href="https://github.com/boostorg/geometry/pull/639"&gt;PR#639&lt;/a&gt; R-tree exception-safety improvement.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href="https://github.com/boostorg/geometry/pull/668"&gt;PR#668&lt;/a&gt; Andoyer inverse formula fixed for close
                        points.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href="https://github.com/boostorg/geometry/pull/687"&gt;PR#687&lt;/a&gt; Fixed dangling reference in distance algorithm.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Deprecation
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href="https://github.com/boostorg/geometry/issues/590"&gt;#590&lt;/a&gt; Support for C++03 has been deprecated and
                        Geometry will require C++14 from Boost 1.75 onwards.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/gil/"&gt;GIL&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Added move constructor and move assignment operator to &lt;code&gt;&lt;span class="identifier"&gt;image&lt;/span&gt;&lt;/code&gt; class (&lt;a href="https://github.com/boostorg/gil/pull/457"&gt;PR#457&lt;/a&gt;).
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        New member function &lt;code&gt;&lt;span class="identifier"&gt;size&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class="identifier"&gt;any_image_view&lt;/span&gt;&lt;/code&gt;
                        class (&lt;a href="https://github.com/boostorg/gil/pull/456"&gt;PR#456&lt;/a&gt;).
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Replace Boost.Test with Boost.LightweightTest as the only
                        test framework used in GIL (&lt;a href="https://github.com/boostorg/gil/pull/459"&gt;PR#459&lt;/a&gt;) and (&lt;a href="https://github.com/boostorg/gil/pull/464"&gt;PR#464&lt;/a&gt;).
                        This also restructured the &lt;code&gt;&lt;span class="identifier"&gt;test&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;extension&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;io&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;/code&gt; sub-tree and targets in
                        related &lt;code&gt;&lt;span class="identifier"&gt;Jamfile&lt;/span&gt;&lt;/code&gt;-s.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Removed remaining uses of Boost.MPL (&lt;a href="https://github.com/boostorg/gil/pull/459"&gt;PR#459&lt;/a&gt;).
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Renamed all macros using &lt;code&gt;&lt;span class="identifier"&gt;BOOST_GIL_&lt;/span&gt;&lt;/code&gt;
                        prefix (&lt;a href="https://github.com/boostorg/gil/pull/411"&gt;PR#411&lt;/a&gt;).
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Renamed all CMake configuration options using &lt;code&gt;&lt;span class="identifier"&gt;BOOST_GIL_&lt;/span&gt;&lt;/code&gt; prefix (&lt;a href="https://github.com/boostorg/gil/pull/419"&gt;PR#419&lt;/a&gt;).
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Removed &lt;code&gt;&lt;span class="identifier"&gt;extension&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;dynamic_image&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;reduce&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                        as unused and possibly unfinished (&lt;a href="https://github.com/boostorg/gil/pull/466"&gt;PR#466&lt;/a&gt;). An implementation
                        attempt of techniques described in the paper &lt;a href="http://lubomir.org/academic/MinimizingCodeBloat.pdf"&gt;Efficient
                        Run-Time Dispatching in Generic Programming with Minimal
                        Code Bloat&lt;/a&gt; by Lubomir Bourdev, Jaakko Jarvi.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Removed direct dependency on Boost.MPL, Boost.System and
                        Boost.Test.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Started removing public macros for compile-time configuration
                        of I/O extension tests, i.e. &lt;code&gt;&lt;span class="identifier"&gt;BOOST_GIL_IO_TEST_ALLOW_READING_IMAGES&lt;/span&gt;&lt;/code&gt;
                        and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_GIL_IO_TEST_ALLOW_WRITING_IMAGES&lt;/span&gt;&lt;/code&gt;.
                        Instead, if a test target is built, it builds all its test
                        cases unconditionally.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Avoid &lt;code&gt;&lt;span class="identifier"&gt;longjmp&lt;/span&gt;&lt;/code&gt;
                        interaction during destruction of I/O extension objects (&lt;a href="https://github.com/boostorg/gil/pull/433"&gt;PR#433&lt;/a&gt;).
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Fixed missing alignment default value in constructor of
                        &lt;code&gt;&lt;span class="identifier"&gt;image&lt;/span&gt;&lt;/code&gt; class
                        (&lt;a href="https://github.com/boostorg/gil/pull/429"&gt;PR#429&lt;/a&gt;).
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Fixed segmentation fault when reading corrupted PNG file
                        (&lt;a href="https://github.com/boostorg/gil/pull/414"&gt;PR#414&lt;/a&gt;).
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Fixed illegal initialization of return values in the old
                        IOv1 interface of I/O extension (&lt;a href="https://github.com/boostorg/gil/pull/409"&gt;PR#409&lt;/a&gt;).
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Acknowledgements
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Samuel Debionne, Thiago Henrique Hüpner, Pranam Lashkari,
                        Mateusz Loskot, Debabrata Mandal, Olzhas Zhumabek
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/histogram/"&gt;Histogram&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  New features
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Added &lt;code&gt;&lt;span class="identifier"&gt;crop&lt;/span&gt;&lt;/code&gt;
                        command to &lt;code&gt;&lt;span class="identifier"&gt;reduce&lt;/span&gt;&lt;/code&gt;
                        algorithm
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;code&gt;&lt;span class="identifier"&gt;slice&lt;/span&gt;&lt;/code&gt; command
                        in &lt;code&gt;&lt;span class="identifier"&gt;reduce&lt;/span&gt;&lt;/code&gt;
                        now works on &lt;code&gt;&lt;span class="identifier"&gt;category&lt;/span&gt;&lt;/code&gt;
                        axis
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Added &lt;code&gt;&lt;span class="identifier"&gt;count&lt;/span&gt;&lt;/code&gt;
                        accumulator, can be used to add arbitrary metadata to each
                        cell
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;code&gt;&lt;span class="identifier"&gt;sum&lt;/span&gt;&lt;/code&gt; algorithm
                        gained a new argument to optionally sum only over inner bins
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Several fixes for bugs in corner cases
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Enhanced documentation
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        How to use Boost.Histogram as a backend in an external API
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        More on how to use Boost.Histogram with custom accumulators
                        and Boost.Accumulators
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        More on how to use &lt;code&gt;&lt;span class="identifier"&gt;reduce&lt;/span&gt;&lt;/code&gt;
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Updated benchmarks
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  See the &lt;a href="https://www.boost.org/libs/histogram/doc/html/histogram/history.html"&gt;full
                  changelog here&lt;/a&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/icl/"&gt;icl&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href="https://github.com/boostorg/icl/pull/23"&gt;PR#23&lt;/a&gt;: Remove references to date_time compiled library.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href="https://github.com/boostorg/icl/pull/17"&gt;PR#17&lt;/a&gt;: Fix forward decl lower and upper less equal.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Misc bugfixes.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/io/"&gt;IO&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Made all the IOS state saver classes non-copyable. (Glen Fernandes)
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Correctly handle error upon first read from the input stream when
                  reading a quoted string. (Glen Fernandes)
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Implemented &lt;code&gt;&lt;span class="identifier"&gt;ostream_joiner&lt;/span&gt;&lt;/code&gt;
                  for delimiter based joining. (Glen Fernandes)
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Relocated &lt;code&gt;&lt;span class="identifier"&gt;ostream_string&lt;/span&gt;&lt;/code&gt;
                  from the Utility library to the IO library as &lt;code&gt;&lt;span class="identifier"&gt;ostream_put&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Correctly handle stream width and fill in quoted output. (Glen
                  Fernandes)
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Optimize quoted output to write directly to the stream buffer.
                  (Glen Fernandes)
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Glen Fernandes became the maintainer of the IO library.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lexical_cast/"&gt;LexicalCast&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Maintenance work, including CI hardening and better workarounds
                  for broken standard libraries (thanks to Nikita Kniazev &lt;a href="https://github.com/boostorg/lexical_cast/issues/31"&gt;#31&lt;/a&gt;,
                  &lt;a href="https://github.com/boostorg/lexical_cast/issues/32"&gt;#32&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  New Features:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Default sink used in trivial logging, when no sinks are registered
                        in the logging core, now automatically flushes output after
                        each log record. (&lt;a href="https://github.com/boostorg/log/issues/103"&gt;#103&lt;/a&gt;)
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;code&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;flush&lt;/span&gt;&lt;/code&gt; now performs a flush
                        on the default sink used for trivial logging, when no sinks
                        are registered.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bug fixes:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Added a workaround for some syslog API implementations (e.g.
                        glibc), which do not save the application identification
                        string in &lt;code&gt;&lt;span class="identifier"&gt;openlog&lt;/span&gt;&lt;/code&gt;
                        call. Such implementations could access already freed memory
                        on each &lt;code&gt;&lt;span class="identifier"&gt;syslog&lt;/span&gt;&lt;/code&gt;
                        call, resulting in undefined behavior. (&lt;a href="https://github.com/boostorg/log/issues/97"&gt;#97&lt;/a&gt;)
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Fixed that log file rotation on a specific day of month (e.g.
                        &lt;code&gt;&lt;span class="identifier"&gt;rotation_at_time_point&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;gregorian&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;greg_day&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="special"&gt;))&lt;/span&gt;&lt;/code&gt;) could be silently ignored
                        and not happen. (&lt;a href="https://github.com/boostorg/log/issues/98"&gt;#98&lt;/a&gt;)
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Fixed that &lt;code&gt;&lt;span class="identifier"&gt;text_file_backend&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;rotate_file&lt;/span&gt;&lt;/code&gt;
                        could throw if there were no log records written yet and
                        target file name pattern was set.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Ported various components of the library to &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt; to improve
                        compatibility with C++20 allocators.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Fixed compilation errors when building in MSYS2 Cygwin environment.
                        (&lt;a href="https://github.com/boostorg/log/issues/102"&gt;#102&lt;/a&gt;)
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
                  for more details.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  IMPORTANT: C++03 support is now deprecated and will be removed
                  from March 2021.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added Cubic Hermite Interpolation.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added Modified Akima Interpolation.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added PCHIP Interpolation.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added Quintic Hermite Interpolation.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added entropy to numerous distributions.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Allow trivial quadrature case where the two end points are equal,
                  and in addition allow bounds to be interchanged.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix exp_sinh quadrature to work with complex types over a non-native
                  range.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix miscellaneous compiler warnings in factorial.hpp.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Use std::chrono rather than boost::chrono in timed pFq calculations.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Remove much of the old boost::mpl dependencies to improve constexpr
                  support.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/mp11/"&gt;Mp11&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added &lt;code&gt;&lt;span class="identifier"&gt;mp_unique_if&lt;/span&gt;&lt;/code&gt;
                  (contributed by Kris Jusiak)
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added &lt;code&gt;&lt;span class="identifier"&gt;mp_flatten&lt;/span&gt;&lt;/code&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added &lt;code&gt;&lt;span class="identifier"&gt;mp_rotate_left&lt;/span&gt;&lt;/code&gt;,
                  &lt;code&gt;&lt;span class="identifier"&gt;mp_rotate_right&lt;/span&gt;&lt;/code&gt;
                  (contributed by Duncan Barber)
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added &lt;code&gt;&lt;span class="identifier"&gt;mp_compose&lt;/span&gt;&lt;/code&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added &lt;code&gt;&lt;span class="identifier"&gt;mp_power_set&lt;/span&gt;&lt;/code&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added &lt;code&gt;&lt;span class="identifier"&gt;mp_partial_sum&lt;/span&gt;&lt;/code&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added &lt;code&gt;&lt;span class="identifier"&gt;mp_iterate&lt;/span&gt;&lt;/code&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;code&gt;&lt;span class="identifier"&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;
                  is now &lt;a href="https://en.cppreference.com/w/cpp/named_req/AllocatorAwareContainer"&gt;&lt;code&gt;&lt;span class="identifier"&gt;AllocatorAware&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Swapping of internal &lt;code&gt;&lt;span class="identifier"&gt;KeyFromValue&lt;/span&gt;&lt;/code&gt;,
                  &lt;code&gt;&lt;span class="identifier"&gt;Compare&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;Hash&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;Pred&lt;/span&gt;&lt;/code&gt;
                  objects now selects the appropriate &lt;code&gt;&lt;span class="identifier"&gt;swap&lt;/span&gt;&lt;/code&gt;
                  function between &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;swap&lt;/span&gt;&lt;/code&gt;
                  and ADL candidates, in accordance with standard specifications
                  in &lt;strong&gt;[swappable.requirements]&lt;/strong&gt; (issue
                  &lt;a href="https://github.com/boostorg/multi_index/issues/29"&gt;#29&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Provided some internal copy constructors and assignment operators
                  whose default implicit definition is deprecated in C++11 onwards
                  (&lt;strong&gt;[depr.impldec]&lt;/strong&gt;), which was warned
                  about on some compilers.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Maintenance work.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  IMPORTANT: Mark C++03 support as deprecated and due for removal
                  in 2021.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Big update to cpp_int adds faster Karatsuba and Coomba multiplication
                  routines.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix conversion of gmp_rational to &lt;code&gt;&lt;span class="keyword"&gt;long&lt;/span&gt;
                  &lt;span class="keyword"&gt;double&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;__float128&lt;/span&gt;&lt;/code&gt;, fixes #178.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix up libtommath support to function with the latest libtom releases.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix up some incompatibilities with the latest Intel C++ compiler.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix up &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt; arithmetic
                  support for latest MSVC release.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/outcome/"&gt;Outcome&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Enhancements:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Performance of Outcome-based code compiled by clang has been
                        greatly improved. The previous implementation of Outcome's
                        status bitfield confused clang's optimiser, which caused
                        low quality codegen. Unlike most codegen issues, this was
                        noticeably in empirical benchmarks of real world code, as
                        was shown by &lt;a href="https://wg21.link/P1886"&gt;P1886
                        &lt;strong&gt;Error speed benchmarking&lt;/strong&gt;&lt;/a&gt;.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        The safe part of the &lt;a href="https://github.com/ned14/outcome/tree/better_optimisation"&gt;&lt;code&gt;&lt;span class="identifier"&gt;better_optimisation&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
                        Outcome v2.2.0 future branch was merged to Outcome v2.1.3
                        which includes a new status bitfield implementation. This
                        appears to not confuse clang's optimiser, and clang 9 produces
                        code which routinely beats GCC 9's code for various canned
                        use cases.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Installability is now CI tested per commit. Due to installability
                        of standalone Outcome (e.g. &lt;code&gt;&lt;span class="identifier"&gt;make&lt;/span&gt;
                        &lt;span class="identifier"&gt;install&lt;/span&gt;&lt;/code&gt;) breaking
                        itself rather more frequently than is ideal, installability
                        is now tested on CI per commit.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bug fixes:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href="https://github.com/ned14/outcome/issues/214"&gt;#214&lt;/a&gt;
                        Newer Concepts implementing compilers were unhappy with the
                        early check for destructibility of &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;/code&gt;
                        and &lt;code&gt;&lt;span class="identifier"&gt;E&lt;/span&gt;&lt;/code&gt;, so
                        removed template constraints, falling back to static assert
                        which runs later in the type instantiation sequence.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href="https://github.com/ned14/outcome/issues/220"&gt;#220&lt;/a&gt;
                        A false positive undefined behaviour sanitiser failure in
                        some use cases of Experimental Outcome was worked around
                        to avoid the failure message.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Suppressed a potential redundant move warning in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;poly_collection&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;for_each&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed a bug by which elements were copied rather than moved in
                  allocator-extended move construction and move assigment between
                  collections with non-propagating, unequal allocators.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Allocator-extended move construction no longer decays to allocator-extended
                  copy construction for the legacy version of libstdc++-v3 shipped
                  with GCC 4.8 (which can also be used by Clang).
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added documentation on distribution of PDBs &lt;a href="https://github.com/boostorg/stacktrace/issues/55"&gt;#55&lt;/a&gt;, &lt;a href="https://github.com/boostorg/stacktrace/issues/47"&gt;#47&lt;/a&gt; (thanks
                  to emptyVoid and Roger Orr for information and to zlojvavan for
                  testing).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed msvc-9 build
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Maintenance work, including test fixes &lt;a href="https://github.com/boostorg/stacktrace/issues/86"&gt;#86&lt;/a&gt;, fixing
                  typos &lt;a href="https://github.com/boostorg/stacktrace/issues/84"&gt;#84&lt;/a&gt;, CI improvements and hardening, inspect tool
                  fixes.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Boost.test v3.13 see the &lt;a href="https://www.boost.org/libs/test/doc/html/boost_test/change_log.html"&gt;Changes
                  log&lt;/a&gt; for more details.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  New feature: It is now possible to combine tolerance indication,
                  user message and collection comparison modifier in a single &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST&lt;/span&gt;&lt;/code&gt; expression. See change
                  logs for more details.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bug fixes and pull requests:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        GitHub Issues: &lt;a href="https://github.com/boostorg/test/issues/173"&gt;#173&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/179"&gt;#179&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/220"&gt;#220&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/221"&gt;#221&lt;/a&gt;,
                        &lt;a href="https://github.com/boostorg/test/issues/235"&gt;#235&lt;/a&gt;
      &lt;a href="https://github.com/boostorg/test/issues/237"&gt;#237&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/241"&gt;#241&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/245"&gt;#245&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/246"&gt;#246&lt;/a&gt;,
                        &lt;a href="https://github.com/boostorg/test/issues/251"&gt;#251&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/253"&gt;#253&lt;/a&gt;
      &lt;a href="https://github.com/boostorg/test/issues/254"&gt;#254&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/263"&gt;#263&lt;/a&gt;
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Trac tickets: &lt;a href="https://svn.boost.org/trac/boost/ticket/11107"&gt;#11107&lt;/a&gt;
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        GitHub Pull Requests: &lt;a href="https://github.com/boostorg/test/pull/41"&gt;PR#41&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/114"&gt;PR#114&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/187"&gt;PR#187&lt;/a&gt;,
                        &lt;a href="https://github.com/boostorg/test/pull/239"&gt;PR#239&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/247"&gt;PR#247&lt;/a&gt;
      &lt;a href="https://github.com/boostorg/test/pull/252"&gt;PR#252&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/259"&gt;PR#259&lt;/a&gt;,
                        &lt;a href="https://github.com/boostorg/test/pull/265"&gt;PR#265&lt;/a&gt;
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/throw_exception/"&gt;ThrowException&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added an overload of &lt;code&gt;&lt;span class="identifier"&gt;throw_exception&lt;/span&gt;&lt;/code&gt;
                  that takes a &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;/code&gt;
                  object.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  NOTE: Projects using &lt;code&gt;&lt;span class="identifier"&gt;BOOST_THROW_EXCEPTION&lt;/span&gt;&lt;/code&gt;
                  with exceptions disabled will need to add a definition of this
                  new overload.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/tti/"&gt;TTI&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added introspection of function templates for more recent C++ compilers
                  versions from gcc and vc++. as well as all versions of clang. Older
                  versions of vc++ before 14.0 and gcc prior to 4.8 may fail.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added specific introspection for elements of struct/class, enum,
                  and union types, which can be used for more fine-grained introspection
                  than the general 'type' introspection.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_index/"&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Maintenance work, including CI integration with inspect tool.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/utility/"&gt;Utility&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  The &lt;code&gt;&lt;span class="identifier"&gt;ostream_string&lt;/span&gt;&lt;/code&gt;
                  facility has moved from the Utility library to the IO library as
                  &lt;code&gt;&lt;span class="identifier"&gt;ostream_put&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Removed unused includes (thanks to Nikita Kniazev &lt;a href="https://github.com/boostorg/variant/issues/74"&gt;#74&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed zero-as-null-pointer-constat warnings (thanks to Bart Siwek
                  &lt;a href="https://github.com/boostorg/variant/issues/77"&gt;#77&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Maintenance work, including typo fixes.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant2/"&gt;Variant2&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added support for &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt;,
                  &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;code&gt;&lt;span class="identifier"&gt;variant&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;...&amp;gt;&lt;/span&gt;&lt;/code&gt;
                  is now trivial when all types in &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;...&lt;/span&gt;&lt;/code&gt; are trivial. This improves performance
                  by enabling it to be passed to, and returned from, functions in
                  registers.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/winapi/"&gt;WinAPI&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Headers in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;detail&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;winapi&lt;/span&gt;&lt;/code&gt;
                  are deprecated and will be removed in a future release.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Boost.WinAPI headers no longer include &lt;code&gt;&lt;span class="identifier"&gt;winerror&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;h&lt;/span&gt;&lt;/code&gt;.
                  Include &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;winapi&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;error_codes&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; to get Windows error codes.
                  (&lt;a href="https://github.com/boostorg/winapi/issues/81"&gt;#81&lt;/a&gt;)
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div id="version_1_73_0.known_issues.updated_tools"&gt;
      &lt;h3&gt;&lt;span class="link"&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class="library"&gt;&lt;a href="https://www.boost.org/tools/build/"&gt;Build&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Includes release &lt;a href="https://github.com/boostorg/build/releases/tag/4.2.0"&gt;4.2.0&lt;/a&gt;
                  of B2.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  WARNING: Since version 4.0.0 B2 requires a capable C++11 compiler
                  to bootstrap. This is only needed to build B2 itself not to build
                  Boost for your use.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div id="version_1_73_0.known_issues.compilers_tested"&gt;
      &lt;h3&gt;&lt;span class="link"&gt;Compilers
      Tested&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        Boost's primary test compilers are:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            Linux:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang: 3.0, 4.0.1, 6.0.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang, C++0x: 3.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1,
                  5.0.2, 6.0.1, 7.0.0, 8.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x: 4.4.7
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++17: 7.3.0, 8.0.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Intel, C++14: 18.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            OS X:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Apple Clang: 9.0.0, 9.1.0, 10.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Apple Clang, C++17: 9.1.0, 10.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Apple Clang, C++1z: 9.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Apple Clang, C++2a: 10.0.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Windows:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x: 4.6.4
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++11: 4.7.3, 4.8.1, 4.9.3
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++17: 7.1.0, 7.2.0, 7.3.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            FreeBSD:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang: 4.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang, C++11: 4.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang, C++14: 4.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang, C++1z: 4.0.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
        Boost's additional test compilers include:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            Linux:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang, C++0x: 3.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1,
                  5.0.2, 6.0.1, 7.0.0, 8.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x: 4.4.7
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++17: 7.3.0, 8.0.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Intel, C++14: 18.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            OS X:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Apple Clang: 9.0.0, 9.1.0, 10.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Apple Clang, C++17: 9.1.0, 10.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Apple Clang, C++1z: 9.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Apple Clang, C++2a: 10.0.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Windows:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x: 4.6.4
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++11: 4.7.3, 4.8.1, 4.9.3
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++17: 7.1.0, 7.2.0, 7.3.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            FreeBSD:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang: 4.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang, C++11: 4.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang, C++14: 4.0.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang, C++1z: 4.0.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div id="version_1_73_0.known_issues.acknowledgements"&gt;
      &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.72.0</title><link>https://www.boost.org/users/history/version_1_72_0.html</link><guid>https://www.boost.org/users/history/version_1_72_0.html</guid><pubDate>Wed, 11 Dec 2019 18:06:09 +0000</pubDate><description>


  &lt;div id="version_1_72_0.known_issues"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Known Issues&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      These are patches from library authors which were found too late to be fixed
      in the release. Be careful as they have not been through the normal testing
      process.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Revert cease dependence on range
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="https://www.boost.org/patches/1_72_0/0001-revert-cease-dependence-on-range.patch"&gt;Coroutine
                patch&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_72_0.updated_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the &lt;code&gt;&lt;span class="identifier"&gt;async_initiate&lt;/span&gt;&lt;/code&gt;
                helper function to automatically deduce its return type, for C++11
                or later.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed all asynchronous operations to use automatically deduced
                return types, for C++14 or later.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Introduced concepts to support &lt;code&gt;&lt;span class="identifier"&gt;async_initiate&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the nested template type &lt;code&gt;&lt;span class="identifier"&gt;rebind_executor&lt;/span&gt;&lt;/code&gt;
                to all I/O object types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the initiation function objects to report their associated
                I/O executor via the nested type &lt;code&gt;&lt;span class="identifier"&gt;executor_type&lt;/span&gt;&lt;/code&gt;
                and member function &lt;code&gt;&lt;span class="identifier"&gt;get_executor&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class="identifier"&gt;default_completion_token&lt;/span&gt;&lt;/code&gt;
                trait, giving I/O executor types an associated default completion
                token type for use with asynchronous operations. This trait is specialised
                for the &lt;code&gt;&lt;span class="identifier"&gt;use_awaitable&lt;/span&gt;&lt;/code&gt;
                completion token, for example, to allow asynchronous operations to
                be used as follows: &lt;code&gt;&lt;span class="identifier"&gt;co_await&lt;/span&gt;
                &lt;span class="identifier"&gt;socket&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;async_connect&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;my_endpoint&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class="identifier"&gt;async_initiate&lt;/span&gt;&lt;/code&gt;
                to the Windows-specific I/O objects' asynchronous operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured that the executor type is propagated to newly accepted sockets.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to require that &lt;code&gt;&lt;span class="identifier"&gt;Protocol&lt;/span&gt;&lt;/code&gt;
                copy and move operations never throw.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to require that &lt;code&gt;&lt;span class="identifier"&gt;Endpoint&lt;/span&gt;&lt;/code&gt;
                default constructor and move operations never throw.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt; qualifier
                to protocol accessors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt; qualifier
                to socket move constructors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues associated with opening serial ports on Windows:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Use the correct constant to initialise the RTS control flag.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Specify a default baud rate (9600).
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a lost "outstanding work count" that can occur when
                an asynchronous accept operation is automatically restarted.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Consult the &lt;a href="https://www.boost.org/doc/libs/1_72_0/doc/html/boost_asio/history.html"&gt;Revision
                History&lt;/a&gt; for further details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a workaround for &lt;code&gt;&lt;span class="identifier"&gt;__float128&lt;/span&gt;&lt;/code&gt;
                not being considered as a floating point type by some versions of
                libstdc++.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved compatibility with clang-win compiler.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This is a maintenance update containing bug fixes, and updates to
                use the new features delivered in Boost.Asio.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                We'd love to know how you or your company use Beast, consider adding
                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
                and Individuals Using Beast&lt;/a&gt; list.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
                Notes&lt;/a&gt; for a complete list of changes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/circular_buffer/"&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix issue &lt;a href="https://github.com/boostorg/circular_buffer/issues/29"&gt;#29&lt;/a&gt;: &lt;code&gt;&lt;span class="identifier"&gt;max_size&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; now takes the allocator's &lt;code&gt;&lt;span class="identifier"&gt;max_size&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
                into account. (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                architecture s390x supported
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                execution_context removed
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/endian/"&gt;Endian&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Made &lt;code&gt;&lt;span class="identifier"&gt;endian_reverse&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;conditional_reverse&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;span class="identifier"&gt;_to_&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
                on GCC and Clang
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added convenience load and store functions
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added floating point convenience typedefs
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a non-const overload of &lt;code&gt;&lt;span class="identifier"&gt;data&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;; changed its return type to &lt;code&gt;&lt;span class="keyword"&gt;unsigned&lt;/span&gt; &lt;span class="keyword"&gt;char&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;__int128&lt;/span&gt;&lt;/code&gt; support
                to &lt;code&gt;&lt;span class="identifier"&gt;endian_reverse&lt;/span&gt;&lt;/code&gt;
                when available
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a convenience header &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;endian&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Extracted &lt;code&gt;&lt;span class="identifier"&gt;filesystem_error&lt;/span&gt;&lt;/code&gt;
                to &lt;code&gt;&lt;span class="identifier"&gt;exception&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;; &lt;code&gt;&lt;span class="identifier"&gt;file_status&lt;/span&gt;&lt;/code&gt;
                and associated enums and functions to &lt;code&gt;&lt;span class="identifier"&gt;file_status&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;;
                &lt;code&gt;&lt;span class="identifier"&gt;directory_entry&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;directory_iterator&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;
                to &lt;code&gt;&lt;span class="identifier"&gt;directory&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Deprecated:&lt;/strong&gt; For backward compatibility
                &lt;code&gt;&lt;span class="identifier"&gt;operations&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; still includes the new headers
                &lt;code&gt;&lt;span class="identifier"&gt;exception&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;file_status&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;directory&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, unless &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FILESYSTEM_NO_DEPRECATED&lt;/span&gt;&lt;/code&gt;
                macro is defined. These implicit includes are considered deprecated
                and will be removed in a future release. Users are encouraged to
                include the new headers directly or include &lt;code&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The &lt;code&gt;&lt;span class="identifier"&gt;filesystem_error&lt;/span&gt;&lt;/code&gt;
                exception is now implemented in the compiled library of Boost.Filesystem.
                Users may need to add linking with Boost.Filesystem library in their
                projects.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On POSIX.1-2008 platforms, use &lt;code&gt;&lt;span class="identifier"&gt;utimensat&lt;/span&gt;&lt;/code&gt;
                instead of &lt;code&gt;&lt;span class="identifier"&gt;utime&lt;/span&gt;&lt;/code&gt;.
                &lt;code&gt;&lt;span class="identifier"&gt;utime&lt;/span&gt;&lt;/code&gt; is declared
                obsolete in POSIX.1-2008 and can be disabled e.g. in uClibc-ng. (&lt;a href="https://github.com/boostorg/filesystem/pull/115"&gt;PR#115&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;directory_iterator&lt;/span&gt;&lt;/code&gt;
                is now left in the end state on memory allocation errors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In &lt;code&gt;&lt;span class="identifier"&gt;directory_iterator&lt;/span&gt;&lt;/code&gt;
                on POSIX systems, support for &lt;code&gt;&lt;span class="identifier"&gt;readdir&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;readdir_r&lt;/span&gt;&lt;/code&gt; has been reworked to
                avoid memory allocations for &lt;code&gt;&lt;span class="identifier"&gt;dirent&lt;/span&gt;&lt;/code&gt;
                structures when &lt;code&gt;&lt;span class="identifier"&gt;readdir&lt;/span&gt;&lt;/code&gt;
                is used. This reduces memory consumption and eliminates the possibility
                of buffer overruns in case if &lt;code&gt;&lt;span class="identifier"&gt;readdir&lt;/span&gt;&lt;/code&gt;
                produces a very long directory name.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows, use Boost.WinAPI to select the target Windows version.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;directory_options&lt;/span&gt;&lt;/code&gt;
                enum, which reflects the same named enum from C++20. The enum is
                supported in &lt;code&gt;&lt;span class="identifier"&gt;directory_iterator&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;
                to customize iteration behavior. In particular, the iterators now
                support skipping directories that can't be opened due to insufficient
                permissions. The &lt;code&gt;&lt;span class="identifier"&gt;symlink_option&lt;/span&gt;&lt;/code&gt;
                enum is now deprecated and should be replaced with &lt;code&gt;&lt;span class="identifier"&gt;directory_options&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                By default, &lt;code&gt;&lt;span class="identifier"&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;
                is now reset to the end state in case of errors, as required by C++20.
                (&lt;a href="https://github.com/boostorg/filesystem/issues/112"&gt;#112&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;directory_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;pop_on_error&lt;/span&gt;&lt;/code&gt;
                option, which configures &lt;code&gt;&lt;span class="identifier"&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;
                so that it attempts to recover from iteration errors by repeatedly
                invoking &lt;code&gt;&lt;span class="identifier"&gt;pop&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
                until it succeeds or the end state is reached. (&lt;a href="https://github.com/boostorg/filesystem/issues/113"&gt;#113&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;directory_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;skip_dangling_symlinks&lt;/span&gt;&lt;/code&gt;
                option, which configures &lt;code&gt;&lt;span class="identifier"&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;
                so that it doesn't follow dangling directory symlinks and continues
                iteration instead of reporting an error.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Deprecated:&lt;/strong&gt; The following members
                of &lt;code&gt;&lt;span class="identifier"&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;
                are now marked as deprecated: &lt;code&gt;&lt;span class="identifier"&gt;level&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;no_push_pending&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;no_push_request&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;no_push&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;. Users are advised to replace their
                use with the standard counterparts: &lt;code&gt;&lt;span class="identifier"&gt;depth&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;recursion_pending&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;disable_recursion_pending&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;. Note that &lt;code&gt;&lt;span class="identifier"&gt;recursion_pending&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; has the opposite meaning compared
                to &lt;code&gt;&lt;span class="identifier"&gt;no_push_pending&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;no_push_request&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;. Deprecated methods will be removed
                in a future release.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;lexically_relative&lt;/span&gt;&lt;/code&gt; (and any dependent
                algorithms) to correctly handle empty, dot and dot-dot path elements
                in its argument. The behavior is made closer to C++17 &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;lexically_relative&lt;/span&gt;&lt;/code&gt; in that empty
                and dot path elements are ignored and dot-dot path elements are accounted
                by decreasing the number of dot-dot path elements to generate in
                the resulting relative path. (&lt;a href="https://github.com/boostorg/filesystem/issues/76"&gt;#76&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/functional/factory/"&gt;Functional/Factory&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Glen Fernandes rewrote the implementations of &lt;code&gt;&lt;span class="identifier"&gt;factory&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;value_factory&lt;/span&gt;&lt;/code&gt;
                to provide the following features:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Support r-value arguments when possible
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Support arbitrary number of arguments via variadic templates
                      when possible
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Support allocators that are final
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Support allocators that use fancy pointers
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Support for disabled exceptions (&lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Improved compilation times
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The following features have been removed:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Increasing limits for C++03 compilers through &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FUNCTIONAL_VALUE_FACTORY_MAX_ARITY&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Using &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;none_t&lt;/span&gt;&lt;/code&gt;
                      in place of &lt;code&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;/code&gt;
                      through &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/gil/"&gt;GIL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      GSoC 2019: Lanczos resampling for image down scaling (&lt;a href="https://github.com/boostorg/gil/pull/309"&gt;PR#309&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      GSoC 2019: Methods for binary thresholding, inverted binary
                      thresholding and truncation thresholding (&lt;a href="https://github.com/boostorg/gil/pull/313"&gt;PR#313&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      GSoC 2019: Otsu thresholding method (&lt;a href="https://github.com/boostorg/gil/pull/314"&gt;PR#314&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      GSoC 2019: Adaptive thresholding using mean or gaussian-weighted
                      sum of the neighbourhood area (&lt;a href="https://github.com/boostorg/gil/pull/315"&gt;PR#315&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      GSoC 2019: Harris response calculation (corner detector without
                      non-maximum filtering) (&lt;a href="https://github.com/boostorg/gil/pull/350"&gt;PR#350&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      GSoC 2019: Hessian corner detector (&lt;a href="https://github.com/boostorg/gil/pull/364"&gt;PR#364&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      GSoC 2019: Types for defining 2D kernel, &lt;code&gt;&lt;span class="identifier"&gt;kernel_2d&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class="identifier"&gt;kernel_2d_fixed&lt;/span&gt;&lt;/code&gt;,
                      in Numeric extension (&lt;a href="https://github.com/boostorg/gil/pull/361"&gt;PR#361&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      GSoC 2019: Implementation of 2D convolution as new function
                      &lt;code&gt;&lt;span class="identifier"&gt;convolve_2d&lt;/span&gt;&lt;/code&gt;
                      (&lt;a href="https://github.com/boostorg/gil/pull/367"&gt;PR#367&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      GSoC 2019: Box filtering using the average filter (&lt;a href="https://github.com/boostorg/gil/pull/383"&gt;PR#383&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      GSoC 2019: Blur function based on normalized mean filter (&lt;a href="https://github.com/boostorg/gil/pull/383"&gt;PR#383&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      GSoC 2019: Sobel and Scharr operators (&lt;a href="https://github.com/boostorg/gil/pull/392"&gt;PR#392&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      GSoC 2019: Median filter to remove noise from image (&lt;a href="https://github.com/boostorg/gil/pull/393"&gt;PR#393&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Continued adding new test cases and significantly improved
                      overall test coverage.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Documented purpose of &lt;code&gt;&lt;span class="identifier"&gt;cached_location_t&lt;/span&gt;&lt;/code&gt;
                      (&lt;a href="https://github.com/boostorg/gil/pull/287"&gt;PR#287&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Function &lt;code&gt;&lt;span class="identifier"&gt;convolve_1d&lt;/span&gt;&lt;/code&gt;
                      in Numeric extension for convenient use of &lt;code&gt;&lt;span class="identifier"&gt;convolve_rows&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class="identifier"&gt;convolve_cols&lt;/span&gt;&lt;/code&gt;
                      (&lt;a href="https://github.com/boostorg/gil/pull/347"&gt;PR#347&lt;/a&gt;) and &lt;a href="https://github.com/boostorg/gil/pull/367"&gt;PR#367&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Function &lt;code&gt;&lt;span class="identifier"&gt;extend_boundary&lt;/span&gt;&lt;/code&gt;
                      in Numeric extension to perform image boundary extension (&lt;a href="https://github.com/boostorg/gil/pull/386"&gt;PR#386&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Project release notes maintained in Markdown file &lt;code&gt;&lt;span class="identifier"&gt;RELEASES&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;md&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://github.com/boostorg/gil/pull/404"&gt;PR#404&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Move all tests, core features and extensions, inside &lt;code&gt;&lt;span class="identifier"&gt;test&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;/code&gt;
                      directory (&lt;a href="https://github.com/boostorg/gil/pull/302"&gt;PR#302&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Replace Boost.MPL with Boost.MP11 (&lt;a href="https://github.com/boostorg/gil/pull/274"&gt;PR#274&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Removed use of Boost.TypeTraits (&lt;a href="https://github.com/boostorg/gil/pull/274"&gt;PR#274&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Dropped support for GCC &amp;lt;= 4.8 (&lt;a href="https://github.com/boostorg/gil/pull/296"&gt;PR#296&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Remove &lt;code&gt;&lt;span class="identifier"&gt;include&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;gil&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;version&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      file as unused (&lt;a href="https://github.com/boostorg/gil/pull/403"&gt;PR#403&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Undetermined value of default-initialized channel and pixel
                      objects (&lt;a href="https://github.com/boostorg/gil/pull/273"&gt;PR#273&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Undefined behaviour due to &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_trivially_default_constructible&lt;/span&gt;&lt;/code&gt;
                      specializations (&lt;a href="https://github.com/boostorg/gil/pull/284"&gt;PR#284&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Crash when reading PNG files with an invalid header (&lt;a href="https://github.com/boostorg/gil/pull/385"&gt;PR#385&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Applied the Rule of Three for numerous types.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Removed uses of deprecated implicit definition of defaulted
                      copy assignment operator or copy constructor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/histogram/"&gt;Histogram&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Several new features and performance improvements, some bug-fixes
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the full &lt;a href="https://www.boost.org/libs/histogram/doc/html/histogram/history.html"&gt;Release
                Notes&lt;/a&gt; for a complete list of changes
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved compatibility with clang-win compiler.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/mpi/"&gt;MPI&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation clarifications.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed scatterv bug when using explicit input buffer offsets.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enable usage of MPI_Probe and friend with Intel MPI &amp;gt;= 2019.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Symbol visibility on Windows
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Hypergeometric functions 1F0, 0F1, 2F0, 1F1 and pFq.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Jacobi polynomial (and derivatives) evaluation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Gegenbauer polynomial (and derivatives) evaluation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Cardinal B-Splines (and derivatives) as polynomial functions
                in their own right.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Cardinal Trigonometric Interpolation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new statistics sub-section.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added One Sample Student's T Test.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Anderson Darling test for normality.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Ljung Box test for auto-correlation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Runs test for random sequences.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The headers &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;math&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;tools&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;univariate_statistics&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;math&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;tools&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;bivariate_statistics&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, have been deprecated in favor
                of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;math&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;statistics&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;univariate_statistics&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;math&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;statistics&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;bivariate_statistics&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added The Empirical CDF distribution.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reworked the Sterling approximation used by multiprecision gamma
                functions to be applicable to all the function that use the Lanczos
                approximation at regular precision. Also extended Lanczos approximations
                up to 100 decimal digit precision.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Big &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt; update
                allows cpp_int and float128 arithmetic to be fully &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt; with gcc and clang 9 or
                later, or any compiler supporting &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_constant_evaluated&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bug in variable precision mpf_float which causes it to go into
                a tailspin trying to select the correct precision - see https://github.com/boostorg/multiprecision/issues/164.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/outcome/"&gt;Outcome&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enhancements:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Standalone outcome is now &lt;code&gt;&lt;span class="identifier"&gt;make&lt;/span&gt;
                      &lt;span class="identifier"&gt;install&lt;/span&gt;&lt;/code&gt;-able, and
                      cmake &lt;code&gt;&lt;span class="identifier"&gt;find_package&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; can find it. Note that you
                      must separately install and &lt;code&gt;&lt;span class="identifier"&gt;find_package&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; Outcome's dependency, quickcpplib,
                      else &lt;code&gt;&lt;span class="identifier"&gt;find_package&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; of Outcome will fail.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The git submodule mechanism used by standalone Outcome of specifying
                      dependent libraries has been replaced with a cmake superbuild
                      of dependencies mechanism instead. Upon cmake configure, an
                      internal copy of quickcpplib will be git cloned, built and
                      installed into the build directory from where an internal
                      &lt;code&gt;&lt;span class="identifier"&gt;find_package&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; uses it. This breaks the
                      use of the unconfigured Outcome repo as an implementation of
                      Outcome, one must now do one of: 1. Add Outcome as subdirectory
                      to cmake build. 2. Use cmake superbuild (i.e. &lt;code&gt;&lt;span class="identifier"&gt;ExternalProject_Add&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;)
                      to build and install Outcome into a local installation. 3.
                      Use one of the single header editions.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      For standalone Outcome, the current compiler is now checked
                      for whether it will compile code containing C++ Concepts, and
                      if it does, all cmake consumers of Outcome will enable C++
                      Concepts. Set the cmake variable &lt;code&gt;&lt;span class="identifier"&gt;CXX_CONCEPTS_FLAGS&lt;/span&gt;&lt;/code&gt;
                      to an empty string to prevent auto detection and enabling of
                      C++ Concepts support occurring.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_TRY&lt;/span&gt;&lt;/code&gt;
                      operation now hints to the compiler that operation will be
                      successful. &lt;a href="https://wg21.link/P1886"&gt;P1886 &lt;strong&gt;Error speed benchmarking&lt;/strong&gt;&lt;/a&gt; showed
                      that there is considerable gain in very small functions by
                      hinting to the compiler whether the expression is expected
                      to be successful or not. &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_TRY&lt;/span&gt;&lt;/code&gt;
                      previously did not hint to the compiler at all, but now it
                      does. A new suite of macros &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_TRY_FAILURE_LIKELY&lt;/span&gt;&lt;/code&gt;
                      hint to the compiler that failure is expected. If you wish
                      to return to the previously unhinted behaviour, define &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_TRY_LIKELY&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;expr&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;
                      to &lt;code&gt;&lt;span class="special"&gt;(!!&lt;/span&gt;&lt;span class="identifier"&gt;expr&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/ned14/outcome/issues/199"&gt;#199&lt;/a&gt;
                      Support for C++ Coroutines has been added. This comes in two
                      parts, firstly there is now an &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_CO_TRY&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; operation suitable for performing
                      the &lt;code&gt;&lt;span class="identifier"&gt;TRY&lt;/span&gt;&lt;/code&gt; operation
                      from within a C++ Coroutine. Secondly, in the header &lt;code&gt;&lt;span class="identifier"&gt;outcome&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;coroutine_support&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; there are implementations
                      of &lt;code&gt;&lt;span class="identifier"&gt;eager&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;OutcomeType&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class="identifier"&gt;lazy&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;OutcomeType&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                      which let you more naturally and efficiently use &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span class="identifier"&gt;basic_outcome&lt;/span&gt;&lt;/code&gt; from within
                      C++ Coroutines -- specifically, if the result or outcome will
                      construct from an exception pointer, exceptions thrown in the
                      coroutine return an errored or excepted result with the thrown
                      exception instead of throwing the exception through the coroutine
                      machinery (which in current compilers, has a high likelihood
                      of blowing up the program). Both &lt;code&gt;&lt;span class="identifier"&gt;eager&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;lazy&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; can accept any &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;/code&gt; as well. Both have been
                      tested and found working on VS2019 and clang 9.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/ned14/outcome/issues/210"&gt;#210&lt;/a&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;make_error_code&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;make_exception_ptr&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; are now additionally considered
                      for compatible copy and move conversions for &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
                      This lets you construct a &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;E&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; into a &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, where &lt;code&gt;&lt;span class="identifier"&gt;E&lt;/span&gt;&lt;/code&gt;
                      is a custom type which has implemented the ADL discovered free
                      function &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;
                      &lt;span class="identifier"&gt;make_error_code&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;E&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;,
                      but is otherwise unrelated to &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;.
                      The same availability applies for &lt;code&gt;&lt;span class="identifier"&gt;exception_ptr&lt;/span&gt;&lt;/code&gt;
                      with &lt;code&gt;&lt;span class="identifier"&gt;make_exception_ptr&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; being the ADL discovered
                      free function. &lt;code&gt;&lt;span class="identifier"&gt;basic_outcome&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; has less support for
                      this than &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; in order to keep constructor
                      count down, but it will accept via this mechanism conversions
                      from &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;failure_type&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/ned14/outcome/issues/184"&gt;#184&lt;/a&gt;
                      The detection of &lt;code&gt;&lt;span class="special"&gt;[[&lt;/span&gt;&lt;span class="identifier"&gt;nodiscard&lt;/span&gt;&lt;span class="special"&gt;]]&lt;/span&gt;&lt;/code&gt;
                      support in the compiler was very mildly broken.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance work.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/preprocessor/"&gt;Preprocessor&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Topic added which discusses emptiness
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for the C++20 &lt;code&gt;&lt;span class="identifier"&gt;__VA_OPT__&lt;/span&gt;&lt;/code&gt;
                construct
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PP_VARIADIC_HAS_OPT&lt;/span&gt;&lt;/code&gt;
                      whether &lt;code&gt;&lt;span class="identifier"&gt;__VA_OPT__&lt;/span&gt;&lt;/code&gt;
                      is supported at the C++20 level
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PP_CHECK_EMPTY&lt;/span&gt;&lt;/code&gt;
                      test for emptiness using &lt;code&gt;&lt;span class="identifier"&gt;__VA_OPT__&lt;/span&gt;&lt;/code&gt;
                      at the C++20 level
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PP_VA_OPT&lt;/span&gt;&lt;/code&gt;
                      more flexible alternative to &lt;code&gt;&lt;span class="identifier"&gt;__VA_OPT__&lt;/span&gt;&lt;/code&gt;
                      at the C++20 level
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/smart_ptr/"&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;code&gt;&lt;span class="identifier"&gt;allocate_unique&lt;/span&gt;&lt;/code&gt;
                for scalars and arrays. (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Boost.test v3.12 see the &lt;a href="https://www.boost.org/libs/test/doc/html/boost_test/change_log.html"&gt;Changes
                log&lt;/a&gt; for more details.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New feature:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Support for C++17 &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string_view&lt;/span&gt;&lt;/code&gt;
                      has been added.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Better diagnostic on &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;exception&lt;/span&gt;&lt;/code&gt;
                      and no rtti mode (thanks to Mikhail Pilin / [pull_request 234])
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes and pull requests:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      GitHub Issues: &lt;a href="https://github.com/boostorg/test/issues/206"&gt;#206&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/217"&gt;#217&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/223"&gt;#223&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/229"&gt;#229&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      GitHub Pull Requests: &lt;a href="https://github.com/boostorg/test/pull/227"&gt;PR#227&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/231"&gt;PR#231&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/232"&gt;PR#232&lt;/a&gt;,
                      &lt;a href="https://github.com/boostorg/test/pull/234"&gt;PR#234&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/vmd/"&gt;VMD&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_VMD_IS_EMPTY&lt;/span&gt;&lt;/code&gt;
                updated to use &lt;code&gt;&lt;span class="identifier"&gt;__VA_OPT__&lt;/span&gt;&lt;/code&gt;
                at the C++20 level has 100% reliability
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_72_0.compilers_tested"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 4.0.1, 6.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++0x: 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
                6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++14: 18.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++17: 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++1z: 9.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++2a: 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.6.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1z: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++0x: 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
                6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++14: 18.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++17: 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++1z: 9.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++2a: 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.6.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1z: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_72_0.acknowledgements"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Marshall Clow and Michael Caisse managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item>
  </channel>
</rss>
