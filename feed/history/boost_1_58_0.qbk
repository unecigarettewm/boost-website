[article Version 1.58.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release data]
    [last-revision ]
]

[import ext.qbk]

[/ Add attributes here as release progresses. See end of file for details. ]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* [phrase library..[@/libs/corotuine2/ Coroutine2]:]
  * C++14-only implementation of coroutines

* /TODO/

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * `shared_ptr` is movable and supports aliasing ([ticket 1234]).
]

* [phrase library..[@/libs/chrono/ Chrono]:]
  * ['Version] 2.0.5
  * ['Fixes:]
    * [@http://svn.boost.org/trac/boost/ticket/10778 #10778]	VC14 CTP4 Atomic don't compile with boost::chrono durations which are not TriviallyCopyable
    * [@http://svn.boost.org/trac/boost/ticket/10840 #10840] 	Missing std:: qualifier for puts call in test_7868.cpp
    * [@http://svn.boost.org/trac/boost/ticket/10851 #10851] 	Missing std:: qualifier for puts call in time_point_output.cpp
    * [@http://svn.boost.org/trac/boost/ticket/10893 #10893] 	Minor doc typo in Boost.Chrono
    * [@http://svn.boost.org/trac/boost/ticket/10992 #10992] 	Chrono IO state savers inconsistent with Boost.IO state savers
    * [@http://svn.boost.org/trac/boost/ticket/10995 #10995] 	duration_put::put_value truncates fractional part
    * [@http://svn.boost.org/trac/boost/ticket/11006 #11006] 	Impossible to instantiate time_fmt_io_saver due to several errors.
    * [@http://svn.boost.org/trac/boost/ticket/11012 #11012] 	chrono_io v2 fail to compile with boost::chrono::duration< boost::rational<int> >


* [phrase library..[@/libs/context/ Context]:]
  * support for ARM/iOS (32+64 bit)
  * class execution_context (C++14)

* [phrase library..[@/libs/flyweight/ Flyweight]:]
  * Added hash support both with `std::hash` and [@/doc/html/hash.html `boost::hash`]. This can be
    optionally [@/libs/flyweight/doc/reference/flyweight.html#disable_hash_support disabled] to avoid
    clashes with legacy code where this support has already been defined by the user.
  * Maintenance fixes.

* [phrase library..[@/libs/fusion/ Fusion]:]
  * New ADAPT_STRUCT, ADAPT_ADT, ADAPT_ASSOC_ that deduce the members types ([ticket 9516]).
  * Add convert implementation for Boost.Tuple and std::tuple.
  * Add mpl::clear implementation for Boost.Tuple and std::tuple.
  * Use boost::declval instead of std::declval, ([ticket 10190]).
  * Fix tuple heading, close ([ticket 5324]).
  * Fix document typo, close ([ticket 6090]).
  * Remove use of `boost::blank` ([ticket 8622]).
  * Add result_of::{copy,move} ([ticket 5886]).
  * Better constexpr and noexcept support.
  * SFINAE Friendly result_of ([ticket 10676]). 
  * SFINAE Friendly invoke ([ticket 10443]).
  * result_of::size::value and result_of::size::type::value are the same type now ([ticket 7304])
  * Fix missing includes ([ticket 8457]).
  * result_of::at<Seq, N>::type is now defined when sizeof of sequence is less than N ([ticket 6507], [ticket 7651]) 
  * Many documentation fixes & improvements ([ticket 6090]).

* [phrase library..[@/libs/multi_index/index.html Multi-index Containers]:]
  * The efficiency of lookup operations has improved in situations where they involve the generation
    of temporary values of `key_type`. Consider for instance the following code: 
    ```
    typedef multi_index_container<
      std::string,
      indexed_by<
        ordered_unique<identity<std::string> >
      >
    > multi_t;
    ...
    multi_t m=...;
    m.find("boost"); // passed a const char*, not a std::string    
    ```
    In previous versions of the library, the `find` operation generates several temporary
    `std::string`s (one every time an internal comparison is made). In sufficiently advanced
    compilers, this is now avoided so that only one temporary is created.
  * Maintenance fixes.

* [phrase library..[@/libs/predef/ Predef]:]
  * Version 1.2
  * Added Visual Studio 2015 detection.
  * Added detection of Haiku OS.
  * Fix Android endian detation.
  * Added `predef_check` program and BBv2 integration for build configuration checks.

* [phrase library..[@/libs/thread/ Thread]:]
  * ['Version] 4.5.0
  * ['New Experimental Features:]
    * [@http://svn.boost.org/trac/boost/ticket/9600 #9600] Async: Add task_region
    * [@http://svn.boost.org/trac/boost/ticket/10611 #10611] Add emplace promise::set_value and emplace make_ready_future
    * [@http://svn.boost.org/trac/boost/ticket/10826 #10826] Add scheduled executor operations
    * [@http://svn.boost.org/trac/boost/ticket/11048 #11048] Add a serial_executor based on continuations

  * ['Fixed Bugs:]
    * [@http://svn.boost.org/trac/boost/ticket/6787 #6787] boost::thread::sleep() hangs if system time is rolled back
    * [@http://svn.boost.org/trac/boost/ticket/10734 #10734] Submit method work differently on different executors, some throw exception and some silently ignore error (thread_executor and inline_executor)
    * [@http://svn.boost.org/trac/boost/ticket/10736 #10736] Task exceptions silently ignored. I think std::terminate solution from N3785 and std::thread is better choice and more consistent.
    * [@http://svn.boost.org/trac/boost/ticket/10737 #10737] In serial_executor we have infinite wait if task throw exception.
    * [@http://svn.boost.org/trac/boost/ticket/10822 #10822] Boost.Thread fails to compile on Android
    * [@http://svn.boost.org/trac/boost/ticket/10824 #10824] Boost.Thread 1.57 breaks Windows XP compatibility for SP2 and below.
    * [@http://svn.boost.org/trac/boost/ticket/10963 #10963] future<future<T>>::then Has No Implementation
    * [@http://svn.boost.org/trac/boost/ticket/10964 #10964] future<future<T>>::unwrap().then() Deadlocks
    * [@http://svn.boost.org/trac/boost/ticket/10968 #10968] The futures returned by async() and future::then() are not blocking.
    * [@http://svn.boost.org/trac/boost/ticket/10971 #10971] shared_future::get()/get_or() must be const
    * [@http://svn.boost.org/trac/boost/ticket/10972 #10972] shared_future::then() can be called multiple times.
    * [@http://svn.boost.org/trac/boost/ticket/10979 #10979] Support T& type deduction when the make_ready_future parameter is reference_wrapper<T>
    * [@http://svn.boost.org/trac/boost/ticket/10996 #10996] Thread physical_concurrency() is failing on Windows
    * [@http://svn.boost.org/trac/boost/ticket/11035 #11035] BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE not defined for Android
    * [@http://svn.boost.org/trac/boost/ticket/11053 #11053] The attached code results in a R6025 - pure virtual function call in run_thread_exit_callbacks





* /TODO/

[/ TODO: These libraries always use the same message, referring to their
   individual release notes. So check if they apply before the beta:

* /TODO/: [phrase library..[@/libs/spirit/ Spirit]:]
  * Spirit Vx.x, see the
    '[@/doc/libs/1_xx_x/libs/spirit/doc/html/spirit/what_s_new/spirit_x_x.html What's New]'
    section for details.

* /TODO/: [phrase library..[@/libs/wave/ Wave]:]
  * See the [@/libs/wave/ChangeLog Changelog] for details.

]

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]

[/
For Beta release, something like:

[status beta]
[download http://sourceforge.net/projects/boost/files/boost/1.58.0.beta.1/]
[download_basename boost_1_58_0_b1]
[documentation /doc/libs/1_58_0_b1/]

Add libraries to 'purpose field'.

For final release:

[status released]
[download http://sourceforge.net/projects/boost/files/boost/1.58.0/]
[download_basename boost_1_58_0]
[documentation /doc/libs/1_58_0/]

Fill in 'authors' field, and date (I normally just copy the date from
the email requesting that I update the site).

Remove this comment.
]
