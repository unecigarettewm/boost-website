<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:boostbook="urn:boost.org:boostbook">
  <channel>
    <generator>Boost Website Site Tools</generator>
    <title>Boost News</title>
    <link>http://www.boost.org/users/news/</link>
    <description></description>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)</copyright>
<item><title>Version 1.56.0</title><link>http://www.boost.org/users/history/version_1_56_0.html</link><guid>http://www.boost.org/users/history/version_1_56_0.html</guid><pubDate>Thu, 7 Aug 2014 09:08:22 -0700</pubDate><description>



  &lt;div id=&quot;version_1_56_0.other_downloads&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Other Downloads&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;https://sourceforge.net/projects/boost/files/boost-binaries/1.56.0/&quot;&gt;Windows
          binaries&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.modularization&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Modularization&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost version control has migrated to a system using git submodules. This shouldn't
      make too much of a difference to users, although the directory structure is
      now a bit different.
    &lt;/p&gt;
    &lt;p&gt;
      Parts of some libraries have been moved into different modules, and several
      new modules have been extracted from existing code. All header paths should
      remain the same. The new modules are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/assert/&quot;&gt;Assert&lt;/a&gt;:&lt;/span&gt;
  Customizable assert macros.
          Maintained by Peter Dimov.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/core/&quot;&gt;Core&lt;/a&gt;:&lt;/span&gt;
  Core utilities used by other
          libraries, with minimal dependencies. Maintained by Peter Dimov, Glen Fernandes
          and Andrey Semashev.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical_Cast&lt;/a&gt;:&lt;/span&gt;
  General literal
          text conversions, such as an int represented a string, or vice-versa, from
          Kevlin Henney.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/throw_exception/&quot;&gt;Throw_Exception&lt;/a&gt;:&lt;/span&gt;
  A common
          infrastructure for throwing exceptions from Boost libraries, from Emil
          Dotchevski.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;Winapi:&lt;/span&gt;
  Windows API declarations without &amp;lt;windows.h&amp;gt;, for internal
          Boost use.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/align/&quot;&gt;Align&lt;/a&gt;:&lt;/span&gt;
  Memory alignment functions,
          allocators, and adaptors, from Glen Fernandes.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_index/&quot;&gt;Type_Index&lt;/a&gt;:&lt;/span&gt;
  Runtime/Compile
          time copyable type info, from Antony Polukhin.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Acumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New accumulators &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_variance&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_moment&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed rvalue references related issues (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9215&quot;&gt;#9215&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9462&quot;&gt;#9462&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Dropped support of antique compilers.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                to work correctly with new Boost.Coroutine interface (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9442&quot;&gt;#9442&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9928&quot;&gt;#9928&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured that incomplete &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; coroutines are correctly unwound
                when cleaned up by the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                destructor (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9731&quot;&gt;#9731&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed delegation of continuation hook for handlers produced by &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9741&quot;&gt;#9741&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the Windows I/O completion port backend to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConnectEx&lt;/span&gt;&lt;/code&gt;, if available, for connection-oriented
                IP sockets.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                backend for non-Windows (and non-IOCP Windows) platforms to use a
                single condition variable per &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                instance. This addresses a potential race condition when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;run_one&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                is used from multiple threads.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Prevented integer overflow when computing timeouts based on some
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;/code&gt;
                clocks (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9662&quot;&gt;#9662&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9778&quot;&gt;#9778&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Made further changes to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EV_CLEAR&lt;/span&gt;&lt;/code&gt;
                handling in the kqueue backend, to address other cases where the
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                system call may hang on Mac OS X.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed infinite recursion in implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_query_base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;~&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9548&quot;&gt;#9548&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Made the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;select&lt;/span&gt;&lt;/code&gt; reactor
                more efficient on Windows for large numbers of sockets (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9528&quot;&gt;#9528&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a Windows-specific type-aliasing issue reported by &lt;tt&gt;gcc&lt;/tt&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9550&quot;&gt;#9550&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Prevented execution of compile-time-only buffer test to avoid triggering
                an address sanitiser warning (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8295&quot;&gt;#8295&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disabled the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;GetQueuedCompletionStatus&lt;/span&gt;&lt;/code&gt;
                timeout workaround on recent versions of Windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for string-based scope IDs when using link-local multicast
                addresses.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed IPv6 multicast group join to use the address's scope ID as
                the interface, if an interface is not explicitly specified.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed multicast test failure on Mac OS X and the BSDs by using a
                link-local multicast address.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Worked around a &lt;tt&gt;gcc&lt;/tt&gt; problem to do with anonymous
                enums (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10042&quot;&gt;#10042&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reverted the Windows &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;
                backend change to ignore &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ERROR_MORE_DATA&lt;/span&gt;&lt;/code&gt;.
                Instead, the error will be propagated as with any other (i.e. in
                an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt; or
                thrown as a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;system_error&lt;/span&gt;&lt;/code&gt;),
                and the number of bytes transferred will be returned. For code that
                needs to handle partial messages, the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt;
                overload should be used (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10034&quot;&gt;#10034&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an off-by-one error in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal_set&lt;/span&gt;&lt;/code&gt;
                implementation's signal number check (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9324&quot;&gt;#9324&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use SSE2 intrinsics rather than inline assembly, to allow
                the Cray compiler to work.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Stopped using certain Winsock functions that are marked as deprecated
                in the latest Visual C++ and Windows SDK.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a workaround for building the unit tests with &lt;tt&gt;gcc&lt;/tt&gt;
                on AIX.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various minor documentation improvements (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8295&quot;&gt;#8295&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9605&quot;&gt;#9605&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9771&quot;&gt;#9771&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/assign/&quot;&gt;Assign&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Resolve some C++11 ambiguities (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3073&quot;&gt;#3073&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The library has been redesigned. Besides internal refactoring, various
                bugs were fixed, including incorrect values of feature test macros
                and integer overflow handling.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed values of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;memory_order&lt;/span&gt;&lt;/code&gt;
                enumeration. The concrete values are not part of the interface, but
                this change may potentially break ABI, if the enum is used in user's
                interfaces.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented support for 128-bit atomic operations on Windows x64
                with MSVC. The library assumes presence of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cmpxchg16b&lt;/span&gt;&lt;/code&gt;
                instruction in the target CPUs. Some early AMD CPUs don't support
                this instruction. To target those define the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ATOMIC_NO_CMPXCHG16B&lt;/span&gt;&lt;/code&gt;
                macro.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented experimental support for Windows ARM target with MSVC.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented experimental support for DEC Alpha target with GCC.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved support for ARMv6 and later with GCC. Implemented all atomic
                operations as assembler blocks instead of CAS-based loops. 64-bit
                operations are supported with ARMv7.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented optional support for the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ATOMIC_FLAG_INIT&lt;/span&gt;&lt;/code&gt;
                macro and static initialization of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;atomic_flag&lt;/span&gt;&lt;/code&gt;.
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8158&quot;&gt;#8158&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation for SPARCv9 target. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9446&quot;&gt;#9446&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation for PowerPC target. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9447&quot;&gt;#9447&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed several compatibility problems with Clang on x86 and x86-64.
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9610&quot;&gt;#9610&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9842&quot;&gt;#9842&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed specialized code for Windows on IA64 platform.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer/&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9970&quot;&gt;#9970&lt;/a&gt;,&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9334&quot;&gt;#9334&lt;/a&gt; Support for the C++11 allocator model.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Dropped support of antique compilers.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/concept_check/&quot;&gt;Concept Check&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fewer warnings (includes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5012&quot;&gt;#5012&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added DlMalloc-based Extended Allocators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved configurability of tree-based ordered associative containers.
                AVL, Scapegoat and Splay trees are now available to implement &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;set&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multiset&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;map&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multimap&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9338&quot;&gt;#9338:
                      &lt;em&gt;&amp;quot;VS2005 compiler errors in swap() definition
                      after including container/memory_util.hpp&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9637&quot;&gt;#9637:
                      &lt;em&gt;&amp;quot;Boost.Container vector::resize() performance
                      issue&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9648&quot;&gt;#9648:
                      &lt;em&gt;&amp;quot;string construction optimization - char_traits::copy
                      could be used ...&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9801&quot;&gt;#9801:
                      &lt;em&gt;&amp;quot;I can no longer create and iterator_range from
                      a stable_vector&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9915&quot;&gt;#9915:
                      &lt;em&gt;&amp;quot;Documentation issues regarding vector constructors
                      and resize methods - value/default initialization&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9916&quot;&gt;#9916:
                      &lt;em&gt;&amp;quot;Allocator propagation incorrect in the assignment
                      operator of most&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9931&quot;&gt;#9931:
                      &lt;em&gt;&amp;quot;flat_map::insert(ordered_unique_range_t...)
                      fails with move_iterators&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9955&quot;&gt;#9955:
                      &lt;em&gt;&amp;quot;Using memcpy with overlapped buffers in vector&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                fcontext_t is opaque pointer to context-data
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                changed signature of make_fcontext()
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8826&quot;&gt;#8826&lt;/a&gt; no executable stack
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9437&quot;&gt;#9437&lt;/a&gt; catch exceptions on iOS and Windows Phone 8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9445&quot;&gt;#9445&lt;/a&gt; support for x32 ABIs
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9522&quot;&gt;#9522&lt;/a&gt; support for powerpc_64le
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9743&quot;&gt;#9743&lt;/a&gt; bugfix for powerpc_64 le/be
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9774&quot;&gt;#9774&lt;/a&gt; bugfix for x86 on Mac OS X + clang
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                support of symmetric coroutines
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9355&quot;&gt;#9355&lt;/a&gt; fix race condition in protected_stack_allocator
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9551&quot;&gt;#9551&lt;/a&gt; list of supported architectures
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9734&quot;&gt;#9734&lt;/a&gt; wrong check of mmap() return value
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9735&quot;&gt;#9735&lt;/a&gt; no memset() for protected_stack_allocator
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9760&quot;&gt;#9760&lt;/a&gt; coroutine iterator need const operator==
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10070&quot;&gt;#10070&lt;/a&gt; mmap() return value
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10157&quot;&gt;#10157&lt;/a&gt; file descriptor not required in protected_stack_allocator
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/dynamic_bitset/&quot;&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for C++11 move constructors
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Warning fixes on MSVC 2013
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for C++11 minimal allocators
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add noexcept specifications
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6918&quot;&gt;#6918&lt;/a&gt;
                Boost Chrono compilation failure on HP uX due to undefined pthread_getcpuclockid
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8006&quot;&gt;#8006&lt;/a&gt;
                Boost::Chrono Assertion at startup - steady_clock::now() - Windows
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9337&quot;&gt;#9337&lt;/a&gt;
                chrono::process_cpu_clock time points wrong by factor 1000 on Linux
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9342&quot;&gt;#9342&lt;/a&gt;
                Regression on process_cpu_clock::timepoint io on V2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9419&quot;&gt;#9419&lt;/a&gt;
                boost::chrono::floor()/round() and negative durations is wrong
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9698&quot;&gt;#9698&lt;/a&gt;
                boost::chrono::thread_clock not declared in OSX
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9720&quot;&gt;#9720&lt;/a&gt;
                boost::this_thread::sleep_for() sometimes returns immediately on
                win32
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9859&quot;&gt;#9859&lt;/a&gt;
                Remove references to gcc-mingw
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9918&quot;&gt;#9918&lt;/a&gt;
                chrono compilation error on Solaris, funciton timegm
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9811&quot;&gt;#9811&lt;/a&gt;
                boost/boost/chrono/duration.hpp:355:56: error: call to non-constexpr
                function 'static std::numeric_limits&amp;lt;float&amp;gt;::_Ty std::numeric_limits&amp;lt;float&amp;gt;::max()'
                /home/zosun/input_service/inputservices-core-service/other/boost/boost/chrono/duration.hpp:
                In static member function 'static constexpr double boost::chrono::detail::chrono_numeric_limits&amp;lt;double,
                true&amp;gt;::lowest()':
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10069&quot;&gt;#10069&lt;/a&gt;
                Overflow in chrono clocks on 32bit
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10151&quot;&gt;#10151&lt;/a&gt;
                timegm function not available on QNX
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/flyweight/index.html&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                In compilers with variadic template support, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flyweight&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; now provides a perfectly forwarding
                constructor to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;
                (previously an emulation was used).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;flyweight&lt;/span&gt;&lt;/code&gt; now replicates
                the initializer-list constructors and assignment operators of its
                underlying type.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed intermodule static initialization problem (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9553&quot;&gt;#9553&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fusion is enabled for use on GPU
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Additional functionality
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm buffer for inflating/deflating geometries (buffer
                      itself already existed but that was only to enlarge a box)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm remove_spikes, algorithm to remove spikes from
                      a ring, polygon or multi_polygon.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm point_on_surface, generating a point lying on
                      the surface (interior) of the polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm is_simple, returning true if a geometry is simple
                      according to the OGC standard
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm is_valid, returning true if a geometry is valid
                      according to the OGC standard
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm crosses for checking this spatial relation according
                      to the OGC standard
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The set operation algorithms (difference, intersection, sym_difference
                      and union_) now support as input pairs of pointlike or linear
                      geometries
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The distance and comparable_distance algorithms now support
                      all pairs of geometry combinations
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The spatial relations which didn't support it (covered_by,
                      touches, within, etc.) now support as input linear and/or areal
                      geometries
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The support for boost::variants as input geometries in various
                      algorithms
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The rtree support for indexing segments
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The rtree nearest() predicate support for arbitrary geometries
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Solved tickets
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8310&quot;&gt;8310&lt;/a&gt;
                      Wrong results with overlapping polygons (fixed using point_on_surface
                      for disjoint)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8375&quot;&gt;8375&lt;/a&gt;
                      sym_difference of non-closed polygons returns closed polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8376&quot;&gt;8376&lt;/a&gt;
                      difference of non-closed polygons returns closed polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9081&quot;&gt;9081&lt;/a&gt;
                      Booleans create self-intersecting polygons from non-self-intersecting
                      polygons
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9245&quot;&gt;9245&lt;/a&gt;
                      Check for process errors in make_qbk.py
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9563&quot;&gt;9563&lt;/a&gt;
                      (Sym)difference not successful, fixed by rescaling to robust
                      type
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9628&quot;&gt;9628&lt;/a&gt;
                      Wrong result of within() due to the winding strategy not working
                      correctly for nearly-horizontal segments
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9871&quot;&gt;9871&lt;/a&gt;
                      Remove spike in polygon with only a spike
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9947&quot;&gt;9947&lt;/a&gt;
                      Missing info about WKT in documentation
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9759&quot;&gt;9759&lt;/a&gt;
                      Invalid results of R-tree knn queries for non-cartesian coordinate
                      systems
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10019&quot;&gt;10019&lt;/a&gt;
                      Difference of Linestring and Box returns their intersection
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10077&quot;&gt;10077&lt;/a&gt;
                      Wrong types in concept checks in boost/geometry/arithmetic/arithmetic.hpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      intersects(polygon) could return a self-intersection-point
                      for its closing point, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      equals() could return invalid results for non-simple linear
                      geometries according to the OGC standard, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      touches() didn't work properly for CCW areal geomtries, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      rtree nearest queries returned wrong elements for non-cartesian
                      coordinate systems, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      rtree crashed in some cases when used with Interprocess allocator,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed some Visual C++ 6 workarounds.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ongoing work on improving &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;hash_combine&lt;/span&gt;&lt;/code&gt;,
                this changes the previously documented algorithm for the function.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9221&quot;&gt;Trac
                      #9221 (&lt;em&gt;&amp;quot;message_queue deadlock on linux&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9226&quot;&gt;Trac
                      #9226 (&lt;em&gt;&amp;quot;On some computers, Common Appdata is
                      empty in registry, so boost interprocess cannot work&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9284&quot;&gt;Trac
                      #9284 (&lt;em&gt;&amp;quot;WaitForSingleObject(mutex) must handle
                      WAIT_ABANDONED&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9285&quot;&gt;Trac
                      #9285 (&lt;em&gt;&amp;quot;CreateMutex returns NULL if fails&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9288&quot;&gt;Trac
                      #9288 (&lt;em&gt;&amp;quot;timed_wait does not check if it has
                      expired&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9408&quot;&gt;Trac
                      #9408 (&lt;em&gt;&amp;quot;Android does not support XSI_SHARED_MEMORY_OBJECTS&amp;quot;&lt;/em&gt;&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9729&quot;&gt;Trac
                      #9729 (&lt;em&gt;&amp;quot;crash on managed_external_buffer object
                      construction&amp;quot;&lt;/em&gt;&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9767&quot;&gt;Trac
                      #9767 (&lt;em&gt;&amp;quot;bootstamp generation causes error in
                      case of corrupt Windows Event Log&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9835&quot;&gt;Trac
                      #9835 (&lt;em&gt;&amp;quot;Boost Interprocess fails to compile
                      with Android NDK GCC 4.8, -Werror=unused-variable&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9911&quot;&gt;Trac
                      #9911 (&lt;em&gt;&amp;quot;get_tmp_base_dir(...) failure&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9946&quot;&gt;Trac
                      #9946 (&lt;em&gt;&amp;quot;ret_ptr uninitialized in init_atomic_func,
                      fini_atomic_func&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10011&quot;&gt;Trac
                      #10011 (&lt;em&gt;&amp;quot;segment_manager::find( unique_instance_t*
                      ) fails to compile&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10021&quot;&gt;Trac
                      #10021 (&lt;em&gt;&amp;quot;Interprocess and BOOST_USE_WINDOWS_H&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/2&quot;&gt;GitHub
                      #2 (&lt;em&gt;&amp;quot;Provide support for the Cray C++ compiler.
                      The Cray compiler defines __GNUC__&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/3&quot;&gt;GitHub
                      #3 (&lt;em&gt;&amp;quot;Fix/mingw interprocess_exception throw
                      in file_wrapper::priv_open_or_create&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;ABI breaking&lt;/strong&gt;: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9221&quot;&gt;#9221&lt;/a&gt;
                showed that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_MSG_QUEUE_CIRCULAR_INDEX&lt;/span&gt;&lt;/code&gt;
                option of message queue, was completely broken so an ABI break was
                necessary to have a working implementation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Simplified, refactored and unified (timed_)lock code based on try_lock().
                There were several bugs when handling timeout expirations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the implementation of condition variables' destructors to
                allow POSIX semantics (the condition variable can be destroyed after
                all waiting threads have been woken up)..
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_SHARED_DIR_PATH&lt;/span&gt;&lt;/code&gt;
                option to define the shared directory used to place shared memory
                objects when implemented as memory mapped files.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_USE_WINDOWS_H&lt;/span&gt;&lt;/code&gt;.
                When this macro is defined Interprocess does not declare used Windows
                API function and types, includes all needed windows SDK headers and
                uses types and functions declared by the Windows SDK.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get_size&lt;/span&gt;&lt;/code&gt; to
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows_shared_memory&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved Doxygen generated reference and updated and fixed forward-declaration
                header.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;ABI breaking&lt;/strong&gt;: Fixed ABI regression
                introduced in Boost 1.55 version, mainly noticeable on MSVC compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Source breaking&lt;/strong&gt;: Removed previously
                deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xxx_dont_splay&lt;/span&gt;&lt;/code&gt;
                functions from splay containers, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splay_set_base_hook&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splay_set_member_hook&lt;/span&gt;&lt;/code&gt;from
                splay containers and &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;splay&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/code&gt; extra parameter in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splaytree_algorithms&lt;/span&gt;&lt;/code&gt; functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8468&quot;&gt;#8468:
                      Compile error on visual studio 2010/2012 using vector with
                      custom allocator and aligned types&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9332&quot;&gt;#9332:
                      &lt;em&gt;&amp;quot;has_member_function_callable_with.hpp compile
                      error on msvc-12.0&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9650&quot;&gt;#9650:
                      &lt;em&gt;&amp;quot;intrusive list with stateful value traits&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9746&quot;&gt;#9746:
                      Modern Sun CC compiler detects error in intrusive library header&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9940&quot;&gt;#9940:
                      bad bug in intrusive list with safe_link (or auto_unlink) hooks&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9948&quot;&gt;#9948:
                      remove use of const_cast in intrusive containers&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9949&quot;&gt;#9949:
                      clear header node hooks upon intrusive container destruction&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9961&quot;&gt;#9961:
                      tests for hooks not derived frorm generic_hook&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Optimized tree rebalancing code to avoid redundant assignments.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added 64 bit prime values for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;suggested_upper_bucket_count&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;suggested_lower_bucket_count&lt;/span&gt;&lt;/code&gt; in
                64 bit platforms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Deleted workarounds for old SUN_CC compilers, those are now unsupported
                as modern SunPro compilers are standard-corforming enough.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;try_lexical_convert&lt;/span&gt;&lt;/code&gt;
                function, that retuns &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/code&gt;
                in case of failed conversion and does not require output parameter
                to be Default Constructable (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6700&quot;&gt;#6700&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed conversion of string values with leading zeroes to &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9659&quot;&gt;#9659&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Code was changed to produce a smaller binaries and simplify compiler's
                work (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9046&quot;&gt;#9046&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Boost.LexicalCast library was separated from the Boost.Conversion
                library.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8991&quot;&gt;#8991&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/index.html&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                General changes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      For Windows targets, the library now compiles for Windows XP
                      by default.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added indexing operators with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_name&lt;/span&gt;&lt;/code&gt;
                      arguments to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;record&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;record_view&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added operators for non-const object output to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_formatting_ostream&lt;/span&gt;&lt;/code&gt;.
                      (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9389&quot;&gt;#9389&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for putting function names and source file names
                      of named scopes into the formatted strings. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9263&quot;&gt;#9263&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for incomplete and empty markers to the named
                      scope formatter. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9123&quot;&gt;#9123&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The default presentation for incomplete named scope lists has
                      changed: trailing scope delimiter is omitted.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a support header for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;regex&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      By default Boost.Log uses Boost.Regex internally as the regular
                      expressions backend. The backend can be changed by defining
                      configuration macros.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dump&lt;/span&gt;&lt;/code&gt;
                      manipulator output on AVX2-enabled CPUs (e.g. Intel Haswell).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed compilation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get_attribute&lt;/span&gt;&lt;/code&gt;
                      method of loggers.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed a possible race in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;locked_backend&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function implementation of
                      synchronous and asynchronous sink frontends.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed a possible infinite block of the logging threads in the
                      asynchronous sink enqueue methods when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;block_on_overflow&lt;/span&gt;&lt;/code&gt;
                      strategy was used.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href=&quot;http://www.boost.org/libs/log/doc/html/log/changelog.html&quot;&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change&lt;/strong&gt;: moved a number
                of non-core headers that are predominantly used for internal maintenance
                into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;include_private&lt;/span&gt;&lt;/code&gt;. The headers effected
                are &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;test_data&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;remez&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;. You can continue to use these
                headers by adding &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;include_private&lt;/span&gt;&lt;/code&gt;
                to your compiler's include path.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change&lt;/strong&gt;: A number of distributions
                and special functions were returning the maximum finite value rather
                than raising an overflow_error, this has now been fixed, which means
                these functions now behave as documented. However, since the default
                behavior on raising an overflow_error is to throw a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;overflow_error&lt;/span&gt;&lt;/code&gt; exception, applications
                which have come to reply rely on these functions not throwing may
                experience exceptions where they did not before. The special functions
                involved are gamma_p_inva, gamma_q_inva, ibeta_inva, ibetac_inva,
                ibeta_invb, ibetac_invb, gamma_p_inv, gamma_q_inv. The distributions
                involved are pareto_distrib, beta_distrib, geometric_distrib, negative_binomial_distrib,
                binomial_distrib, chi_squared_distrib, gamma_distrib, inverse_chi_squared_distrib,
                inverse_gamma_distrib. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10111&quot;&gt;#10111&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix round and trunc functions so they can be used with integer arguments,
                see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10066&quot;&gt;#10066&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix Halley iteration to handle zero derivative (with non-zero second
                derivative), see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10046&quot;&gt;#10046&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix Geometric distribution use of Policies, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9833&quot;&gt;#9833&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix corner cases in the negative binomial distribution, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9834&quot;&gt;#9834&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix compilation failures on Mac OS.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added bernoulli_numbers, changed arbitrary precision tgamma/lgamma
                to use Sterling's approximation (from Nikhar Agrawal).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added first derivatives of the Bessel functions: cyl_bessel_j_prime,
                cyl_neumann_prime, cyl_bessel_i_prime, cyl_bessel_k_prime, sph_bessel_prime
                and sph_neumann_prime (from Anton Bikineev).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed buggy Student's t example code, along with docs for testing
                sample means for equivalence.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;max_iter&lt;/span&gt;&lt;/code&gt;
                parameter in root finding code better, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9225&quot;&gt;#9225&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add option to explicitly enable/disable use of __float128 in constants
                code, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9240&quot;&gt;#9240&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cleaned up handling of negative values in Bessel I0 and I1 code (removed
                dead code), see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9512&quot;&gt;#9512&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed handling of very small values passed to tgamma and lgamma so
                they don't generate spurious overflows (thanks to Rocco Romeo).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9672&quot;&gt;#9672 PDF
                and CDF of a Laplace distribution throwing domain_error&lt;/a&gt; Random
                variate can now be infinite.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed several corner cases in rising_factorial, falling_factorial
                and tgamma_delta_ratio with thanks to Rocco Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed constant &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pow23_four_minus_pi&lt;/span&gt;
                &lt;/code&gt; whose value did not match the name (and was unused by Boost.Math),
                see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9712&quot;&gt;#9712&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;BOOST_MOVE_RET&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9482&quot;&gt;#9482:
                &lt;em&gt;&amp;quot;MSVC macros not undefined in boost/move/detail/config_end.hpp&amp;quot;&lt;/em&gt;&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9045&quot;&gt;#9045:
                &lt;em&gt;&amp;quot;Wrong macro name on docs&amp;quot;&lt;/em&gt;&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8420&quot;&gt;#8420:
                &lt;em&gt;&amp;quot;move's is_convertible does not compile with aligned
                data&amp;quot;&lt;/em&gt;&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/mpl/&quot;&gt;MPL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;for_each&lt;/span&gt;&lt;/code&gt; is enabled for use on
                GPU
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_array/index.html&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5664&quot;&gt;#5664&lt;/a&gt; operator() checks for Collection concept but requires RandomAccessCollection
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4874&quot;&gt;#4874&lt;/a&gt; compile errors using Visual C++ 2010 in debug mode
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3581&quot;&gt;#3581&lt;/a&gt; MultiArray storage order example incorrect for fortran_storage_ordering
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4032&quot;&gt;#4032&lt;/a&gt; Move MultiArray concepts out of detail namespace
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9212&quot;&gt;#9212&lt;/a&gt; Broken links to C++ standard papers
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8368&quot;&gt;#8368&lt;/a&gt; GCC -Wundef warning about BOOST_MULTI_ARRAY_NO_GENERATORS
                in multi_array
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
                member function of hashed indices used to have poor performance under
                low load conditions due to the requirement that an iterator to the
                next element must be returned (see ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4264&quot;&gt;#4264&lt;/a&gt;). In accordance
                with the resolution of &lt;a href=&quot;http://lwg.github.io/issues/lwg-closed.html#579&quot;&gt;LWG
                issue #579&lt;/a&gt;, this problem has been fixed while maintaining
                the interface of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;/code&gt;,
                at the expense of using one more word of memory per element. In fact,
                C++ complexity requirements on unordered associative containers have
                been improved for hashed indices so that
              &lt;/div&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    deletion of a given element is unconditionally constant-time,
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    worst-case performance is not &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; but &lt;code&gt;O(n&lt;sub&gt;dist&lt;/sub&gt;)&lt;/code&gt;, where &lt;code&gt;n&lt;sub&gt;dist&lt;/sub&gt;&lt;/code&gt; is the number of
                    non-equivalent elements in the index.
                  &lt;/div&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
              &lt;div&gt;
                Due to the fact that hashed indices rely on a new data structure,
                the internal representation of their iterators and local iterators
                have changed, which affects serialization: their corresponding serialization
                &lt;a href=&quot;http://www.boost.org/libs/serialization/doc/tutorial.html#versioning&quot;&gt;class
                version&lt;/a&gt; has been bumped from 0 to 1. Old archives involving
                hashed index (local) iterators can be loaded by Boost 1.56 version
                of Boost.MultiIndex, but not the other way around.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Hashed indices now provide &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;reserve&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Hashed indices can now be checked for equality and inequality following
                the (suitably adapted) C++ standard specification in &lt;strong&gt;[unord.req]&lt;/strong&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The public interface of Boost.MultiIndex provide &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                specifications where appropriate (for compliant compilers).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved performance of failed insertions into a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Much internal code aimed at supporting MSVC++ 7.0 and prior has been
                removed. Compilation times without this legacy code might be slightly
                faster.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug with insertion via iterators dereferencing to rvalues
                (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9665&quot;&gt;#9665&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Made Boost.MultiIndex compatible with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_BIND_NO_PLACEHOLDERS&lt;/span&gt;&lt;/code&gt;
                (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9798&quot;&gt;#9798&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Change floating point to rational conversions to be implicit, see
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10082&quot;&gt;10082&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix definition of checked_cpp_rational typedef.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bug in assignment from string in cpp_int, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9936&quot;&gt;9936&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new cpp_bin_float backend for binary floating point.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bug in assignment from string in cpp_int, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9936&quot;&gt;9936&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added MSVC-specific #include for compiler intrinsics, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9336&quot;&gt;9336&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various typos in docs, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9432&quot;&gt;9432&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed gmp_rational to allow move-copy from an already copied-from
                object, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9497&quot;&gt;9497&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added list of values for numeric_limits.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/odeint/&quot;&gt;Odeint&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added algebra and operations dispatcher for automatic detection of
                appropriate algebras and operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for Eigen, Boost.Multiarray, Boost.Mpi, Boost.Compute,
                Blaze, and NT2.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed algebra interface to use algebra.norm_inf function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added iterators for iterating through the solution of the ODEs, hence
                an alternative to the integrate functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the Velocity-Verlet method.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minor bug fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/optional/&quot;&gt;Optional&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for rvalue references. Now &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; works with moveable but non-copyable
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;'s.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt; (now
                uses move operations).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;. This is the last of the requests
                from &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1841&quot;&gt;#1841&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;/code&gt; is moveable,
                including conditional &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                specifications, which make it &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_if_noexcept&lt;/span&gt;&lt;/code&gt;-friendly.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Using explicit operator bool() on platforms that support it (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4227&quot;&gt;#4227&lt;/a&gt;)
                (breaking change).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Forward declaration of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;)&lt;/span&gt;&lt;/code&gt;
                to prevent inadvertent incorrect serialization of optional objects.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed depprecated function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; from examples (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9005&quot;&gt;#9005&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Equality comparison with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none&lt;/span&gt;&lt;/code&gt;
                does not require that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;
                be EqualityComparable.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Optional rvalue references are explicitly disallowed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Binding temporaries to optional references is explicitly disallowed
                (breaking change).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                More ways to access the contained value, functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_or&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_or_eval&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated and reorganized documentation, added tutorial and quick guide
                sections.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/predef/&quot;&gt;Predef&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Addition of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PLAT_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt; platform definitions for MinGW and
                Windows platform variants.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Detection of ARM architecture for Windows compilers to target mobile
                devices of Windows 8.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved ARM detection for 64 bit ARM.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added detection of iOS as an operating system.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved detection of endianess on some platforms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Addition of exclusive plus emulated definitions for platform and
                compiler detection.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/preprocessor/&quot;&gt;Preprocessor&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                When using variadic macros tuple functionality was added to match
                all the array functionality.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/program_options/&quot;&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Columns in the &lt;code&gt;&lt;span class=&quot;special&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;help&lt;/span&gt;&lt;/code&gt;
                output are now aligned across all option groups (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6114&quot;&gt;#6114&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Option names with dashes are no longer truncated in error messages
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8009&quot;&gt;#8009&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change:&lt;/strong&gt; corrected behavior
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_regex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mark_count&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                to match existing documentation, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_regex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;subexpression&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; changed to match, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9227&quot;&gt;#9227&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8903&quot;&gt;#8903&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed documentation typos from &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9283&quot;&gt;#9283&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in collation code that failed if the locale generated collation
                strings with embedded nul's, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9451&quot;&gt;#9451&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apply patch for unusual thread usage (no statically initiallized
                mutexes), see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9461&quot;&gt;#9461&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added better checks for invalid UTF-8 sequences, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9473&quot;&gt;#9473&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/&quot;&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the overloads of &lt;a href=&quot;http://www.boost.org/libs/smart_ptr/make_shared_array.html&quot;&gt;make_shared&lt;/a&gt;
                and &lt;a href=&quot;http://www.boost.org/libs/smart_ptr/make_shared_array.html&quot;&gt;allocate_shared&lt;/a&gt;
                of array types (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;) to conform to the specification
                in C++ standard paper &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3939.html&quot;&gt;N3939&lt;/a&gt;
                and significantly reduced the spatial overhead of the internal bookkeeping
                structures.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the implementations of make_shared and allocate_shared for
                scalar types and array types, respectively, to resolve C++ standard
                library defect report &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2070&quot;&gt;#2070&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Experimental Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7446&quot;&gt;#7446&lt;/a&gt;
                      Async: Add when_any.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7447&quot;&gt;#7447&lt;/a&gt;
                      Async: Add when_all.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7448&quot;&gt;#7448&lt;/a&gt;
                      Async: Add async taking a scheduler parameter.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8274&quot;&gt;#8274&lt;/a&gt;
                      Synchro: Add concurrent queue
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8513&quot;&gt;#8513&lt;/a&gt;
                      Async: Add a basic thread_pool executor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8518&quot;&gt;#8518&lt;/a&gt;
                      Synchro: Add a latch class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8516&quot;&gt;#8516&lt;/a&gt;
                      Async: Add future/shared_future::then taking a scheduler as
                      parameter.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9058&quot;&gt;#9058&lt;/a&gt;
                      with_lock_guard function
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9571&quot;&gt;#9571&lt;/a&gt;
                      Add a dynamic executor and an executor adaptor
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8070&quot;&gt;#8070&lt;/a&gt;
                      prefer GetTickCount64 over GetTickCount
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9333&quot;&gt;#9333&lt;/a&gt;
                      ex_scoped_thread compile fails on msvc-12.0
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9341&quot;&gt;#9341&lt;/a&gt;
                      compile error scoped_thread(move semantics) intel-linux-14.0.1
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9366&quot;&gt;#9366&lt;/a&gt;
                      async(Executor, ...) fails to compile with msvc-10,11,12
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9402&quot;&gt;#9402&lt;/a&gt;
                      test_excutor regression on msvc-10,11,12
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9404&quot;&gt;#9404&lt;/a&gt;
                      ex_make_future regression error
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9471&quot;&gt;#9471&lt;/a&gt;
                      Synchronization documentation nits
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9535&quot;&gt;#9535&lt;/a&gt;
                      Missing exception safety might result in crash
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9618&quot;&gt;#9618&lt;/a&gt;
                      try_join_for problem: program is not terminate.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9625&quot;&gt;#9625&lt;/a&gt;
                      Please rewrite boost::thread::~thread() reference section
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9632&quot;&gt;#9632&lt;/a&gt;
                      public method start_thread in boost::thread class
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9673&quot;&gt;#9673&lt;/a&gt;
                      thread compilation with MingW/gcc on Windows gives errors
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9708&quot;&gt;#9708&lt;/a&gt;
                      boost::condition_variable::timed_wait unexpectedly wakes up
                      while should wait infinite
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9711&quot;&gt;#9711&lt;/a&gt;
                      future continuation called twice
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9867&quot;&gt;#9867&lt;/a&gt;
                      Remove references to gcc-mingw
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10008&quot;&gt;#10008&lt;/a&gt;
                      Boost Synchronization documentation typos (futures)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10058&quot;&gt;#10058&lt;/a&gt;
                      Null pointer access in once
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10125&quot;&gt;#10125&lt;/a&gt;
                      call_once: compile errors in variadic version with rvalue reference
                      emulation
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10126&quot;&gt;#10126&lt;/a&gt;
                      call_once: deprecate (Function, once_flag&amp;amp;) overload
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10147&quot;&gt;#10147&lt;/a&gt;
                      pthread_delay_np() parameters different on AIX even with gcc
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10155&quot;&gt;#10155&lt;/a&gt;
                      thread::physical_concurrency() always returns 0 on PowerPC
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10184&quot;&gt;#10184&lt;/a&gt;
                      Future: multiply defined symbols
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/tr1/index.html&quot;&gt;TR1&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This library is now deprecated.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/tti/&quot;&gt;TTI&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9441&quot;&gt;#9441&lt;/a&gt;: Added better support for Sun Solaris Studio C++
                compiler.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9444&quot;&gt;#9444&lt;/a&gt;: Handle all situations where the enclosing class
                is not a class type.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minor documentation and warning fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9377&quot;&gt;#9377&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9719&quot;&gt;#9719&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Always use prime number of buckets for integers. Fixes performance
                regression when inserting consecutive integers (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9282&quot;&gt;#9282&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Only construct elements using allocators, as specified in C++11 standard.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some components were moved to the new Boost.Core library.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;/code&gt; is
                deprecated in favor of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_deleter&lt;/span&gt;&lt;/code&gt;
                from Boost.Core. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;/code&gt;
                is an alias for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_deleter&lt;/span&gt;&lt;/code&gt;,
                it will be removed in future releases.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;base_from_member&lt;/span&gt;&lt;/code&gt;
                utility now supports lvalue reference member types. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7577&quot;&gt;#7577&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/uuid/index.html&quot;&gt;UUID&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added basic support for C++11 features.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented SSE-optimized versions of some functions of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;uuid&lt;/span&gt;&lt;/code&gt;, including comparison operators
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt;. The support
                for different versions of SSE is automatically detected at compile
                time for most compilers, but can also be explicitly enabled or disabled
                with &lt;a href=&quot;http://www.boost.org/libs/uuid/uuid.html#Configuration&quot;&gt;configuration
                macros&lt;/a&gt;. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8509&quot;&gt;#8509&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Silenced some compiler warnings. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8495&quot;&gt;#8495&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8697&quot;&gt;#8697&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change:&lt;/strong&gt; Variant now uses
                variadic templates if they are supported by compiler. This leads
                to smaller binaries and better compilation times but in some cases
                may break metaprogramming functions, especially if &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/BOOST_VARIANT_ENUM_PARAMS.html&quot;&gt;BOOST_VARIANT_ENUM_PARAMS&lt;/a&gt;
                and &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/BOOST_VARIANT_ENUM_SHIFTED_PARAMS.html&quot;&gt;BOOST_VARIANT_ENUM_SHIFTED_PARAMS&lt;/a&gt;
                are not used. Usage of variadic templates &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/BOOST_VARIANT_DO_NOT_USE_VARIADIC_TEMPLATES.html&quot;&gt;may
                be disabled&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/reference.html#header.boost.variant.polymorphic_get_hpp&quot;&gt;Added&lt;/a&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_get&lt;/span&gt;&lt;/code&gt; function
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9479&quot;&gt;#9479&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Move-only classes now can be returned by visitors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Optimized variant::swap() and fixed ambiguity in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_swap&lt;/span&gt;&lt;/code&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2839&quot;&gt;#2839&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added conditional noexcepts to move assignments, default and move
                constructors making &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;variant&lt;/span&gt;&lt;/code&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_if_noexcept&lt;/span&gt;&lt;/code&gt;-friendly
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7911&quot;&gt;#7911&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Exceptions are now visible across modules even with -fvisibility=hidden
                flags.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Dropped support of antique compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3020&quot;&gt;#3020&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4, 3.3, 3.2, 3.1, 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++98: 3.3.16
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11, libc++: 3.4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1y: 3.3.16
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.8.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++1y: 4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 13.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 5.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 5.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.9.0, 4.8.2, 4.7.3, 4.7.2, 4.6.3, 4.5.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 12.0, 11.0, 10.0, 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4, 3.3, 3.2, 3.1, 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++98: 3.3.16
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11, libc++: 3.4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1y: 3.3.16
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14, libc++: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.9.0, 4.8.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++1y: 4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 13.1, 13.0, 12.1, 11.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 5.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11:
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.9.0, 4.8.2, 4.7.2, 4.6.3, 4.5.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 12.0, 11.0, 10.0, 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC, ARM: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC, x86: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.55.0</title><link>http://www.boost.org/users/history/version_1_55_0.html</link><guid>http://www.boost.org/users/history/version_1_55_0.html</guid><pubDate>Mon, 11 Nov 2013 11:50:20 -0800</pubDate><description>



  &lt;div id=&quot;version_1_55_0.other_downloads&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Other Downloads&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;https://sourceforge.net/projects/boost/files/boost-binaries/1.55.0/&quot;&gt;Windows
          binaries&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;https://sourceforge.net/projects/boost/files/boost-docs/1.55.0/&quot;&gt;PDF
          documentation&lt;/a&gt; (only for BoostBook based documentation).
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.news&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;News&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Support was removed from &lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt; for some
      very old versions of compilers. The new minimum requirements are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Digitial Mars 8.41
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          GCC 3.3
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Intel 6.0
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Visual C++ 7.1
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      &lt;strong&gt;Note:&lt;/strong&gt; This is just the mininimum requirements
      for Config. Some Boost libraries may have higher mininimum requirements and
      not support all platforms or compilers.
    &lt;/p&gt;
    &lt;p&gt;
      Other compilers are currently unchanged, but we are considering removing support
      for some other old compilers. &lt;strong&gt;Candidates&lt;/strong&gt; for
      removal are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Metroworks C++ (i.e. codewarrior)
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          SunPro 5.7 and earlier
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Borland C++ Builder 2006 (5.82) and earlier
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      If you're using any of these, please let us know on the mailing lists. We will
      take into account any feedback received before making a decision.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.known_bugs&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Known Bugs with Visual Studio
    2013/Visual C++ 12&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Visual Studio 2013 was released quite late in the release process, so there
      exist several unresolved issues. These include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Serialization can't compile because of a missing include.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;has_member_function_callable_with&lt;/span&gt;&lt;/code&gt;
          from Boost.Container's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
          causes a compile error (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9332&quot;&gt;#9332&lt;/a&gt;).
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          In libraries such as Unordered and MultiIndex, calling overloaded functions
          with initializer lists can result in a compile error, with Visual C++ claiming
          that the overloads are ambiguous. This is a Visual C++ bug and it isn't
          clear if there's a good workaround. This won't affect code that doesn't
          use initializer lists, or uses an initializer list that doesn't require
          an implicit conversion (i.e. an initializer list of the container's exact
          value type).
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Thread: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ex_scoped_thread&lt;/span&gt;&lt;/code&gt;
          compile fails (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9333&quot;&gt;#9333&lt;/a&gt;).
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.patches&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Patches&lt;/span&gt;&lt;/h3&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_55_0/001-log_fix_dump_avx2.patch&quot;&gt;Log patch&lt;/a&gt;:
          fixes incorrect output of the &lt;a href=&quot;http://www.boost.org/doc/libs/1_55_0/libs/log/doc/html/log/detailed/utilities.html#log.detailed.utilities.manipulators.dump&quot;&gt;dump&lt;/a&gt;
          manipulator, when used on AVX2-enabled CPU (e.g. Intel Haswell).
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/predef/&quot;&gt;Predef&lt;/a&gt;:&lt;/span&gt; This library defines a
          set of compiler, architecture, operating system, library, and other version
          numbers from the information it can gather of C, C++, Objective C, and
          Objective C++ predefined macros or those defined in generally available
          headers, from Rene Rivera.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7915&quot;&gt;#7915&lt;/a&gt; Fix silly typos.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8850&quot;&gt;#8850&lt;/a&gt; Fix MSVC warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8262&quot;&gt;#8262&lt;/a&gt; Rename &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;average&lt;/span&gt;&lt;/code&gt;
                to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fdiv&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_any_cast&lt;/span&gt;&lt;/code&gt; exception is now visible
                across modules &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8751&quot;&gt;#8751&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                member function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NOEXCEPT&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issue with const rvalues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9215&quot;&gt;#9215&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented a limited port to Windows Runtime. This support requires
                that the language extensions be enabled. Due to the restricted facilities
                exposed by the Windows Runtime API, the port also comes with the
                following caveats:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The core facilities such as the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;/code&gt;, buffers,
                      composed operations, timers, etc., should all work as normal.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      For sockets, only client-side TCP is supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Explicit binding of a client-side TCP socket is not supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function is not supported
                      for sockets. Asynchronous operations may only be cancelled
                      by closing the socket.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Operations that use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
                      are not supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Only &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;no_delay&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;socket_base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;keep_alive&lt;/span&gt;&lt;/code&gt; options are supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Resolvers do not support service names, only numbers. I.e.
                      you must use &amp;quot;80&amp;quot; rather than &amp;quot;http&amp;quot;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Most resolver query flags have no effect.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a regression (introduced in Boost 1.54) where, on some platforms,
                errors from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_connect&lt;/span&gt;&lt;/code&gt;
                were not correctly propagated through to the completion handler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8795&quot;&gt;#8795&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a Windows-specific regression (introduced in Boost 1.54) that
                occurs when multiple threads are running an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;.
                When the bug occurs, the result of an asynchronous operation (error
                and bytes transferred) is incorrectly discarded and zero values used
                instead. For TCP sockets this results in spurious end-of-file notifications
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8933&quot;&gt;#8933&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug in handler tracking, where it was not correctly printing
                out some handler IDs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8808&quot;&gt;#8808&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed the comparison used to test for successful synchronous accept
                operations so that it works correctly with unsigned socket descriptors
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8752&quot;&gt;#8752&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured the signal number is correctly passed to the completion handler
                when starting an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_wait&lt;/span&gt;&lt;/code&gt;
                on a signal that is already raised (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8738&quot;&gt;#8738&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppressed a g++ 4.8+ warning about unused typedefs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8980&quot;&gt;#8980&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled the move optimisation for handlers that use the default invocation
                hook (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8624&quot;&gt;#8624&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clarified that programs must not issue overlapping &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_write_at&lt;/span&gt;&lt;/code&gt; operations (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8669&quot;&gt;#8669&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the Windows &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;
                backend to treat &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ERROR_MORE_DATA&lt;/span&gt;&lt;/code&gt;
                as a non-fatal error when returned by &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;GetOverlappedResult&lt;/span&gt;&lt;/code&gt;
                for a synchronous read (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8722&quot;&gt;#8722&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ language extensions use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;/code&gt;
                as a keyword. Added a workaround that renames the namespace to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_generic&lt;/span&gt;&lt;/code&gt; when those language
                extensions are in effect.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some asynchronous operations that missed out on getting &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_result&lt;/span&gt;&lt;/code&gt; support in Boost 1.54.
                In particular, the buffered stream templates have been updated so
                that they adhere to current handler patterns (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9000&quot;&gt;#9000&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9001&quot;&gt;#9001&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled move support for Microsoft Visual Studio 2012 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8959&quot;&gt;#8959&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;/code&gt;
                support for Microsoft Visual Studio 2012.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed a use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;min&lt;/span&gt;&lt;/code&gt;
                in the Windows IOCP backend to avoid a dependency on the &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; header (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8758&quot;&gt;#8758&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Eliminated some unnecessary handler copies.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various minor and cosmetic issues in code and documentation
                (including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8347&quot;&gt;#8347&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8950&quot;&gt;#8950&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8953&quot;&gt;#8953&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8965&quot;&gt;#8965&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8997&quot;&gt;#8997&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for 64-bit atomic operations on x86 target for GCC,
                MSVC and compatible compilers. The support is enabled when it is
                known at compile time that the target CPU supports required instructions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for 128-bit atomic operations on x86-64 target for
                GCC and compatible compilers. The support is enabled when it is known
                at compile time that the target CPU supports required instructions.
                The support can be tested for with the new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ATOMIC_INT128_LOCK_FREE&lt;/span&gt;&lt;/code&gt;
                macro.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a more efficient implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; based on GCC &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__atomic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;
                intrinsics available since GCC 4.7.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for more ARM v7 CPUs, improved detection of Thumb 2.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for x32 (i.e. 64-bit x86 with 32-bit pointers) target
                on GCC and compatible compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed dependency on Boost.Thread.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Internal lock pool now includes proper padding and alignment to avoid
                false sharing.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with Intel compiler on Windows. Removed internal
                macro duplication when compiled on Windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some code refactoring to use C++11 features when available.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7868&quot;&gt;#7868&lt;/a&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;chrono_io&lt;/span&gt;&lt;/code&gt; parses
                      time incorrectly (1.53 and 1.52)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9028&quot;&gt;#9028&lt;/a&gt;
                      Typo in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stopwatches&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;formatters&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;base_formatter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9147&quot;&gt;#9147&lt;/a&gt;
                      uninitialized &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tm&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer/&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for rvalue references and rvalue references emulation
                using Boost.Move. Values are moved only if value type has noexcept
                move constructor and noexcept move assignment operator &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7888&quot;&gt;#7888&lt;/a&gt;.
                Now Circular Buffer is usable with move-only types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Much better documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5362&quot;&gt;#5362&lt;/a&gt;
                circular_buffer does not compile with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7025&quot;&gt;#7025&lt;/a&gt;
                circular buffer reports warning: &amp;quot; type qualifiers ignored on
                function return type&amp;quot; while compile.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7950&quot;&gt;#7950&lt;/a&gt;
                Eliminate W4-warnings under VS2005 - warning C4913: user defined
                binary operator ',' exists but no overload could convert all operands,
                default built-in binary operator ',' used.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change:&lt;/strong&gt; Removed support
                for some older compilers. The new minimum compiler versions are:
              &lt;/div&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Digitial Mars 8.41
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    GCC 3.3
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Intel 6.0
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Visual C++ 7.1
                  &lt;/div&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
              &lt;div&gt;
                Other compilers are unchanged.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;span class=&quot;link&quot;&gt;SCARY
                iterators&lt;/span&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8269&quot;&gt;#8269&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8473&quot;&gt;#8473&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8892&quot;&gt;#8892&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9009&quot;&gt;#9009&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9064&quot;&gt;#9064&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9092&quot;&gt;#9092&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9108&quot;&gt;#9108&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8650&quot;&gt;#8650&lt;/a&gt;
                SSE2 intrinsics
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New interface (unidirectional data transfer).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8782&quot;&gt;#8782&lt;/a&gt;
                no best alternative
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8801&quot;&gt;#8801&lt;/a&gt;
                auto-linking
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/filesystem/&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Android compilation &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8706&quot;&gt;#8706&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8759&quot;&gt;#8759&lt;/a&gt; specialization of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;convert_impl&lt;/span&gt;&lt;/code&gt;
                for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;map_tag&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/index.html&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added centroid for segment type
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added intersects() and disjoints() for Segment-Box and Linestring-Box
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added rtree creation using packing algorithm
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added contains() and covers() spatial query predicates
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added iterative queries
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      In some cases .back() or .clear() was called, violating the
                      usage of Concepts. Fixed for the reported cases
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6958&quot;&gt;6958&lt;/a&gt;
                      Intersection generates self-intersection. Caused by spike,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8364&quot;&gt;8364&lt;/a&gt;
                      Invalid input exception, caused by spikes in previous steps,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8365&quot;&gt;8365&lt;/a&gt;
                      Invalid input exception, caused by spikes in previous steps,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8969&quot;&gt;8969&lt;/a&gt;
                      boost::geometry::model::point single argument constructor should
                      be explicit
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8825&quot;&gt;8825&lt;/a&gt;
                      Patch adding member variable documentation to doxygen_xml2qbk
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8652&quot;&gt;8652&lt;/a&gt;
                      Intersection fails for triangle-triangle intersection. Caused
                      by spike, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9047&quot;&gt;9047&lt;/a&gt;
                      Boost files that include themselves (strategies/intersection.hpp),
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/code&gt; is no longer allowed
                as a bundled property type (for example, in the VertexProperties
                template parameters to graph types); it did not work reliably before,
                but a static assertion now forbids it entirely. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;no_property&lt;/span&gt;&lt;/code&gt; instead.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;finish_edge&lt;/span&gt;&lt;/code&gt;
                visitor event point in depth-first search; the change should be backward-compatible
                with visitors that do not have that member function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disabled building of tests on Sun compiler.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multiple source vertices are supported in non-named-parameter versions
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth_first_visit&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth_first_search&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;,
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths_no_init&lt;/span&gt;&lt;/code&gt;.
                This feature is not yet documented; to use it, replace the single
                parameter for the source vertex in each of these functions by two
                input iterators of the same type containing the source vertices to
                use.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Hawick circuits algorithm; contributed by Louis Dionne.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added edge coloring algorithm; contributed by Maciej Piechotka.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added min-cost max-flow algorithm; contributed by Piotr Wygocki.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs and feature requests from Trac fixed: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5269&quot;&gt;#5269&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8317&quot;&gt;#8317&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8433&quot;&gt;#8433&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8791&quot;&gt;#8791&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8877&quot;&gt;#8877&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8986&quot;&gt;#8986&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9012&quot;&gt;#9012&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9080&quot;&gt;#9080&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Simplify a SFINAE check so that it will hopefully work on Sun 5.9
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8822&quot;&gt;#8822&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppress Visual C++ infinite loop warning (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8568&quot;&gt;#8568&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7156&quot;&gt;#7156&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7164&quot;&gt;#7164&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8277&quot;&gt;#8277&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8976&quot;&gt;#8976&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9065&quot;&gt;#9065&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9073&quot;&gt;#9073&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9008&quot;&gt;#9008&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Source breaking&lt;/strong&gt;: Deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xxx_dont_splay&lt;/span&gt;&lt;/code&gt; functions from splay
                containers. Deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splay_set_hook&lt;/span&gt;&lt;/code&gt;
                from splay containers, use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bs_set_hook&lt;/span&gt;&lt;/code&gt;
                instead. Both will be removed in Boost 1.56.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;ABI breaking&lt;/strong&gt;: Hash containers' end
                iterator was implemented pointing to one-past the end of the bucket
                array (see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8698&quot;&gt;#8698&lt;/a&gt;)
                causing severe bugs when values to be inserted where allocated next
                to the bucket array. End iterator implementation was changed to point
                to the beginning of the bucket array.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Big refactoring in order to reduce template and debug symbol bloat.
                Test object files have been slashed to half in MSVC compilers in
                Debug mode. Toolchains without Identical COMDAT Folding (ICF) should
                notice size improvements.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;span class=&quot;link&quot;&gt;SCARY iterators&lt;/span&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_alloc&lt;/span&gt;&lt;/code&gt; exceptions are now are
                not converted to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_lexical_cast&lt;/span&gt;&lt;/code&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8966&quot;&gt;#8966&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added static assert that checks for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;numeric_limits&lt;/span&gt;&lt;/code&gt;
                specializations if they are required for conversion. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HAS_INT128&lt;/span&gt;&lt;/code&gt; for detecting
                128 bit integers support &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8790&quot;&gt;#8790&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation improved and more usage examples added.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                General changes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a new configuration macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_LOG_WITHOUT_DEFAULT_FACTORIES&lt;/span&gt;&lt;/code&gt;.
                      By defining this macro the user can disable compilation of
                      the default filter and formatter factories used by settings
                      parsers. This can substantially reduce binary sizes while still
                      retaining support for settings parsers.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Rewritten some of the parsers to reduce the compiled binary
                      size. The rewritten parsers are more robust in detecting ambiguous
                      and incorrect input.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The following headers are deprecated: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ref_counter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;explicit_operator_bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;.
                      These headers will be removed in future releases. The contents
                      of these headers were moved to other libraries.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timer&lt;/span&gt;&lt;/code&gt;
                      attribute generating incorrect time readings on Windows on
                      heavy thread contention when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;QueryPerformanceCounter&lt;/span&gt;&lt;/code&gt;
                      API was used.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed a bug in the filter parser that prevented using parsed
                      filters with some attributes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed thread id formatting discrepancies between the default
                      sink and formatters.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Closed tickets: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8815&quot;&gt;#8815&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8819&quot;&gt;#8819&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8915&quot;&gt;#8915&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8917&quot;&gt;#8917&lt;/a&gt;,
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9139&quot;&gt;#9139&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9140&quot;&gt;#9140&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9153&quot;&gt;#9153&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9155&quot;&gt;#9155&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href=&quot;http://www.boost.org/libs/log/doc/html/log/changelog.html&quot;&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppress numerous warnings (mostly from GCC-4.8 and MSVC) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8384&quot;&gt;#8384&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8855&quot;&gt;#8855&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9107&quot;&gt;#9107&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9109&quot;&gt;#9109&lt;/a&gt;..
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed PGI compilation issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8333&quot;&gt;#8333&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed PGI constant value initialization issue that caused erf to
                generate incorrect results &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8621&quot;&gt;#8621&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Prevent macro expansion of some C99 macros that are also C++ functions
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8732&quot;&gt;#8732&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8733&quot;&gt;#8733&lt;/a&gt;..
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Student's T distribution to behave correctly with huge degrees
                of freedom (larger than the largest representable integer) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8837&quot;&gt;#8837&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make some core functions usable with &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&lt;/code&gt; even when the platform
                has no standard library &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&lt;/code&gt; support &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8940&quot;&gt;#8940&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix error handling of distributions to catch invalid scale and location
                parameters when the random variable is infinite &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9042&quot;&gt;#9042&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9126&quot;&gt;#9126&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add workaround for broken &amp;lt;tuple&amp;gt; in Intel C++ 14 &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9087&quot;&gt;#9087&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve consistency of argument reduction in the elliptic integrals
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9104&quot;&gt;#9104&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bug in inverse incomplete beta that results in cancellation errors
                when the beta function is really an arcsine or Student's T distribution.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix issue in Bessel I and K function continued fractions that causes
                spurious over/underflow.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add improvement to non-central chi squared distribution quantile
                due to Thomas Luu.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7952&quot;&gt;#7952&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8764&quot;&gt;#8764&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8765&quot;&gt;#8765&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8842&quot;&gt;#8842&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8979&quot;&gt;#8979&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New feature: interrupt states now support a sequence of events to
                end the interruption.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Trac &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8686&quot;&gt;#8686&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for Boost.Serialization.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppressed some GCC warnings. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8872&quot;&gt;8872&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in pow for large integer arguments. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8809&quot;&gt;8809&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in pow for calculation of 0[super N]. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8798&quot;&gt;8798&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in fixed precision cpp_int IO code that causes conversion
                to string to fail when the bit count is very small (less than CHAR_BIT).
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8745&quot;&gt;8745&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in cpp_int that causes left shift to fail when a fixed
                precision type would overflow. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8741&quot;&gt;8741&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some cosmetic warnings from cpp_int. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8748&quot;&gt;8748&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed calls to functions which are required to be macros in C99.
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8732&quot;&gt;8732&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug that causes construction from INT_MIN, LONG_MIN etc to
                fail in cpp_int. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8711&quot;&gt;8711&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Boost.MultiIndex has been brought to a higher level of compliance
                with C++11.
              &lt;/div&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;
                    is now efficiently movable.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Initializer lists supported.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Emplace functions provided.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Non-copyable elements (such as &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;) supported. This includes
                    insertion of a range [&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;first&lt;/span&gt;&lt;/code&gt;,&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;last&lt;/span&gt;&lt;/code&gt;) where the iterators point
                    to a type that is convertible to that of the element: no copy
                    construction happens in the process.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Random access indices provide &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shrink_to_fit&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
                  &lt;/div&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
              &lt;div&gt;
                Refer to the &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/compiler_specifics.html&quot;&gt;compiler
                specifics&lt;/a&gt; section for limitations on pre-C++11 compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The following classes are deprecated:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#member_offset&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;member_offset&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;const_mem_fun_explicit&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mem_fun_explicit&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_equal_to&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_equal_to&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_less&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_less&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_greater&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_greater&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_hash&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_hash&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/mpi/&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced calls to deprecated MPI functions
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for multi-threaded initialization
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added in-place collectives
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/phoenix/&quot;&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9049&quot;&gt;#9049&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;phoenix&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt;
                constructor is constexpr.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated CGAL part of the Voronoi benchmark with patches from Sebastien
                Loriot. Updated documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added polygon decomposition capability to polygon_90_set_data container
                (patch from Intel). Updated documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8197&quot;&gt;#8197&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_map/index.html&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                dynamic_properties objects can now be built by non-destructively
                chaining &lt;code&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;pm&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; calls. Example:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;dynamic_properties&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;color_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;pos&amp;quot;&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;position_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The use of raw pointers as property maps is deprecated; it often
                failed on Visual Studio in the past. This usage has been removed
                from all tests and examples in Boost.Graph. The replacement to use
                for vertex properties in graphs (the most common use for this feature)
                is:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;make_iterator_property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class=&quot;identifier&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;vertex_index&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;))&lt;/span&gt;
&lt;/pre&gt;
              &lt;div&gt;
                (Note: the lack of namespace qualification on get() in this code
                is necessary for generic code). Outside a graph context, the closest
                equivalent is:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;make_iterator_property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;typed_identity_property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;())&lt;/span&gt;
&lt;/pre&gt;
              &lt;div&gt;
                There are commented-out static assertions on lines 151 and 159 of
                &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; that can be un-commented to find
                deprecated uses of pointers in user code.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/rational&quot;&gt;Rational&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lowest&lt;/span&gt;&lt;/code&gt; and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;max_digits10&lt;/span&gt;&lt;/code&gt;, members
                of std::numeric_limits added in C++11, to the unit-test code. Needed
                since Boost.Test refers to one of them when compiled in C++11 mode.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed initialization of some internal variables to something that
                cannot be a narrowing conversion, which fixes issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5855&quot;&gt;#5855&lt;/a&gt;. Needed
                since narrowing conversions are an error in C++11.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/index.html&quot;&gt;SmartPtr&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;smart_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ref_counter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; header, extracted from Boost.Log.
                The header implements a mixin base class that adds support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ptr&lt;/span&gt;&lt;/code&gt; to user's classes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/Thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8519&quot;&gt;#8519&lt;/a&gt;
                      Synchro: Update class barrier with a completion function.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8515&quot;&gt;#8515&lt;/a&gt;
                      Async: Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;then&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8519&quot;&gt;#8519&lt;/a&gt;
                      Synchro: Update class barrier with a completion function
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8615&quot;&gt;#8615&lt;/a&gt;
                      Async: Replace make_future/make_shared_future by make_ready_future.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8627&quot;&gt;#8627&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;::unwrap and unwrapping constructor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8677&quot;&gt;#8677&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;::get_or.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8678&quot;&gt;#8678&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;::fallback_to.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8891&quot;&gt;#8891&lt;/a&gt;
                      upgrade_to_unique_lock: missing mutex() function.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8955&quot;&gt;#8955&lt;/a&gt;
                      Request for more efficient way to get exception_ptr from future.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7461&quot;&gt;#7461&lt;/a&gt;
                      detail::win32::ReleaseSemaphore may be called with count_to_release
                      equal to 0
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8070&quot;&gt;#8070&lt;/a&gt;
                      prefer GetTickCount64 over GetTickCount
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8768&quot;&gt;#8768&lt;/a&gt;
                      win32 condition_variable::wait_until infinite wait in rare
                      cases.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8817&quot;&gt;#8817&lt;/a&gt;
                      Boost Thread Windows CE _createthreadex handling breaks mingw
                      w64.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8943&quot;&gt;#8943&lt;/a&gt;
                      Failed to compile code using boost::call_once with Intel C++
                      Composer XE 2013 on Windows.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8931&quot;&gt;#8931&lt;/a&gt;
                      Typos in external_locking reference.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9029&quot;&gt;#9029&lt;/a&gt;
                      Misprint in documentation.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9037&quot;&gt;#9037&lt;/a&gt;
                      gcc -Wshadow gives warnings in condition_variable{,_fwd}.hpp.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9041&quot;&gt;#9041&lt;/a&gt;
                      Boost.Thread DSO's may need to link with Boost.Atomic.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9048&quot;&gt;#9048&lt;/a&gt;
                      boost::scoped_thread useless ctor with variadic template arguments.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9079&quot;&gt;#9079&lt;/a&gt;
                      Condition variable will wait forever for some timepoint values
                      (Win).
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/timer/&quot;&gt;Timer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation on Intel compiler &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8956&quot;&gt;#8956&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_copy_contructible&lt;/span&gt;&lt;/code&gt;
                trait &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8802&quot;&gt;#8802&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8851&quot;&gt;#8851&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8874&quot;&gt;#8874&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid exposing some detail functions via. ADL on the iterators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Work around variadic parameter bug in Visual Studio 2013. The compiler
                still has problems with initializer lists, but it might not be possible
                to work around those.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; can be set to use TR1
                protocol by default and fall back to &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;
                if the function object does not support it (like C++11 lambda functions,
                for example). Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_RESULT_OF_USE_TR1_WITH_DECLTYPE_FALLBACK&lt;/span&gt;&lt;/code&gt;
                configuration macro to enable this mode.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved support for C++11 in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;base_from_member&lt;/span&gt;&lt;/code&gt;
                class template. The class implements perfect forwarding for the constructor
                arguments, if the compiler supports rvalue references, variadic templates
                and function template default arguments.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;explicit_operator_bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                headers, which were extracted from Boost.Log. The headers implement
                utilities for defining explicit conversion operators to &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; and a deleter function object
                that does nothing, respectively.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation of constructor and assignment operator with const
                rvalues input parameters &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8988&quot;&gt;#8988&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation of move assignment operator for situations when
                one of the variant template classes has nothrow copy constructor
                and throwing move constructor &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8772&quot;&gt;#8772&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix compilation on exception-disabled environments &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8717&quot;&gt;#8717&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix unreachable code warnings &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8665&quot;&gt;#8665&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed duplicate code &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7601&quot;&gt;#7601&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8843&quot;&gt;#8843&lt;/a&gt; throw instead of assert at incomplete charset
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8880&quot;&gt;#8880&lt;/a&gt; remove unused local typedef
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8882&quot;&gt;#8882&lt;/a&gt; use RAII instead of try/catch in sequence_stack.hpp
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8474&quot;&gt;#8474&lt;/a&gt; make xpressive play nice with clang's -Wimplicit-fallthrough
                diagnostic
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/tools/quickbook&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Quickbook 1.6 finalized, see the &lt;a href=&quot;http://www.boost.org/doc/html/quickbook/versions.html#language_versions.1_6&quot;&gt;Quickbook
                documentation for details&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.3, 3.2, 3.1, 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11, libc++: 3.4, 3.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8.1, 4.7.3, 4.6.3, 4.5.3, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.8.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.8.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 5.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 5.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 11.0, 10.0, 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 5.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 5.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.3, 3.2, 3.1, 3.0, trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11, libc++: 3.4, 3.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.9.0 (experimental), 4.8.1, 4.7.3, 4.6.4, 4.5.3, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.8.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.8.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 13.0.1, 12.1.6
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 11.0, 10.0, 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Old compilers</title><link>http://www.boost.org/users/news/old_compilers.html</link><guid>http://www.boost.org/users/news/old_compilers.html</guid><pubDate>Mon, 5 Aug 2013 21:00:07 BST</pubDate><description>


  &lt;p&gt;
    I just sent an email to user list asking if anyone is using old compilers, I'll
    repeat it here:
  &lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;
      Hello all,
    &lt;/p&gt;
    &lt;p&gt;
      There has been some discussion on the development list about dropping all support
      for old C++ compilers. This will allow us to remove a lot of workarounds and
      simplify the code but before doing so it's a good idea to find out if anyone
      is still using them. Using boost with these compilers will cause a compile
      error in the config library (you can work round that using a custom configuration,
      but it's unlikely you'll be able to get much to work). The currently proposed
      versions for removing support are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;
          Digital Mars 8.40 and earlier
        &lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;
          Visual C++ 7.0 and earlier
        &lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;
          GCC 3.2 and earlier
        &lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;
          Intel C++ 5.0 and earlier
        &lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Which is, I think, a very cautious list. There's also a good chance that we
      might want to remove support for Borland C++ 5.x. Is there anyone still using
      those compilers?
    &lt;/p&gt;
    &lt;p&gt;
      Just to be clear, this doesn't mean we'll be fully supporting all compilers
      later than these. Old compilers such as Visual C++ 7.1 and gcc 3.4 won't have
      a config error and we won't deliberately remove support, but support will be
      patchy. Many libraries (especially new ones) don't support those compilers,
      and we also don't have any formal testing for them, so if a new change breaks
      something, it might not be noticed.
    &lt;/p&gt;
    &lt;p&gt;
      If you are still using compilers which are a little more recent than the ones
      listed above, it might still be worth mentioning in case we consider removing
      support for them in the future.
    &lt;/p&gt;
    &lt;p&gt;
      Thanks in advance for any response,
    &lt;/p&gt;
    &lt;p&gt;
      Daniel James
    &lt;/p&gt;
  &lt;/blockquote&gt;
  &lt;p&gt;
    &lt;strong&gt;Update:&lt;/strong&gt; I had a few responses, but none were
    opposed to this change, so I made it in trunk a little while ago. It should be
    included in the next release.
  &lt;/p&gt;
  &lt;p&gt;
    There was some concern that we would remove support for later compilers (e.g.
    Visual Studio 2008, aka. Visual C++ 9.0). We have no such plans, this change
    is only for very old compilers. As always support across Boost libraries is not
    uniform, but most library authors do try to support as wide a range of compilers
    as is feasible.
  &lt;/p&gt;
</description></item><item><title>Version 1.54.0</title><link>http://www.boost.org/users/history/version_1_54_0.html</link><guid>http://www.boost.org/users/history/version_1_54_0.html</guid><pubDate>Mon, 1 Jul 2013 10:10:02 -0700</pubDate><description>



  &lt;div id=&quot;version_1_54_0.patches&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Patches&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      These are patches from library authors which were found too late to be fixed
      in the 1.54.0 release. Be careful as they have not been through the normal
      testing process.
    &lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/001-coroutine.patch&quot;&gt;Coroutine patch&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/002-date-time.patch&quot;&gt;Date Time patch&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/003-log.patch&quot;&gt;Log patch&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/004-thread.patch&quot;&gt;Thread patch&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.news&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;News&lt;/span&gt;&lt;/h3&gt;
    &lt;div id=&quot;version_1_54_0.news.supported_cpus&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported CPUs&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        Boost no longer supports the 80386 target CPU, the minimum x86 32-bit target
        is i486. The 80386 target was not properly supported by &lt;a href=&quot;http://www.boost.org/libs/smart_ptr/&quot;&gt;Boost.SmartPtr&lt;/a&gt;
        and &lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Boost.Atomic&lt;/a&gt; (as well as the libraries
        that used them internally) even before this release. Some Boost libraries
        may have higher requirements on the minimum target CPU (like &lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Boost.Log&lt;/a&gt;
        for example), see the respective library documentation for details.
      &lt;/p&gt;
      &lt;p&gt;
        Also by default, when building Boost for x86 32-bit targets it will compile
        for i686 (Pentium Pro) and later CPUs. This can be changed by specifying
        the &lt;tt&gt;instruction-set&lt;/tt&gt; property in &lt;tt&gt;b2&lt;/tt&gt;
        or &lt;tt&gt;bjam&lt;/tt&gt; command line, for example:
      &lt;/p&gt;
&lt;pre&gt;b2 variant=release architecture=x86 instruction-set=i486 stage
&lt;/pre&gt;
      &lt;p&gt;
        Possible values for the &lt;tt&gt;instruction-set&lt;/tt&gt; are:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            Target for the host CPU: &lt;tt&gt;native&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Generic x86 CPUs: &lt;tt&gt;i486&lt;/tt&gt;, &lt;tt&gt;i586&lt;/tt&gt;,
            &lt;tt&gt;i686&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Intel CPUs: &lt;tt&gt;pentium&lt;/tt&gt;, &lt;tt&gt;pentium-mmx&lt;/tt&gt;,
            &lt;tt&gt;pentiumpro&lt;/tt&gt;, &lt;tt&gt;pentium2&lt;/tt&gt;, &lt;tt&gt;pentium3&lt;/tt&gt;,
            &lt;tt&gt;pentium3m&lt;/tt&gt;, &lt;tt&gt;pentium-m&lt;/tt&gt;, &lt;tt&gt;pentium4&lt;/tt&gt;,
            &lt;tt&gt;pentium4m&lt;/tt&gt;, &lt;tt&gt;prescott&lt;/tt&gt;, &lt;tt&gt;nocona&lt;/tt&gt;,
            &lt;tt&gt;core2&lt;/tt&gt;, &lt;tt&gt;corei7&lt;/tt&gt;, &lt;tt&gt;corei7-avx&lt;/tt&gt;,
            &lt;tt&gt;core-avx-i&lt;/tt&gt;, &lt;tt&gt;conroe&lt;/tt&gt;, &lt;tt&gt;conroe-xe&lt;/tt&gt;,
            &lt;tt&gt;conroe-l&lt;/tt&gt;, &lt;tt&gt;allendale&lt;/tt&gt;, &lt;tt&gt;merom&lt;/tt&gt;,
            &lt;tt&gt;merom-xe&lt;/tt&gt;, &lt;tt&gt;kentsfield&lt;/tt&gt;, &lt;tt&gt;kentsfield-xe&lt;/tt&gt;,
            &lt;tt&gt;penryn&lt;/tt&gt;, &lt;tt&gt;wolfdale&lt;/tt&gt;, &lt;tt&gt;yorksfield&lt;/tt&gt;,
            &lt;tt&gt;nehalem&lt;/tt&gt;, &lt;tt&gt;sandy-bridge&lt;/tt&gt;, &lt;tt&gt;ivy-bridge&lt;/tt&gt;,
            &lt;tt&gt;haswell&lt;/tt&gt;, &lt;tt&gt;atom&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            AMD CPUs: &lt;tt&gt;k6&lt;/tt&gt;, &lt;tt&gt;k6-2&lt;/tt&gt;, &lt;tt&gt;k6-3&lt;/tt&gt;,
            &lt;tt&gt;athlon&lt;/tt&gt;, &lt;tt&gt;athlon-tbird&lt;/tt&gt;, &lt;tt&gt;athlon-4&lt;/tt&gt;,
            &lt;tt&gt;athlon-xp&lt;/tt&gt;, &lt;tt&gt;athlon-mp&lt;/tt&gt;, &lt;tt&gt;k8&lt;/tt&gt;,
            &lt;tt&gt;opteron&lt;/tt&gt;, &lt;tt&gt;athlon64&lt;/tt&gt;, &lt;tt&gt;athlon-fx&lt;/tt&gt;,
            &lt;tt&gt;k8-sse3&lt;/tt&gt;, &lt;tt&gt;opteron-sse3&lt;/tt&gt;, &lt;tt&gt;athlon64-sse3&lt;/tt&gt;,
            &lt;tt&gt;amdfam10&lt;/tt&gt;, &lt;tt&gt;barcelona&lt;/tt&gt;, &lt;tt&gt;bdver1&lt;/tt&gt;,
            &lt;tt&gt;bdver2&lt;/tt&gt;, &lt;tt&gt;bdver3&lt;/tt&gt;, &lt;tt&gt;btver1&lt;/tt&gt;,
            &lt;tt&gt;btver2&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            VIA CPUs: &lt;tt&gt;c3&lt;/tt&gt;, &lt;tt&gt;c3-2&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            IDT CPUs: &lt;tt&gt;winchip-c6&lt;/tt&gt;, &lt;tt&gt;winchip2&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
        Note that not all these values may be supported by a particular compiler.
      &lt;/p&gt;
    &lt;/div&gt;
    &lt;div id=&quot;version_1_54_0.news.signals_deprecated&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Signals deprecated&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        Boost.Signals is no longer being actively maintained, so it has been deprecated.
        Do not use Boost.Signals for new development (use &lt;a href=&quot;http://www.boost.org/libs/signals2/&quot;&gt;Boost.Signals2&lt;/a&gt;
        instead). If you have existing Boost.Signals-based code, it will continue
        to work, but consider moving to Boost.Signals2. There is &lt;a href=&quot;http://www.boost.org/doc/html/signals2/api_changes.html#signals2.porting&quot;&gt;a
        porting guide&lt;/a&gt; in the Signals2 documentation.
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
  Logging library, from Andrey
          Semashev.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/tti/&quot;&gt;TTI&lt;/a&gt;:&lt;/span&gt;
  Type Traits Introspection library,
          from Edward Diener.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_erasure/&quot;&gt;Type Erasure&lt;/a&gt;:&lt;/span&gt;
  Runtime polymorphism
          based on concepts.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes comment typos (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7917&quot;&gt;#7917&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Silence unused variable warnings (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6926&quot;&gt;#6926&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The return types for copy_while and copy_until have been changed.
                This is an interface change. If you were using the return values
                from these functions, then you will have to modify your code. Instead
                of just returning the modified &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;OutputIterator&lt;/span&gt;&lt;/code&gt;,
                these functions now return a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;InputIterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;OutputIterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;. If this change affects your
                code, the simplest change is to add a &lt;code&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;second&lt;/span&gt;&lt;/code&gt; to the end of the call,
                which will get you the same behavior that you had before.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++14 versions of 'is_permutation', 'equal' and 'mismatch'.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++11 features support &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6999&quot;&gt;#6999&lt;/a&gt;:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Move assignment and move constructors.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                      modifiers.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new traits classes, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;handler_type&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_result&lt;/span&gt;&lt;/code&gt;,
                that allow the customisation of the return type of an initiating
                function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                function, a high-level wrapper for running stackful coroutines, based
                on the Boost.Coroutine library. The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function enables programs to implement
                asynchronous logic in a synchronous manner. For example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;
                &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_some&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_buffer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;/code&gt; special value, which
                provides first-class support for returning a C++11 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;/code&gt; from an asynchronous operation's
                initiating function. For example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;
                &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_some&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_buffer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Promoted the stackless coroutine class and macros to be part of Asio's
                documented interface, rather than part of the HTTP server 4 example.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a new handler hook called &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio_handler_is_continuation&lt;/span&gt;&lt;/code&gt;.
                Asynchronous operations may represent a continuation of the asynchronous
                control flow associated with the current executing handler. The
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio_handler_is_continuation&lt;/span&gt;&lt;/code&gt;
                hook can be customised to return &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/code&gt;
                if this is the case, and Asio's implementation can use this knowledge
                to optimise scheduling of the new handler. To cover common cases,
                Asio customises the hook for strands, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and composed asynchronous operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added four new generic protocol classes, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;datagram_protocol&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;raw_protocol&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;seq_packet_protocol&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;/code&gt;, which implement
                the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Protocol&lt;/span&gt;&lt;/code&gt; type
                requirements, but allow the user to specify the address family (e.g.
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;AF_INET&lt;/span&gt;&lt;/code&gt;) and protocol
                type (e.g. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;/code&gt;)
                at runtime.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++11 move constructors that allow the conversion of a socket
                (or acceptor) into a more generic type. For example, an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; can be converted into a
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; via move construction.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Extended the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_socket_acceptor&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; class's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_accept&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; functions to allow a new connection
                to be accepted directly into a socket of a more generic type. For
                example, an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;acceptor&lt;/span&gt;&lt;/code&gt; can be used to accept
                into a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; object.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Moved existing examples into a C++03-specific directory, and added
                a new directory for C++11-specific examples. A limited subset of
                the C++03 examples have been converted to their C++11 equivalents.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various SSL enhancements. Thanks go to Nick Jones, on whose work
                these changes are based.
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for SSL handshakes with re-use of data already
                      read from the wire. New overloads of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; class's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;handshake&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_handshake&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; functions have been added.
                      These accept a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConstBufferSequence&lt;/span&gt;&lt;/code&gt;
                      to be used as initial input to the ssl engine for the handshake
                      procedure.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for creation of TLSv1.1 and TLSv1.2 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; objects.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;set_verify_depth&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                      classes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added the ability to load SSL certificate and key data from
                      memory buffers. New functions, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;add_certificate_authority&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_certificate&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_certificate_chain&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_private_key&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_rsa_private_key&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_tmp_dh&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, have been added to the
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt;
                      to automatically disable SSL compression by default. To enable,
                      use the new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;clear_options&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function, as in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;my_context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;clear_options&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;no_compression&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a potential deadlock in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal_set&lt;/span&gt;&lt;/code&gt;
                implementation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an error in acceptor example in documentation &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8421&quot;&gt;#8421&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed copy-paste errors in waitable timer documentation &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8602&quot;&gt;#8602&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added assertions to satisfy some code analysis tools &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7739&quot;&gt;#7739&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a malformed &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#warning&lt;/span&gt;&lt;/code&gt;
                directive &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7939&quot;&gt;#7939&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a potential data race in the Linux &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll&lt;/span&gt;&lt;/code&gt;
                implementation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a Windows-specific bug, where certain operations might generate
                an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt; with
                an invalid (i.e. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;NULL&lt;/span&gt;&lt;/code&gt;)
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_category&lt;/span&gt;&lt;/code&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8613&quot;&gt;#8613&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_waitable_timer&lt;/span&gt;&lt;/code&gt;'s
                underlying implementation so that it can handle any &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;time_point&lt;/span&gt;&lt;/code&gt; value without overflowing
                the intermediate duration objects.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a problem with lost thread wakeups that can occur when making
                concurrent calls to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; on the same &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                object &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8354&quot;&gt;#8354&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed implementation of asynchronous connect operation so that it
                can cope with spurious readiness notifications from the reactor &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7961&quot;&gt;#7961&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8079&quot;&gt;#8079&lt;/a&gt;
                      Chrono memory leak
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8318&quot;&gt;#8318&lt;/a&gt;
                      BOOST_FORCEINLINE constructors of time_point and duration
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8367&quot;&gt;#8367&lt;/a&gt;
                      chrono does not compile with clang from XCode 4.5.2 with -std=c++11
                      -stdlib=libc++ and -arch armv7
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8370&quot;&gt;#8370&lt;/a&gt;
                      typo in chrono reference
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8435&quot;&gt;#8435&lt;/a&gt;
                      Can't compile Chrono on HP-UX due to no CLOCK_REALTIME macro.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8032&quot;&gt;#8032&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added experimental &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;static_vector&lt;/span&gt;&lt;/code&gt;
                class, based on Andrew Hundt's and Adam Wulkiewicz's high-performance
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;varray&lt;/span&gt;&lt;/code&gt; class.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Speed improvements in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;
                constructors/copy/move/swap, dispatching to memcpy when possible.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7227&quot;&gt;#7227&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7921&quot;&gt;#7921&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7969&quot;&gt;#7969&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8118&quot;&gt;#8118&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8294&quot;&gt;#8294&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8553&quot;&gt;#8553&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for SPARC architecture added.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for segmented stacks (stack grows on demand) added.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7805&quot;&gt;#7805&lt;/a&gt;
                Typo
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7972&quot;&gt;#7972&lt;/a&gt;
                GCC warnings
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7988&quot;&gt;#7988&lt;/a&gt;
                C++11 range-for
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8023&quot;&gt;#8023&lt;/a&gt;
                Using iterator traits
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8024&quot;&gt;#8024&lt;/a&gt;
                Create const_iterator
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8101&quot;&gt;#8101&lt;/a&gt;
                Postfix operator++ for iterator
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8526&quot;&gt;#8526&lt;/a&gt;
                memory leak
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8544&quot;&gt;#8544&lt;/a&gt;
                calling managed DLL
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      added Spatial Index, developed for Boost.Geometry by Adam Wulkiewicz.
                      The spatial index was originally started by Federico J. Fernandez
                      during the Google Summer of Code 2008 program, mentored by
                      Hartmut Kaiser.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      added SVG-output, this was already in extensions for several
                      years
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Documentation&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      small fixes of missing words
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      collinear opposite segments did sometimes (in circles) have
                      a robustness issue, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixed insertion of false intersection point (found by buffer)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      applied patch of Vladimir Petrovic for debugging traversals
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7462&quot;&gt;7462&lt;/a&gt;
                      degenerate union result for float, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7465&quot;&gt;7465&lt;/a&gt;
                      wrong construtors access type in scale_transformer class, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7802&quot;&gt;7802&lt;/a&gt;
                      cart_intersect.hpp unused parameter warnings, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8254&quot;&gt;8254&lt;/a&gt;
                      faulty intersection, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8393&quot;&gt;8393&lt;/a&gt;
                      polygon model doesn't adhere to stated Polygon concept rules,
                      doc updated.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8403&quot;&gt;8403&lt;/a&gt;
                      silenced compiler warning C4127: conditional expression is
                      constant
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8405&quot;&gt;8405&lt;/a&gt;
                      silenced compiler warning C4189: '...' : local variable is
                      initialized but not referenced
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Internal changes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Made several algorithms variant-aware (append, area, clear,
                      convert, equals, length, num_points)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6780&quot;&gt;#6780&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7016&quot;&gt;#7016&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7155&quot;&gt;#7155&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7845&quot;&gt;#7845&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7863&quot;&gt;#7863&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7877&quot;&gt;#7877&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8166&quot;&gt;#8166&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8192&quot;&gt;#8192&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8398&quot;&gt;#8398&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8411&quot;&gt;#8411&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8427&quot;&gt;#8427&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8428&quot;&gt;#8428&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8434&quot;&gt;#8434&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8490&quot;&gt;#8490&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8681&quot;&gt;#8681&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added updates to VF2 subgraph isomorphism from Jakob Lykke Andersen
                and Flavio De Lorenzi.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added maximum adjacency search from Fernando Vilas.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added timeout support from Brammert Ottens to resource-constrained
                shortest paths (r_c_shortest_paths) algorithm.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various fixes to documentation and examples and removal of outdated
                compiler workarounds.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for platform-specific flags to mapped_region (ticket
                #8030)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7484&quot;&gt;#7484&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7598&quot;&gt;#7598&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7682&quot;&gt;#7682&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7923&quot;&gt;#7923&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7924&quot;&gt;#7924&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7928&quot;&gt;#7928&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7936&quot;&gt;#7936&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8521&quot;&gt;#8521&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8595&quot;&gt;#8595&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;ABI breaking&lt;/strong&gt;: Changed bootstamp
                function in Windows to use EventLog service start time as system
                bootup time. Previously used &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;LastBootupTime&lt;/span&gt;&lt;/code&gt;
                from WMI was unstable with time synchronization and hibernation and
                unusable in practice. If you really need to obtain pre Boost 1.54
                behaviour define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_BOOTSTAMP_IS_LASTBOOTUPTIME&lt;/span&gt;&lt;/code&gt;
                from command line or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;workaround&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
                support (bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7849&quot;&gt;#7849&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iostreams/&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tee&lt;/span&gt;&lt;/code&gt; now works correctly
                for std::streams (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8315&quot;&gt;#8315&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8385&quot;&gt;#8385&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8460&quot;&gt;#8460&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid warning from Clang's &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wimplicit&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fallthrough&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8482&quot;&gt;#8482&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Converting to character pointer now triggers compile time assert
                instead of runtime &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8334&quot;&gt;#8334&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Lexical cast is now capable of converting &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;int128_type&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;uint128_type&lt;/span&gt;&lt;/code&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7909&quot;&gt;#7909&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed internal stream buffer handling, now works with libc++ &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8267&quot;&gt;#8267&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7704&quot;&gt;#7704&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restored getting address of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;/code&gt;
                function that was broken in 1.53.0 &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7421&quot;&gt;#7421&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed warnings, internals and tests &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2558&quot;&gt;#2558&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7949&quot;&gt;#7949&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8162&quot;&gt;#8162&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8369&quot;&gt;#8369&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8547&quot;&gt;#8547&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Major reorganization to incorporate other Boost.Math like Integer
                Utilities (Greatest Common Divisor and Least Common Multiple), quaternions
                and octonions. Making new chapter headings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added many references to Boost.Multiprecision and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_dec_float_50&lt;/span&gt;&lt;/code&gt;
                as an example of a User-defined Type (UDT).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Clang to list of supported compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed constants to use a thread-safe cache of computed values when
                used at arbitrary precision.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added finding zeros of Bessel functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cyl_bessel_j_zero&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cyl_neumann_zero&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;airy_ai_zeros&lt;/span&gt;&lt;/code&gt; and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;airy_bi_zeros&lt;/span&gt;&lt;/code&gt;(by
                Christopher Kormanyos).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                More accuracy improvements to the Bessel J and Y functions from Rocco
                Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed nasty cyclic dependency bug that caused some headers to not
                compile &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7999&quot;&gt;#7999&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in __tgamma that caused spurious overflow for arguments
                between 142.5 and 143.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in raise_rounding_error that caused it to return an incorrect
                result when throwing an exception is turned off &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7905&quot;&gt;#7905&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added minimal __float128 support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in edge-cases of poisson quantile &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8308&quot;&gt;#8308&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Adjusted heuristics used in Halley iteration to cope with inverting
                the incomplete beta in tricky regions where the derivative is flatlining.
                Example is computing the quantile of the Fisher F distribution for
                probabilities smaller than machine epsilon. See ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8314&quot;&gt;#8314&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: Exit points broken for the favor_compile_time policy.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: copy breaks exit points of subsubmachines.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8046&quot;&gt;#8046&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7969&quot;&gt;#7969&lt;/a&gt;),
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8231&quot;&gt;#8231&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change&lt;/strong&gt; renamed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rational_adapter&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rational_adaptor&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for &lt;a href=&quot;http://perso.ens-lyon.fr/nathalie.revol/software.html&quot;&gt;MPFI&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add logged_adaptor.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for 128-bit floats via GCC's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__float128&lt;/span&gt;&lt;/code&gt;
                or Intel's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_Quad&lt;/span&gt;&lt;/code&gt;
                data types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for user-defined literals in cpp_int, improve &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;constexpr&lt;/span&gt;&lt;/code&gt; support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in integer division of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                that results in incorrect sign of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                when both arguments are small enough to fit in a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;double_limb_type&lt;/span&gt;&lt;/code&gt;.
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8126&quot;&gt;8126&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in subtraction of a single limb in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                that results in incorrect value when the result should have a 0 in
                the last limb: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8133&quot;&gt;8133&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                where division of 0 by something doesn't get zero in the result:
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8160&quot;&gt;8160&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in some transcendental functions that caused incorrect
                return values when variables are reused, for example with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8326&quot;&gt;8326&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updates and fixes to the Voronoi documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8026&quot;&gt;#8026&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8197&quot;&gt;#8197&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8257&quot;&gt;#8257&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_map/&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compose_property_map&lt;/span&gt;&lt;/code&gt;
                from Guillaume Pinot.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/range/&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bug fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6944&quot;&gt;#6944&lt;/a&gt; Some Range concepts use the incorrect Iterator concept
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7407&quot;&gt;#7407&lt;/a&gt; istream_range does not compile with wcin
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7408&quot;&gt;#7408&lt;/a&gt; istream_range should not pull istream
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7731&quot;&gt;#7731&lt;/a&gt; irange doesn't end iteration properly when step_size
                      is 3 or more
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7827&quot;&gt;#7827&lt;/a&gt; [range] cant compile r | indexed to range algorithm
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8338&quot;&gt;#8338&lt;/a&gt; Iterator range does not work with pointer to array
                      as iterator
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8453&quot;&gt;#8453&lt;/a&gt; Incorrect configuration macro BOOST_NO_PARTIAL_TEMPLATE_SPECIALIZATION
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/signals/&quot;&gt;Signals&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                No longer actively maintained, so it is deprecated. Use &lt;a href=&quot;http://www.boost.org/libs/signals2&quot;&gt;Signals2&lt;/a&gt;
                for new development.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7285&quot;&gt;#7285&lt;/a&gt;
                      C++11 compliance: Allow to pass movable arguments for call_once.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7445&quot;&gt;#7445&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;.then
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7449&quot;&gt;#7449&lt;/a&gt;
                      Synchro: Add a synchronized value class
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4878&quot;&gt;#4878&lt;/a&gt;
                      MinGW 4.5.0 undefined reference to bool interruptible_wait(detail::win32::handle
                      handle_to_wait_for,detail::t imeout target_time).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4882&quot;&gt;#4882&lt;/a&gt;
                      Win32 shared_mutex does not handle timeouts correctly.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5752&quot;&gt;#5752&lt;/a&gt;
                      boost::call_once() is unreliable on some platforms
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6652&quot;&gt;#6652&lt;/a&gt;
                      Boost.Thread shared_mutex.hpp:50:99: warning: dereferencing
                      type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6843&quot;&gt;#6843&lt;/a&gt;
                      [Intel C++] Compile Errors with '#include &amp;lt;atomic&amp;gt;'
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6966&quot;&gt;#6966&lt;/a&gt;
                      future boost::future_category inconsistent dll linkage
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7720&quot;&gt;#7720&lt;/a&gt;
                      exception lock_error while intensive locking/unlocking of mutex
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7755&quot;&gt;#7755&lt;/a&gt;
                      Thread: deadlock with shared_mutex on Windows
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7980&quot;&gt;#7980&lt;/a&gt;
                      Build error: msvc-11.0 and BOOST_THREAD_DONT_USE_DATETIME
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7982&quot;&gt;#7982&lt;/a&gt;
                      pthread_delay_np() parm compile error on AIX
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8027&quot;&gt;#8027&lt;/a&gt;
                      thread library fails to compile with Visual Studio 2003
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8070&quot;&gt;#8070&lt;/a&gt;
                      prefer GetTickCount64 over GetTickCount
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8136&quot;&gt;#8136&lt;/a&gt;
                      boost::this_thread::sleep_for() sleeps longer than it should
                      in Windows
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8212&quot;&gt;#8212&lt;/a&gt;
                      Boost thread compilation error on Solaris 10
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8237&quot;&gt;#8237&lt;/a&gt;
                      fix documentation for 'thread_group'
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8239&quot;&gt;#8239&lt;/a&gt;
                      barrier::wait() not marked as interruption_point
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8323&quot;&gt;#8323&lt;/a&gt;
                      boost::thread::try_join_for/try_join_until may block indefinitely
                      due to a combination of problems in Boost.Thread and Boost.Chrono
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8337&quot;&gt;#8337&lt;/a&gt;
                      The internal representation of &amp;quot;std::string(this-&amp;gt;code()-&amp;gt;message())&amp;quot;
                      escapes, but is destroyed when it exits scope.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8371&quot;&gt;#8371&lt;/a&gt;
                      C++11 once_flag enabled when constexpr is not available
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8443&quot;&gt;#8443&lt;/a&gt;
                      Header file inclusion order may cause crashes
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8451&quot;&gt;#8451&lt;/a&gt;
                      Missing documented function 'boost::scoped_thread::joinable'
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8530&quot;&gt;#8530&lt;/a&gt;
                      [Coverity] Unused variable thread_handle, uninitialized variable
                      cond_mutex in thread/pthread/thread_data.hpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8596&quot;&gt;#8596&lt;/a&gt;
                      With C++0x enabled, boost::packaged_task stores a reference
                      to function objects, instead of a copy.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New type traits implemented &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8189&quot;&gt;#8189&lt;/a&gt;:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      is_nothrow_move_constructible
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      is_nothrow_move_assignable
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      has_trivial_move_assign
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      has_trivial_move_constructor
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/ublas&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6511&quot;&gt;#6511&lt;/a&gt; Division by scalar should use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;enable_if&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7297&quot;&gt;#7297&lt;/a&gt; Make the free functions 'num_columns' and 'num_rows' support
                the uBLAS traits system and better work with expression types
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6010&quot;&gt;#6010&lt;/a&gt; fixed linkage problems in assignment.hpp
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                updated doc
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some very basic &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                support.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_string_ref&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8067&quot;&gt;#8067&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;string_ref&lt;/span&gt;&lt;/code&gt;'s
                logical operators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Update noncopyable for C++11 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6578&quot;&gt;#6578&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix noncopyable compiler warning when used in DLL interface (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6935&quot;&gt;#6935&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;/code&gt; with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt;
                on SolarisStudio compiler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7079&quot;&gt;#7079&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disable annoying MSVC warning about operator comma (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7663&quot;&gt;#7663&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Now uses new type traits from Boost.TypeTrait to detect &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt; constructors and assignment
                operators &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8296&quot;&gt;#8296&lt;/a&gt;. This shall increase performance of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;variant&lt;/span&gt;&lt;/code&gt; for many types in C++11.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multivisitation implemented &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8459&quot;&gt;#8459&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation updated to reflect C++11 features support.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove unused variables, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8039&quot;&gt;#8039&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid name clash with macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;None&lt;/span&gt;&lt;/code&gt;
                in glx.h, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8204&quot;&gt;#8204&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Silence a gcc warning, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8138&quot;&gt;#8138&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98 mode: 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.7.2, 4.7.3, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11 mode: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.2, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2, from Subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, with libc++: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.2, 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98 mode: 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.7.3, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11 mode: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from Subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from Subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.2, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 9.0, 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: 12.1.0.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.53.0</title><link>http://www.boost.org/users/history/version_1_53_0.html</link><guid>http://www.boost.org/users/history/version_1_53_0.html</guid><pubDate>Mon, 4 Feb 2013 10:29:19 -0800</pubDate><description>



  &lt;div id=&quot;version_1_53_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
  C++11-style &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
          from Helge Bahmann, maintained by Tim Blechmann.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
  Coroutine library,
          from Oliver Kowalke.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lockfree/&quot;&gt;Lockfree&lt;/a&gt;:&lt;/span&gt;
  Lockfree data structures,
          from Tim Blechmann.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
  Extended
          precision arithmetic types for floating point, integer and rational arithmetic
          from John Maddock and Christopher Kormanyos.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/odeint/&quot;&gt;Odeint&lt;/a&gt;:&lt;/span&gt;
  Solving ordinary
          differential equations, from Karsten Ahnert and Mario Mulansky.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.news&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;News&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      This release contains a fix for ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7743&quot;&gt;#7743&lt;/a&gt;, in Boost.Locale. For more
      details, see the &lt;a href=&quot;http://www.boost.org/users/news/boost_locale_security_notice.html&quot;&gt;security
      notice&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed non-ASCII char in comment (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7781&quot;&gt;#7781&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the Knuth-Morris-Pratt docs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7656&quot;&gt;#7656&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/array/&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for boost::get and std::get (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7652&quot;&gt;#7652&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some 64-to-32-bit conversion warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7459&quot;&gt;#7459&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some small errors in documentation and comments (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7761&quot;&gt;#7761&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an error in the example embedded in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_option&lt;/span&gt;&lt;/code&gt;'s
                documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7562&quot;&gt;#7562&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&lt;/code&gt;
                rather than &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/code&gt; for
                SSL_CTX options, to match OpenSSL (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7209&quot;&gt;#7209&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_snwprintf&lt;/span&gt;&lt;/code&gt;
                to address a compile error due to the changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swprintf&lt;/span&gt;&lt;/code&gt;
                signature in recent versions of MinGW (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7373&quot;&gt;#7373&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a deadlock that can occur on Windows when shutting down a pool
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt; threads
                due to running out of work (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7552&quot;&gt;#7552&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                qualifier for error categories (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7797&quot;&gt;#7797&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed UNIX domain socket example to treat errors from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;accept&lt;/span&gt;&lt;/code&gt; as non-fatal (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7488&quot;&gt;#7488&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a small block recycling optimisation to improve default memory
                allocation behaviour.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/bimap/&quot;&gt;Bimap&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Refactor map_view_iterator to improve error messages.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed replace_(left/right/key/data) bug when using relations with
                info.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed vector_of and list_of views &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; bug.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed vector_of views &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; functions return value.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The chrono i/o version included in Boost.Chrono 1.2.x has been
                      completly refactored in version 2.0.0
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The manipulators __duration_short, __duration_long
                      are depreceated. You should use the parameterized form __duration_fmt
                      or the renamed manipulators __duration_symbol and __duration_prefix
                      instead.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The __duration_punct&amp;lt;&amp;gt; facet is depreceated.
                      You should use the __get_duration_style free function to get
                      the informations and use the __duration_units facet for localization
                      purposes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      When BOOST_CHRONO_VERSION==2 the preceding deprecated functions
                      are not available.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7546&quot;&gt;#7546&lt;/a&gt;
                      time_point&amp;lt;system_clock&amp;gt; output version 2 fails to compile
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7547&quot;&gt;#7547&lt;/a&gt;
                      time_point&amp;lt;system_clock&amp;gt; input version 2 fails to compile
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7868&quot;&gt;#7868&lt;/a&gt;
                      chrono_io parses time incorrectly (1.53 and 1.52)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7650&quot;&gt;#7650&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;'s
                insertion performance.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed again experimental multiallocation interface for better performance
                (still experimental).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added no exception support for those willing to disable exceptions
                in their compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed GCC -Wshadow warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for iOS on ARM and MacOS X on x86 (32bit) added.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for SEH Overwrite Protection on Win32.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      avoid generating output polygons with interior rings below
                      minimum size (e.g. one or two points)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;disjoint&lt;/span&gt;&lt;/code&gt; for degenerate segments
                      (patched by Karsten Ahnert)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      problem in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;difference&lt;/span&gt;&lt;/code&gt;
                      for missing handling tangency, reported by H2
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;for_each&lt;/span&gt;&lt;/code&gt;
                      for use with Lambda's
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;comparable_distance&lt;/span&gt;&lt;/code&gt;
                      point-linestring (and -range, -polygon)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      combinations for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;disjoint&lt;/span&gt;&lt;/code&gt;:
                      point/ring, point/polygon, point/multi_polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      combinations for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intersects&lt;/span&gt;&lt;/code&gt;:
                      point/ring, point/polygon, point/multi_polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Internal changes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      updates in specializations/not_implemented for various algorithms
                      (as in an earlier version, these changes are still going on;
                      they take care for simplified structs, better error reporting,
                      and automatized documentation)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixes in unit tests
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/gil/&quot;&gt;GIL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed self-assignment warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4919&quot;&gt;#4919&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed the following bugs from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3468&quot;&gt;#3468&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4386&quot;&gt;#4386&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5269&quot;&gt;#5269&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7428&quot;&gt;#7428&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7457&quot;&gt;#7457&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7467&quot;&gt;#7467&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7600&quot;&gt;#7600&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7648&quot;&gt;#7648&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7684&quot;&gt;#7684&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7728&quot;&gt;#7728&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7741&quot;&gt;#7741&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7766&quot;&gt;#7766&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7771&quot;&gt;#7771&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7773&quot;&gt;#7773&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7780&quot;&gt;#7780&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7787&quot;&gt;#7787&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7801&quot;&gt;#7801&lt;/a&gt;
    plus other bugs not in Trac.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for reading from GraphML files containing multiple
                graphs.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added versions of A* search specifically for trees, removing the
                need for a color map when it is acceptable to visit the same vertex
                multiple times.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added VF2 subgraph isomorphism algorithm (contributed by Flavio De
                Lorenzi).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;int128_type&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;uint128_type&lt;/span&gt;&lt;/code&gt; where available.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On platforms that are known to have standard floating point functions,
                don't use the automatic detection (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7221&quot;&gt;#7221&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7470&quot;&gt;#7470&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed GCC -Wshadow warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Experimental multiple allocation interface improved and changed again.
                Still unstable.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;ABI breaking&lt;/em&gt;: changed node pool
                allocators internals for improved efficiency.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7795&quot;&gt;#7795&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7174&quot;&gt;#7174&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7529&quot;&gt;#7529&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7815&quot;&gt;#7815&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed GCC -Wshadow warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt;&lt;/code&gt;
                keyword in several intrusive container constructors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Small documentation fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New character type detection algorithm for user defined types &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6786&quot;&gt;#6786&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation updates (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7582&quot;&gt;#7582&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7831&quot;&gt;#7831&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs with std::array &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7799&quot;&gt;#7799&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with -ftrapv and numeric to numeric conversions
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7814&quot;&gt;#7814&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/locale/&quot;&gt;Locale&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Security related bug fix, some invalid UTF-8 sequences where accepted
                as valid &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7743&quot;&gt;#7743&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Invalid Windows codepage names used &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7386&quot;&gt;#7386&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed missing documentation, caused by a error in Doxygen formatting
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7734&quot;&gt;#7734&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed missing std:: in some places &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7701&quot;&gt;#7701&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Spelling, grammar, typos fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7368&quot;&gt;#7368&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7762&quot;&gt;#7762&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7325&quot;&gt;#7325&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7415&quot;&gt;#7415&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7416&quot;&gt;#7416&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7183&quot;&gt;#7183&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7649&quot;&gt;#7649&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7694&quot;&gt;#7694&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4445&quot;&gt;#4445&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7492&quot;&gt;#7492&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed mistake in calculating pooled standard deviation in two-sample
                students t example &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7402&quot;&gt;#7402&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve complex acos/asin/atan, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7290&quot;&gt;#7290&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7291&quot;&gt;#7291&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve accuracy in some corner cases of cyl_bessel_j and gamma_p/gamma_q
                thanks to suggestions from Rocco Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve accuracy in Bessel J and Y with integer orders thanks to
                suggestions from Rocco Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/minmax/&quot;&gt;MinMax&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a misuse of the comma operator (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7752&quot;&gt;#7752&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the docs to fix broken link (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7751&quot;&gt;#7751&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better header segregation (bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6524&quot;&gt;#6524&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Small documentation fixes
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7830&quot;&gt;#7830&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7832&quot;&gt;#7832&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6366&quot;&gt;#6366&lt;/a&gt; Bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;contains&lt;/span&gt;&lt;/code&gt;
                      for polygon_90 type.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7678&quot;&gt;#7678&lt;/a&gt; multiple definitions of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;
                      &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;belongs&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(...)&lt;/span&gt;&lt;/code&gt;
                      by multiple &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Internal changes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      refactored point/segment/interval data/concept/traits.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      added unit tests for point and interval data/concept/traits.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      simplified &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      to operate only in 2D.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      removed point_3d data/concept/traits.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/random/&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Now compiles with exceptions disabled (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5399&quot;&gt;#5399&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/range/&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bug fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5603&quot;&gt;#5603&lt;/a&gt; the &amp;quot;range/any_range.hpp&amp;quot; header is not
                      self-sufficient
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6103&quot;&gt;#6103&lt;/a&gt; boost::range_detail vs. boost::range::range_detail
                      compiler error
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Documentation fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5160&quot;&gt;#5160&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5314&quot;&gt;#5314&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5440&quot;&gt;#5440&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5775&quot;&gt;#5775&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6212&quot;&gt;#6212&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7585&quot;&gt;#7585&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7843&quot;&gt;#7843&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7916&quot;&gt;#7916&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7926&quot;&gt;#7926&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7616&quot;&gt;#7616&lt;/a&gt;
                      br_mul::nan - warning C4293: '&amp;lt;&amp;lt;' : shift count negative
                      or too big, undefined behavior`.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
   Fixed Issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7744&quot;&gt;#7744&lt;/a&gt;,
          &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7644&quot;&gt;#7644&lt;/a&gt;.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/&quot;&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Glen Fernandes provided implementations of make_shared and
                      allocate_shared for arrays. They achieve a single allocation
                      for an array that can be initialized with constructor arguments
                      or initializer lists as well as overloads for default initialization
                      and no value initialization. See the '&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/make_shared_array.html&quot;&gt;make_shared
                      and allocate_shared for arrays&lt;/a&gt;' page for more information.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;
                      can now be used to hold a pointer to a dynamically allocated
                      array. This is accomplished by using an array type (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt;
                      or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;)
                      as the template parameter.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Smart pointers now use &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt;
                      &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt;
                      on C++11 compilers. This can break code that passes a smart
                      pointer to a function taking a &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt;,
                      or that returns a smart pointer from a function with a &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; return type. Please use
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;!=&lt;/span&gt;
                      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span class=&quot;special&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;p&lt;/span&gt;&lt;/code&gt; in such cases.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/string&quot;&gt;StringAlgo&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug where it wouldn't find overlapping patterns (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7784&quot;&gt;#7784&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disambiguated some calls to insert (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7346&quot;&gt;#7346&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Deprecated features since boost 1.53 will be available only
                      until boost 1.58.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      C++11 compliance: packaged_task&amp;lt;R&amp;gt; is deprecated, use
                      instead packaged_task&amp;lt;R()&amp;gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7537&quot;&gt;#7537&lt;/a&gt;
                      deprecate Mutex::scoped_lock and scoped_try_lock and boost::condition
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6270&quot;&gt;#6270&lt;/a&gt;
                      C++11 compliance: Add thread constructor from movable callable
                      and movable arguments
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7279&quot;&gt;#7279&lt;/a&gt;
                      C++11 compliance: Add noexcept in system related functions
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7280&quot;&gt;#7280&lt;/a&gt;
                      C++11 compliance: Add promise::...at_thread_exit functions
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7281&quot;&gt;#7281&lt;/a&gt;
                      C++11 compliance: Add ArgTypes to packaged_task template.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7282&quot;&gt;#7282&lt;/a&gt;
                      C++11 compliance: Add packaged_task::make_ready_at_thread_exit
                      function
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7412&quot;&gt;#7412&lt;/a&gt;
                      C++11 compliance: Add async from movable callable and movable
                      arguments
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7413&quot;&gt;#7413&lt;/a&gt;
                      C++11 compliance: Add async when the launch policy is deferred.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7414&quot;&gt;#7414&lt;/a&gt;
                      C++11 compliance: future::get post-condition should be valid()==false.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7422&quot;&gt;#7422&lt;/a&gt;
                      Provide a condition variable with zero-overhead performance
                      penality.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7444&quot;&gt;#7444&lt;/a&gt;
                      Async: Add make_future/make_shared_future.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7540&quot;&gt;#7540&lt;/a&gt;
                      Threads: Add a helper class that join a thread on destruction.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7541&quot;&gt;#7541&lt;/a&gt;
                      Threads: Add a thread wrapper class that joins on destruction.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7575&quot;&gt;#7575&lt;/a&gt;
                      C++11 compliance: A future created by async should &amp;quot;join&amp;quot;
                      in the destructor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7587&quot;&gt;#7587&lt;/a&gt;
                      Synchro: Add strict_lock and nested_strict_lock.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7588&quot;&gt;#7588&lt;/a&gt;
                      Synchro: Split the locks.hpp in several files to limit dependencies.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7590&quot;&gt;#7590&lt;/a&gt;
                      Synchro: Add lockable concept checkers based on Boost.ConceptCheck.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7591&quot;&gt;#7591&lt;/a&gt;
                      Add lockable traits that can be used with enable_if.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7592&quot;&gt;#7592&lt;/a&gt;
                      Synchro: Add a null_mutex that is a no-op and that is a model
                      of UpgardeLockable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7593&quot;&gt;#7593&lt;/a&gt;
                      Synchro: Add a externally_locked class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7590&quot;&gt;#7594&lt;/a&gt;
                      Threads: Allow to disable thread interruptions.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7464&quot;&gt;#7464&lt;/a&gt;
                      BOOST_TEST(n_alive == 1); fails due to race condition in a
                      regression test tool.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7657&quot;&gt;#7657&lt;/a&gt;
                      Serious performance and memory consumption hit if condition_variable
                      methods condition notify_one or notify_all is used repeatedly.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7665&quot;&gt;#7665&lt;/a&gt;
                      this_thread::sleep_for no longer uses steady_clock in thread.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7668&quot;&gt;#7668&lt;/a&gt;
                      thread_group::join_all() should check whether its threads are
                      joinable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7669&quot;&gt;#7669&lt;/a&gt;
                      thread_group::join_all() should catch resource_deadlock_would_occur.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7671&quot;&gt;#7671&lt;/a&gt;
                      Error including boost/thread.hpp header on iOS.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7672&quot;&gt;#7672&lt;/a&gt;
                      lockable_traits.hpp syntax error: &amp;quot;defined&amp;quot; token
                      misspelled.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7798&quot;&gt;#7798&lt;/a&gt;
                      boost::future set_wait_callback thread safety issues.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7808&quot;&gt;#7808&lt;/a&gt;
                      Incorrect description of effects for this_thread::sleep_for
                      and this_thread::sleep_until.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7812&quot;&gt;#7812&lt;/a&gt;
                      Returns: cv_status::no_timeout if the call is returning because
                      the time period specified by rel_time has elapsed, cv_status::timeout
                      otherwise.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7874&quot;&gt;#7874&lt;/a&gt;
                      compile warning: thread.hpp:342: warning: type attributes are
                      honored only at type definition.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7875&quot;&gt;#7875&lt;/a&gt;
                      BOOST_THREAD_THROW_IF_PRECONDITION_NOT_SATISFIED should not
                      be enabled by default.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7882&quot;&gt;#7882&lt;/a&gt;
                      wrong exception text from condition_variable::wait(unique_lock&amp;lt;mutex&amp;gt;&amp;amp;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7890&quot;&gt;#7890&lt;/a&gt;
                      thread::do_try_join_until() is missing a return type.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove support for the old pre-standard variadic pair constructors,
                and equality implementation. Both have been deprecated since Boost
                1.48.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                More internal implementation changes, including a much simpler implementation
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;/code&gt;, and removed
                more deprecated config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;a href=&quot;http://www.boost.org/libs/utility/doc/html/string_ref.html&quot;&gt;string_ref&lt;/a&gt;,
                a non-owning reference to a contiguous sequence of characters.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added rvalue constructors and rvalue assignment operators (for C++11
                compatible compilers only). Library now can be used with move-only
                types (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7620&quot;&gt;#7620&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7718&quot;&gt;#7718&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Accomodate recent smart pointer changes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7809&quot;&gt;#7809&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/tools/build/index.html&quot;&gt;Boost Build System&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Qt5 toolset
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                improved rcc support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7576&quot;&gt;#7576&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.1.2, 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang: 2.8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang, with libc++: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cray: 4.6.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang, with libc++: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.1, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.9
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++11 mode: 13.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age:
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: V12.1.0.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item>
  </channel>
</rss>
