[article Version 1.56.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose 
        New libraries: Align, TypeIndex.
        New modules from existing code:
            Assert, Core, Lexical_Cast, Throw_Exception.
        Updated libraries: 
            Any, Assign, Atomic, Circular Buffer, Concept Check,
            Context, Coroutine, Dynamic Bitset, Chrono, Flyweight,
            Log, Math, MultiArray, Multi-index Containers,
            Multiprecision, Optional, Predef, Program Options, Regex,
            Smart Pointers, Thread, Utility, UUID, Variant.
        Deprecated Libraries: TR1

    ]
    [authors [Clow, Marshall]]
    [/ last-revision is used for the final release data]
    [last-revision ]
]

[import ext.qbk]

[status beta]
[download http://sourceforge.net/projects/boost/files/boost/1.56.0.beta.1/]
[documentation /doc/libs/1_56_0_beta1/]

[section Modularization]

Boost version control has migrated to a system using git submodules.
This shouldn't make too much of a difference to users, although the
directory structure is now a bit different.

Parts of some libraries have been moved into different modules, and several
new modules have been extracted from existing code.
All header paths should remain the same. The new modules are:

* [phrase library..[@/libs/assert/ Assert]:]
  Customizable assert macros. Maintained by Peter Dimov.
* [phrase library..[@/libs/core/ Core]:]
  Core utilities used by other libraries, with minimal dependencies. Maintained by Peter Dimov, Glen Fernandes and Andrey Semashev.
* [phrase library..[@/libs/lexical_cast/ Lexical_Cast]:]
  General literal text conversions, such as an int represented a string, or vice-versa, from Kevlin Henney.
* [phrase library..[@/libs/throw_exception/ Throw_Exception]:]
  A common infrastructure for throwing exceptions from Boost libraries, from Emil Dotchevski.
* [phrase library..Winapi:]
  Windows API declarations without <windows.h>, for internal Boost use.


[endsect]

[section New Libraries]

* [phrase library..[@/libs/align/ Align]:]
  Memory alignment functions, allocators, and adaptors, from Glen Fernandes.
* [phrase library..[@/libs/type_index/ Type_Index]:]
  Runtime/Compile time copyable type info, from Antony Polukhin.

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/any/ Any]:]
  * Fixed rvalue references related issues ([ticket 9215], [ticket 9462]).
  * Dropped support of antique compilers.

* [phrase library..[@/libs/assign/ Assign]:]
  * Resolve some C++11 ambiguities ([ticket 3073]).

* [phrase library..[@/libs/atomic/ Atomic]:]
  * The library has been redesigned. Besides internal refactoring, various bugs were fixed, including incorrect values of feature test macros and integer overflow handling.
  * Changed values of the `memory_order` enumeration. The concrete values are not part of the interface, but this change may potentially break ABI, if the enum is used in user's interfaces.
  * Implemented support for 128-bit atomic operations on Windows x64 with MSVC. The library assumes presence of the `cmpxchg16b` instruction in the target CPUs. Some early AMD CPUs don't support this instruction. To target those define the `BOOST_ATOMIC_NO_CMPXCHG16B` macro.
  * Implemented experimental support for Windows ARM target with MSVC.
  * Implemented experimental support for DEC Alpha target with GCC.
  * Improved support for ARMv6 and later with GCC. Implemented all atomic operations as assembler blocks instead of CAS-based loops. 64-bit operations are supported with ARMv7.
  * Implemented optional support for the `BOOST_ATOMIC_FLAG_INIT` macro and static initialization of `atomic_flag`. ([ticket 8158])
  * Fixed compilation for SPARCv9 target. ([ticket 9446])
  * Fixed compilation for PowerPC target. ([ticket 9447])
  * Fixed several compatibility problems with Clang on x86 and x86-64. ([ticket 9610], [ticket 9842])
  * Removed specialized code for Windows on IA64 platform.

* [phrase library..[@/libs/circular_buffer/ Circular Buffer]:]
  * [ticket 9970],[ticket 9334] Support for the C++11 allocator model.
  * Dropped support of antique compilers.

* [phrase library..[@/libs/concept_check/ Concept Check]:]
  * Fewer warnings (includes [ticket 5012]).
  
* [phrase library..[@/libs/context/ Context]:]
  * fcontext_t is opaque pointer to context-data
  * changed signature of make_fcontext()
  * [ticket 8826] no executable stack
  * [ticket 9437] catch exceptions on iOS and Windows Phone 8
  * [ticket 9445] support for x32 ABIs
  * [ticket 9522] support for powerpc_64le
  * [ticket 9743] bugfix for powerpc_64 le/be
  * [ticket 9774] bugfix for x86 on Mac OS X + clang

* [phrase library..[@/libs/coroutine/ Coroutine]:]
  * support of symmetric coroutines
  * [ticket 9355] fix race condition in protected_stack_allocator
  * [ticket 9551] list of supported architectures
  * [ticket 9734] wrong check of mmap() return value
  * [ticket 9735] no memset() for protected_stack_allocator
  * [ticket 9760] coroutine iterator need const operator==
  * [ticket 10070] mmap() return value
  * [ticket 10157] file descriptor not required in protected_stack_allocator

* [phrase library..[@/libs/dynamic_bitset/ Dynamic Bitset]:]
  * Support for C++11 move constructors
  * Warning fixes on MSVC 2013
  * Support for C++11 minimal allocators
  * Add noexcept specifications

* [phrase library..[@/libs/chrono/ Chrono]:]
  * [@http://svn.boost.org/trac/boost/ticket/6918 #6918] Boost Chrono compilation failure on HP uX due to undefined pthread_getcpuclockid
  * [@http://svn.boost.org/trac/boost/ticket/8006 #8006] Boost::Chrono Assertion at startup - steady_clock::now() - Windows
  * [@http://svn.boost.org/trac/boost/ticket/9337 #9337] chrono::process_cpu_clock time points wrong by factor 1000 on Linux
  * [@http://svn.boost.org/trac/boost/ticket/9342 #9342] Regression on process_cpu_clock::timepoint io on V2
  * [@http://svn.boost.org/trac/boost/ticket/9419 #9419] boost::chrono::floor()/round() and negative durations is wrong
  * [@http://svn.boost.org/trac/boost/ticket/9698 #9698] boost::chrono::thread_clock not declared in OSX
  * [@http://svn.boost.org/trac/boost/ticket/9720 #9720] boost::this_thread::sleep_for() sometimes returns immediately on win32
  * [@http://svn.boost.org/trac/boost/ticket/9859 #9859] Remove references to gcc-mingw
  * [@http://svn.boost.org/trac/boost/ticket/9918 #9918] chrono compilation error on Solaris, funciton timegm
  * [@http://svn.boost.org/trac/boost/ticket/9811 #9811] boost/boost/chrono/duration.hpp:355:56: error: call to non-constexpr function 'static std::numeric_limits<float>::_Ty std::numeric_limits<float>::max()' /home/zosun/input_service/inputservices-core-service/other/boost/boost/chrono/duration.hpp: In static member function 'static constexpr double boost::chrono::detail::chrono_numeric_limits<double, true>::lowest()':
  * [@http://svn.boost.org/trac/boost/ticket/10069 #10069] Overflow in chrono clocks on 32bit
  * [@http://svn.boost.org/trac/boost/ticket/10151 #10151] timegm function not available on QNX


* [phrase library..[@/libs/flyweight/index.html Flyweight]:]
  * In compilers with variadic template support, `boost::flyweight<T>` now provides a perfectly forwarding
    constructor to `T::T` (previously an emulation was used).
  * `flyweight` now replicates the initializer-list constructors and assignment operators of its underlying type.
  * Fixed intermodule static initialization problem (ticket [ticket 9553]).
  * Maintenance fixes.

* [phrase library..[@/libs/lexical_cast/ Lexical Cast]:]
  * Added the `try_lexical_convert` function, that retuns `false` in case of failed conversion and
    does not require output parameter to be Default Constructable ([ticket 6700]).
  * Fixed conversion of string values with leading zeroes to `bool` ([ticket 9659]).
  * Code was changed to produce a smaller binaries and simplify compiler's work ([ticket 9046]).
  * Boost.LexicalCast library was separated from the Boost.Conversion library.
  * Fixed some warnings ([ticket 8991]).

* [phrase library..[@/libs/log/index.html Log]:]
  * General changes:
    * For Windows targets, the library now compiles for Windows XP by default.
    * Added indexing operators with `attribute_name` arguments to `record` and `record_view`.
    * Added operators for non-const object output to `basic_formatting_ostream`. ([ticket 9389])
    * Added support for putting function names and source file names of named scopes into the formatted strings. ([ticket 9263])
    * Added support for incomplete and empty markers to the named scope formatter. ([ticket 9123])
    * The default presentation for incomplete named scope lists has changed: trailing scope delimiter is omitted.
    * Added a support header for `std::regex`.
    * By default Boost.Log uses Boost.Regex internally as the regular expressions backend. The backend can be changed by defining configuration macros.
  * Bug fixes:
    * Fixed `dump` manipulator output on AVX2-enabled CPUs (e.g. Intel Haswell).
    * Fixed compilation of `get_attribute` method of loggers.
    * Fixed a possible race in `locked_backend()` function implementation of synchronous and asynchronous sink frontends.
    * Fixed a possible infinite block of the logging threads in the asynchronous sink enqueue methods when `block_on_overflow` strategy was used.
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.

* [phrase library..[@/libs/math/index.html Math]:]
  * Fix Geometric distribution use of Policies, see [@https://svn.boost.org/trac/boost/ticket/9833 #9833].
  * Fix corner cases in the negative binomial distribution, see [@https://svn.boost.org/trac/boost/ticket/9834 #9834].
  * Fix compilation failures on Mac OS.
  * Added bernoulli_numbers, changed arbitrary precision tgamma/lgamma to use Sterling's approximation (from Nikhar Agrawal).
  * Added first derivatives of the Bessel functions: cyl_bessel_j_prime, cyl_neumann_prime, cyl_bessel_i_prime, cyl_bessel_k_prime, sph_bessel_prime and sph_neumann_prime (from Anton Bikineev).
  * Fixed buggy Student's t example code, along with docs for testing sample means for equivalence.
  * Documented `max_iter` parameter in root finding code better, see [@https://svn.boost.org/trac/boost/ticket/9225 #9225].
  * Add option to explicitly enable/disable use of __float128 in constants code, see [@https://svn.boost.org/trac/boost/ticket/9240 #9240].
  * Cleaned up handling of negative values in Bessel I0 and I1 code (removed dead code), see [@https://svn.boost.org/trac/boost/ticket/9512 #9512].
  * Fixed handling of very small values passed to tgamma and lgamma so they don't generate spurious overflows (thanks to Rocco Romeo).
  * [@https://svn.boost.org/trac/boost/ticket/9672 #9672 PDF and CDF of a Laplace distribution throwing domain_error] Random variate can now be infinite.
  * Fixed several corner cases in rising_factorial, falling_factorial and tgamma_delta_ratio with thanks to Rocco Romeo.
  * Removed constant `pow23_four_minus_pi ` whose value did not match the name (and was unused by Boost.Math), see [@https://svn.boost.org/trac/boost/ticket/9712 #9712].

* [phrase library..[@/libs/multi_array/index.html MultiArray]:]
  * [ticket 5664] operator() checks for Collection concept but requires RandomAccessCollection
  * [ticket 4874] compile errors using Visual C++ 2010 in debug mode
  * [ticket 3581] MultiArray storage order example incorrect for fortran_storage_ordering
  * [ticket 4032] Move MultiArray concepts out of detail namespace
  * [ticket 9212] Broken links to C++ standard papers
  * [ticket 8368] GCC -Wundef warning about BOOST_MULTI_ARRAY_NO_GENERATORS in multi_array

    
* [phrase library..[@/libs/multi_index/index.html Multi-index Containers]:]
  * The `erase(iterator)` member function of hashed indices used to have poor performance under low load
    conditions due to the requirement that an iterator to the next element must be returned
    (see ticket [ticket 4264]). In accordance with the resolution of
    [@http://lwg.github.io/issues/lwg-closed.html#579 LWG issue #579], this problem has been fixed
    while maintaining the interface of `erase`, at the expense of using one more word of memory per element.
    In fact, C++ complexity requirements on unordered associative containers have been improved for hashed
    indices so that
    [itemized_list
      [deletion of a given element is unconditionally constant-time,]
      [worst-case performance is not `O(n)` but
      '''<code>O(n<subscript>dist</subscript>)</code>''', where
      '''<code>n<subscript>dist</subscript></code>''' is the number of
      non-equivalent elements in the index.]
    ]
    Due to the fact that hashed indices rely on a new data structure, the internal representation of their
    iterators and local iterators have changed, which affects serialization: their corresponding serialization
    [@/libs/serialization/doc/tutorial.html#versioning class version] has been bumped from 0 to 1. Old archives
    involving hashed index (local) iterators can be loaded by Boost 1.56 version of Boost.MultiIndex, but not
    the other way around. 
  * Hashed indices now provide `reserve`.
  * Hashed indices can now be checked for equality and inequality following the (suitably adapted) C++ standard
    specification in [*\[unord.req\]].
  * The public interface of Boost.MultiIndex provide `noexcept` specifications where appropriate (for compliant
    compilers).
  * Improved performance of failed insertions into a `multi_index_container`.
  * Much internal code aimed at supporting MSVC++ 7.0 and prior has been removed. Compilation times without this
    legacy code might be slightly faster.
  * Fixed a bug with insertion via iterators dereferencing to rvalues (ticket [ticket 9665]).
  * Made Boost.MultiIndex compatible with `BOOST_BIND_NO_PLACEHOLDERS` (ticket [ticket 9798]). 
  * Maintenance fixes.
  
* [phrase library..[@/libs/multiprecision/ Multiprecision]:]
  * Added new cpp_bin_float backend for binary floating point.
  * Fix bug in assignment from string in cpp_int, see [@https://svn.boost.org/trac/boost/ticket/9936 9936].
  * Added MSVC-specific #include for compiler intrinsics, see [@https://svn.boost.org/trac/boost/ticket/9336 9336].
  * Fixed various typos in docs, see [@https://svn.boost.org/trac/boost/ticket/9432 9432].
  * Fixed gmp_rational to allow move-copy from an already copied-from object, see [@https://svn.boost.org/trac/boost/ticket/9497 9497].
  * Added list of values for numeric_limits.

* [phrase library..[@/libs/optional/ Optional]:]
  * Added support for rvalue references. Now `optional<T>` works with moveable but non-copyable `T`'s.
  * Improved `swap` (now uses move operations).
  * Added function `emplace()`. This is the last of the requests from [ticket 1841].
  * `optional` is moveable, including conditional `noexcept` specifications, which make it `move_if_noexcept`-friendly.
  * Using explicit operator bool() on platforms that support it ([ticket 4227]) (breaking change).
  * Forward declaration of `operator<<(ostream&, optional const&)` to prevent inadvertent incorrect serialization of optional objects.
  * Removed depprecated function `reset()` from examples ([ticket 9005]).
  * Equality comparison with `boost::none` does not require that `T` be EqualityComparable.
  * Optional rvalue references are explicitly disallowed.
  * Binding temporaries to optional references is explicitly disallowed (breaking change).
  * More ways to access the contained value, functions `value()`, `value_or()`, `value_or_eval()`.
  * Updated and reorganized documentation, added tutorial and quick guide sections.

* [phrase library..[@/libs/predef/ Predef]:]
  * Addition of `BOOST_PLAT_*` platform definitions for MinGW and
    Windows platform variants.
  * Detection of ARM architecture for Windows compilers to target
    mobile devices of Windows 8.
  * Improved ARM detection for 64 bit ARM.
  * Added detection of iOS as an operating system.
  * Improved detection of endianess on some platforms.
  * Addition of exclusive plus emulated definitions for platform
    and compiler detection.
  
* [phrase library..[@/libs/program_options/ Program Options]:]
  * Columns in the `--help` output are now aligned across all option groups ([ticket 6114]).
  * Option names with dashes are no longer truncated in error messages ([ticket 8009]).

* [phrase library..[@/libs/regex/index.html Regex]:]
  * [*Breaking change:] corrected behavior of `basic_regex<>::mark_count()` to match existing documentation, `basic_regex<>::subexpression(n)` changed to match, see [@https://svn.boost.org/trac/boost/ticket/9227 #9227]
  * Fixed issue [@https://svn.boost.org/trac/boost/ticket/8903 #8903].
  * Fixed documentation typos from [@https://svn.boost.org/trac/boost/ticket/9283 #9283].
  * Fixed bug in collation code that failed if the locale generated collation strings with embedded nul's, see [@https://svn.boost.org/trac/boost/ticket/9451 #9451].
  * Apply patch for unusual thread usage (no statically initiallized mutexes), see [@https://svn.boost.org/trac/boost/ticket/9461 #9461].
  * Added better checks for invalid UTF-8 sequences, see [@https://svn.boost.org/trac/boost/ticket/9473 #9473].

* [phrase library..[@/libs/smart_ptr/ Smart Pointers]:]
  * Updated the overloads of [@/libs/smart_ptr/make_shared_array.html make_shared]
    and [@/libs/smart_ptr/make_shared_array.html allocate_shared] of array types (`T[]` or 
    `T[N]`) to conform to the specification in C++ standard paper
    [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3939.html N3939] and
    significantly reduced the spatial overhead of the internal bookkeeping structures.
  * Updated the implementations of make_shared and
    allocate_shared for scalar types and array types, respectively, to resolve C++ standard
    library defect report [@http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2070 #2070].

* [phrase library..[@/libs/thread/ Thread]:]
  * ['New Experimental Features:]
    * [@http://svn.boost.org/trac/boost/ticket/7446 #7446] Async: Add when_any.
    * [@http://svn.boost.org/trac/boost/ticket/7447 #7447] Async: Add when_all.
    * [@http://svn.boost.org/trac/boost/ticket/7448 #7448] Async: Add async taking a scheduler parameter.
    * [@http://svn.boost.org/trac/boost/ticket/8274 #8274] Synchro: Add concurrent queue
    * [@http://svn.boost.org/trac/boost/ticket/8513 #8513] Async: Add a basic thread_pool executor.
    * [@http://svn.boost.org/trac/boost/ticket/8518 #8518] Synchro: Add a latch class.
    * [@http://svn.boost.org/trac/boost/ticket/8516 #8516] Async: Add future/shared_future::then taking a scheduler as parameter.
    * [@http://svn.boost.org/trac/boost/ticket/9058 #9058] with_lock_guard function
    * [@http://svn.boost.org/trac/boost/ticket/9571 #9571] Add a dynamic executor and an executor adaptor

  * ['Fixed Bugs:]
    * [@http://svn.boost.org/trac/boost/ticket/8070 #8070] prefer GetTickCount64 over GetTickCount
    * [@http://svn.boost.org/trac/boost/ticket/9333 #9333] ex_scoped_thread compile fails on msvc-12.0
    * [@http://svn.boost.org/trac/boost/ticket/9341 #9341] 	compile error scoped_thread(move semantics) intel-linux-14.0.1
    * [@http://svn.boost.org/trac/boost/ticket/9366 #9366] async(Executor, ...) fails to compile with msvc-10,11,12 	
    * [@http://svn.boost.org/trac/boost/ticket/9402 #9402] test_excutor regression on msvc-10,11,12
    * [@http://svn.boost.org/trac/boost/ticket/9404 #9404] ex_make_future regression error
    * [@http://svn.boost.org/trac/boost/ticket/9471 #9471] Synchronization documentation nits
    * [@http://svn.boost.org/trac/boost/ticket/9535 #9535] Missing exception safety might result in crash
    * [@http://svn.boost.org/trac/boost/ticket/9618 #9618] try_join_for problem: program is not terminate.
    * [@http://svn.boost.org/trac/boost/ticket/9625 #9625] Please rewrite boost::thread::~thread() reference section
    * [@http://svn.boost.org/trac/boost/ticket/9632 #9632] public method start_thread in boost::thread class
    * [@http://svn.boost.org/trac/boost/ticket/9673 #9673] thread compilation with MingW/gcc on Windows gives errors
    * [@http://svn.boost.org/trac/boost/ticket/9708 #9708] boost::condition_variable::timed_wait unexpectedly wakes up while should wait infinite
    * [@http://svn.boost.org/trac/boost/ticket/9711 #9711] future continuation called twice
    * [@http://svn.boost.org/trac/boost/ticket/9867 #9867] Remove references to gcc-mingw
    * [@http://svn.boost.org/trac/boost/ticket/10008 #10008] Boost Synchronization documentation typos (futures)
    * [@http://svn.boost.org/trac/boost/ticket/10058 #10058] Null pointer access in once
    * [@http://svn.boost.org/trac/boost/ticket/10125 #10125] call_once: compile errors in variadic version with rvalue reference emulation
    * [@http://svn.boost.org/trac/boost/ticket/10126 #10126] call_once: deprecate (Function, once_flag&) overload
    * [@http://svn.boost.org/trac/boost/ticket/10147 #10147] pthread_delay_np() parameters different on AIX even with gcc
    * [@http://svn.boost.org/trac/boost/ticket/10155 #10155] thread::physical_concurrency() always returns 0 on PowerPC
    * [@http://svn.boost.org/trac/boost/ticket/10184 #10184] Future: multiply defined symbols

* [phrase library..[@/libs/tr1/index.html TR1]:]
  * This library is now deprecated.

* [phrase library..[@/libs/utility/index.html Utility]:]
  * Some components were moved to the new Boost.Core library.
  * `empty_deleter` is deprecated in favor of `null_deleter` from Boost.Core. `empty_deleter` is an alias for `null_deleter`, it will be removed in future releases.
  * `base_from_member` utility now supports lvalue reference member types. ([ticket 7577])

* [phrase library..[@/libs/uuid/index.html UUID]:]
  * Added basic support for C++11 features.
  * Implemented SSE-optimized versions of some functions of `uuid`, including comparison operators and `swap`. The support for different versions of SSE is automatically detected at compile time for most compilers, but can also be explicitly enabled or disabled with [@/libs/uuid/uuid.html#Configuration configuration macros]. ([ticket 8509])
  * Silenced some compiler warnings. ([ticket 8495], [ticket 8697])

* [phrase library..[@/libs/variant/ Variant]:]
  * [*Breaking change:] Variant now uses variadic templates if they are supported by compiler.
    This leads to smaller binaries and better compilation times but in some cases may break metaprogramming functions,
    especially if [@/libs/variant/doc/html/variant/BOOST_VARIANT_ENUM_PARAMS.html BOOST_VARIANT_ENUM_PARAMS] and
    [@/libs/variant/doc/html/variant/BOOST_VARIANT_ENUM_SHIFTED_PARAMS.html BOOST_VARIANT_ENUM_SHIFTED_PARAMS] are not used.
    Usage of variadic templates
    [@/libs/variant/doc/html/variant/BOOST_VARIANT_DO_NOT_USE_VARIADIC_TEMPLATES.html may be disabled].
  * [@/libs/variant/doc/html/variant/reference.html#header.boost.variant.polymorphic_get_hpp Added]
    `polymorphic_get` function [ticket 9479].
  * Move-only classes now can be returned by visitors.
  * Optimized variant::swap() and fixed ambiguity in `move_swap` [ticket 2839].
  * Added conditional noexcepts to move assignments, default and move
    constructors making `boost::variant` `move_if_noexcept`-friendly ([ticket 7911]).
  * Exceptions are now visible across modules even with -fvisibility=hidden flags.
  * Dropped support of antique compilers.
  * Fixed some warnings ([ticket 3020]).

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang: 3.4, 3.3, 3.2, 3.1, 3.0
  * Clang, C++98: 3.3.16
  * Clang, C++11, libc++: 3.4.2
  * Clang, C++1y: 3.3.16
  * GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7
  * GCC, C++98: 4.9.0
  * GCC, C++11: 4.8.2
  * GCC, C++1y: 4.9.0
  * Intel: 13.1
* OS X:
  * Apple Clang: 5.1
  * Apple Clang, C++11: 5.1
  * GCC: 4.2.1
  * Intel: 12.0
* Windows:
  * GCC, mingw: 4.9.0, 4.8.2, 4.7.3, 4.7.2, 4.6.3, 4.5.4, 4.4.7
  * Visual C++: 12.0, 11.0, 10.0, 9.0
* FreeBSD:
  * GCC: 4.2.1
* QNX:
  * QCC: 4.4.2

Boost's additional test compilers include:

* Linux:
  * Clang: 3.4, 3.3, 3.2, 3.1, 3.0
  * Clang, C++98: 3.3.16
  * Clang, C++11, libc++: 3.4.2
  * Clang, C++1y: 3.3.16
  * Clang, C++14, libc++: trunk
  * GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7
  * GCC, C++98: 4.9.0
  * GCC, C++11: 4.9.0, 4.8.2
  * GCC, C++1y: 4.9.0
  * Intel: 13.1, 13.0, 12.1, 11.1
* OS X:
  * Apple Clang: 5.1
  * Apple Clang, C++11:
  * Clang: trunk
  * Clang, C++11: trunk
  * GCC: 4.2.1
  * Intel: 12.0
* Windows:
  * GCC, mingw: 4.9.0, 4.8.2, 4.7.2, 4.6.3, 4.5.4, 4.4.7
  * Visual C++: 12.0, 11.0, 10.0, 9.0
* FreeBSD:
  * GCC: 4.2.1
* QNX:
  * QCC, ARM: 4.4.2
  * QCC, x86: 4.4.2

[endsect]

[section Acknowledgements]

[@/users/people/beman_dawes.html Beman Dawes],
Eric Niebler,
[@/users/people/rene_rivera.html Rene Rivera],
Daniel James, Vladimir Prus and Marshall Clow
managed this release.

[endsect]

[/
For Beta release:

[status beta]
[download http://sourceforge.net/projects/boost/files/boost/1.56.0.beta.1/]
[documentation /doc/libs/1_56_0_beta1/]

Add libraries to 'purpose field'.

For final release:

[status released]
[download http://sourceforge.net/projects/boost/files/boost/1.56.0/]
[documentation /doc/libs/1_56_0/]

Fill in 'authors' field, and date (I normally just copy the date from
the email requesting that I update the site).

Remove this comment.
]
