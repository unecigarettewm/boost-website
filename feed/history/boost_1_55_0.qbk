[article Version 1.55.0
    [quickbook 1.5]
    [source-mode c++]
    [purpose
        New Libraries: Predef.
        Updated Libraries: Context, Coroutine, Graph, Log, MultiIndex, PropertyMap, Wave.
    ]
    [authors [Dawes, Beman]]
    [last-revision $Date: $]
]

[include ext.qbk]

[/

As the release progresses add the 'status' and 'download' elements to
indicate the release status:

Beta status:
[status beta]
[download http://sourceforge.net/projects/boost/files/boost/1.55.0.beta.x/]
[documentation /doc/libs/1_55_0_betax/]

Release status:
[status released]
[download http://sourceforge.net/projects/boost/files/boost/1.55.0/]
[documentation /doc/libs/1_55.0/]

]

[/
    When adding libraries:

    1. Libraries are listed in alphabetical order.
    2. Besides the dedicated entry, the lib name should be added to the
       [purpose] section at the beginning of the page.

    Example new libraries message:

* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.

    Example update message:

* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Fixed missing move semantics on managed memory classes.
  * Added copy_on_write and open_read_only options for shared memory
    and mapped file managed classes.
  * `shared_ptr` is movable and supports aliasing.
]

[section New Libraries]

* [phrase library..[@/libs/predef/ Predef]:] This library defines a set of
  compiler, architecture, operating system, library, and other version numbers
  from the information it can gather of C, C++, Objective C, and Objective C++
  predefined macros or those defined in generally available headers, from Rene
  Rivera.

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/context/ Context]:]
  * [@http://svn.boost.org/trac/boost/ticket/8650 #8650] SSE2 intrinsics

* [phrase library..[@/libs/coroutine/ Coroutine]:]
  * New interface (unidirectional data transfer).
  * [@http://svn.boost.org/trac/boost/ticket/8782 #8782] no best alternative
  * [@http://svn.boost.org/trac/boost/ticket/8801 #8801] auto-linking

* [phrase library..[@/libs/graph/index.html Graph]:]
  * `void` is no longer allowed as a bundled property type (for example, in the
    VertexProperties template parameters to graph types); it did not work
    reliably before, but a static assertion now forbids it entirely.  Use
    `boost::no_property` instead.
  * Added support for `finish_edge` visitor event point in depth-first search;
    the change should be backward-compatible with visitors that do not have
    that member function.
  * Disabled building of tests on Sun compiler.
  * Multiple source vertices are supported in non-named-parameter versions of
    `breadth_first_visit`, `breadth_first_search`, `dijkstra_shortest_paths`,
    and `dijkstra_shortest_paths_no_init`.  This feature is not yet documented;
    to use it, replace the single parameter for the source vertex in each of
    these functions by two input iterators of the same type containing the
    source vertices to use.
  * Added Hawick circuits algorithm; contributed by Louis Dionne.
  * Added edge coloring algorithm; contributed by Maciej Piechotka.
  * Added min-cost max-flow algorithm; contributed by Piotr Wygocki.
  * Bugs and feature requests from Trac fixed: [ticket 5269], [ticket 8317],
    [ticket 8433], [ticket 8791], [ticket 8877], [ticket 8986], [ticket 9012],
    [ticket 9080].

* [phrase library..[@/libs/log/ Log]:]
  * General changes:
    * Added a new configuration macro `BOOST_LOG_WITHOUT_DEFAULT_FACTORIES`. By defining this macro the user can disable compilation of the default filter and formatter factories used by settings parsers. This can substantially reduce binary sizes while still retaining support for settings parsers.
    * Rewritten some of the parsers to reduce the compiled binary size. The rewritten parsers are more robust in detecting ambiguous and incorrect input.
    * The following headers are deprecated and moved to other libraries: `boost/log/utility/intrusive_ref_counter.hpp`, `boost/log/utility/explicit_operator_bool.hpp`, `boost/log/utility/empty_deleter.hpp`. These headers will be removed in future releases.
  * Bug fixes:
    * Fixed `timer` attribute generating incorrect time readings on Windows on heavy thread contention when `QueryPerformanceCounter` API was used.
    * Fixed a bug in the filter parser that prevented using parsed filters with some attributes.
    * Fixed thread id formatting discrepancies between the default sink and formatters.
    * Closed tickets: [ticket 8815], [ticket 8819], [ticket 8915], [ticket 8917], [ticket 9139], [ticket 9140], [ticket 9153], [ticket 9155].
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.

* [phrase library..[@/libs/multi_index/index.html Multi-index Containers]:]
  * Boost.MultiIndex has been brought to a higher level of compliance with C++11. 
    * `multi_index_container` is now efficiently movable.
    * Initializer lists supported.
    * Emplace functions provided.
    * Non-copyable elements (such as `std::unique_ptr<T>`) supported. This includes
      insertion of a range [`first`,`last`) where the iterators point to a type that
      is convertible to that of the element: no copy construction happens in the
      process.
    * Random access indices provide `shrink_to_fit()`.
    Refer to the [@/libs/multi_index/doc/compiler_specifics.html compiler specifics]
    section for limitations on pre-C++11 compilers. 
  * The following classes are deprecated:
    * [@/libs/multi_index/doc/reference/key_extraction.html#member_offset `member_offset`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit `const_mem_fun_explicit`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit `mem_fun_explicit`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_equal_to `composite_key_result_equal_to`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_less `composite_key_result_less`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_greater `composite_key_result_greater`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_hash `composite_key_result_hash`].
  * Maintenance fixes.

* [phrase library..[@/libs/property_map/index.html PropertyMap]:]
  * dynamic_properties objects can now be built by non-destructively chaining
    `.property(name, pm)` calls.  Example:
    ```
    boost::dynamic_properties()
      .property("color", color_map)
      .property("pos", position_map)
    ```
  * The use of raw pointers as property maps is deprecated; it often failed on
    Visual Studio in the past.  This usage has been removed from all tests and
    examples in Boost.Graph.  The replacement to use for vertex properties in
    graphs (the most common use for this feature) is:
    ```
    boost::make_iterator_property_map(
      <pointer or container .begin() iterator>,
      get(boost::vertex_index, <graph object>))
    ```
    (Note: the lack of namespace qualification on get() in this code is
    necessary for generic code).  Outside a graph context, the closest
    equivalent is:
    ```
    boost::make_iterator_property_map(
      <pointer>,
      boost::typed_identity_property_map<std::size_t>())
    ```
    There are commented-out static assertions on lines 151 and 159 of
    `<boost/property_map/property_map.hpp>` that can be un-commented to find
    deprecated uses of pointers in user code.

* [phrase library..[@/libs/wave/ Wave]:]
  * See the [@/libs/wave/ChangeLog Changelog] for details.

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
