[article Version 1.75.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* [phrase library..[@/libs/json/ JSON]:] JSON parsing, serialization, and DOM in C++11,
  from Vinnie Falco and Krystian Stasiowski.

* [phrase library..[@/libs/leaf/ LEAF]:] A lightweight error-handling library for C++11,
  from Emil Dotchevski.

* [phrase library..[@/libs/pfr/ PFR]:] Basic reflection without macro or boilerplate code for user defined types,
  from Antony Polukhin.

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/endian/ Endian]:]
  * `endian_arithmetic` no longer inherits from `endian_buffer`
  * When `BOOST_ENDIAN_NO_CTORS` is defined, the unaligned `endian_buffer` and
    `endian_arithmetic` are C++03 PODs, to enable use of `__attribute__((packed))`

* [phrase library..[@/libs/gil/ GIL]:]
  * BREAKING: In next release, we are going to drop support for GCC 5.
    We may also change the required minimum C++ version from C++11 to C++14.

* [phrase library..[@/libs/mp11/ Mp11]:]
  * Added `mp_pairwise_fold` (suggested by Barry Revzin)
  * Removed `mp_invoke` (use `mp_invoke_q`)

* [phrase library..[@/libs/polygon/ Polygon]:]
  * C++20 fixes for `event_comparison_type`, `vertex_equality_predicate_type`,
    and `voronoi_predicates`. (Glen Fernandes)

* [phrase library..[@/libs/outcome/ Outcome]:]
  * Announcements:
    * After a year and three major Boost releases announcing this upcoming change, this is the FINAL RELEASE of the v2.1 branch. From Boost 1.76 onwards, the v2.2 branch becomes the default. This branch has a number of major breaking changes to Outcome v2.1, see the documentation for details.
  * Enhancements:
    * The ADL discovered event hooks have been replaced with policy-specified event hooks instead. This is due to brittleness (where hooks would quietly self-disable if somebody changed something), compiler bugs (a difference in compiler settings causes the wrong hooks, or some but not all hooks, to get discovered), and end user difficulty in using them at all. The policy-specified event hooks can be told to default to ADL discovered hooks for backwards compatibility: set `OUTCOME_ENABLE_LEGACY_SUPPORT_FOR` to less than `220` to enable emulation.
    * Improve configuring `OUTCOME_GCC6_CONCEPT_BOOL`. Older GCCs had boolean based concepts syntax, whereas newer GCCs are standards conforming. However the precise logic of when to use legacy and conforming syntax was not well understood, which caused Outcome to fail to compile depending on what options you pass to GCC. The new logic always uses the legacy syntax if on GCC 8 or older, otherwise we use conforming syntax if and only if GCC is in C++ 20 mode or later. This hopefully will resolve the corner case build failures on GCC.
  * Bug fixes:
    * Boost.Outcome should now compile with `BOOST_NO_EXCEPTIONS` defined. Thanks to Emil, maintainer of Boost.Exception, making a change for me, Boost.Outcome should now compile with C++ exceptions globally disabled. You won't be able to use `boost::exception_ptr` as it can't be included if C++ exceptions are globally disabled.
    * [@https://github.com/ned14/outcome/issues/236 #236] In the Coroutine support the `final_suspend()` was not `noexcept`, despite being required to be so in the C++ 20 standard. This has been fixed, but only if your compiler implements `noop_coroutine`. Additionally, if `noop_coroutine` is available, we use the much more efficient coroutine handle returning variant of `await_suspend()` which should significantly improve codegen and context switching performance.

* [phrase library..[@/libs/preprocessor/ Preprocessor]:]
  * When variadic data is empty in C++20 mode with __VA_OPT__ support the variadic size has been corrected to be 0.
    This also means that in this C++20 mode it is now valid to convert to and from empty arrays and lists and variadic data.
    The end-user can read the "C++20 Support For Variadic Macros" part of the "variadic macros" topic for more information
    about empty variadic data in the library.
  * A number of the limits defined in the config/limits.hpp can now be changed to higher amounts for a TU.
    The end-user should read the "limitations" topic to understand how and which limits can be changed.
  * The library has been upgraded to assume variadic macro support for any compiler working
    with the library. Ostensibly this means that the library is now a C++11 on up library, yet most of the major
    compilers, including gcc, clang, and VC++, also support variadic macros in C++98/C++03 mode as long as strict
    compliance to C++98/C++03 is not turned on when using one of those compilers.

* [phrase library..[@/libs/system/ System]:]
  * The platform-specific headers `windows_error.hpp`, `linux_error.hpp`,
    and `cygwin_error.hpp` emit deprecation messages and are slated for
    removal.
  * The old names for `generic_category()` and `system_category()` emit
    deprecation messages and are slated for removal.
  * `error_condition::failed` is deprecated and is slated for removal.
    `operator bool()` for `error_condition` has been reverted to its old
    meaning of `value() != 0`. This is done for compatibility with
    `std::error_condition` as the next release is expected to improve
    interoperability with `<system_error>` even further. _Note that this
    does not affect_ `error_code::failed`, which is still alive and well.
  * The overload of `error_condition::message` that takes a buffer is
    deprecated and is slated for removal, for the same reasons. _Note that
    this does not affect_ `error_code::message`.

* [phrase library..[@/libs/vmd/ VMD]:]
  * The VMD number parsing has been upgraded to support the ability for the end-user to change the
    number limits in the Preprocessor library.
  * The macro BOOST_VMD_IS_GENERAL_IDENTIFIER has been added to support the parsing of input that
    represents a preprocessor token which matches the VMD identifier syntax, without having to register
    the identifier as a specific identifier.

* /TODO/

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
