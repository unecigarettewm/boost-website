[article Version 1.83.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section Known Issues]

These are patches from library authors which were found too late to be fixed
in the release.

* JSON
  * Compilation on Windows ARM platforms may fail for missing intrinsics, see [github json 926] and [github json 927].
    [@https://github.com/boostorg/json/commit/c4ce8509d015a0b75cfa9d36609b8409821a9c86.patch Patch].

* Unordered
  * Fix erroneous copy assigment operator that would destroy non-existent elements, see [github unordered 205].
    [@/patches/1_83_0/0001-unordered-fix-copy-assign.patch Patch].

[endsect]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* [phrase library..[@/libs/compat/ Compat]:] A repository of C++11 implementations of
  standard components added in later C++ standards, from Peter Dimov and contributors.

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/any/ Any]:]
  * New `boost::anys::unique_any` C++11 class - an alternative to
    `boost::any` (or to `std::any`) that does not require copy
    or move construction from the held type.
  * Ported documentation to Quickbook, Doxygen comments now used in code.

* [phrase library..[@/libs/atomic/ Atomic]:]
  * Fixed compilation of `atomic_ref` for `const`-qualified types. Note that even `const`-qualified atomic objects must still reside in read-write memory. ([github atomic 62])

* [phrase library..[@/libs/chrono/ Chrono]:]
  * Remove use of deprecated Boost.Ratio features.

* [phrase library..[@/libs/compat/ Compat]:]
  * Added `latch.hpp`, an implementation of `std::latch` (contributed by Christian Mazakas.)
  * Added `shared_lock.hpp`, a (partial) implementation of `std::shared_lock` (contributed by Christian Mazakas.)

* [phrase library..[@/libs/core/ Core]:]
  * Added support for incomplete types to `boost::core::type_name`.
  * Bit manipulation functions in `boost/core/bit.hpp` are now
    `constexpr` on recent MSVC versions (VS2019 update 5 and later.)
  * Added `boost::core::byteswap` (an implementation of `std::byteswap` from
    C++23) to `boost/core/bit.hpp`.
  * Moved the yield primitives `sp_thread_pause`, `sp_thread_yield`, `sp_thread_sleep`
    from SmartPtr implementation details to `boost/core/yield_primitives.hpp`.

* [phrase library..[@/libs/dll/ DLL]:]
  * Fixed tests failures on glibc 2.36+, thanks to [Đoàn Trần Công Danh](https://github.com/sgn)
    for the bugreport [@https://github.com/boostorg/dll/issues/58 #58].

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * Added `directory_entry::refresh` method that updates internal cached file statuses for the directory entry identified by path.
  * [*v4:] `directory_entry` constructors and modifiers that initialize or modify the path now automatically call `refresh`. This may result in errors that were not indicated before and in [*v3], if querying the filesystem for file statuses fails (e.g. if the file does not exist). This new behavior is similar to std::filesystem.
  * [*v4:] `directory_entry` constructors and methods taking `file_status` parameters are removed. Users are recommended to remove these arguments and rely on `directory_entry` calling `refresh` internally.
  * Added `directory_entry` member methods for checking the file type of the file, similar to std::filesystem.
  * Added more methods for testing file status: `is_block_file`, `is_character_file`, `is_fifo`, `is_socket` and `is_reparse_file`.
  * `recursive_directory_iterator` is now more likely to reuse information about the file type that is obtained during filesystem iteration. This may improve performance. ([github filesystem 288])
  * File streams defined in `boost/filesystem/fstream.hpp` are now movable, if the standard library file streams are. ([github filesystem 280])
  * Added a new header `boost/filesystem/cstdio.hpp` with a portable `fopen` overload that takes `path` as the first argument. This function is equivalent to `std::fopen`, except that on Windows it uses the native wide character encoding for paths.
  * Generic `path` comparison operators are now more restricted to avoid potential ambiguities when user's code contains a `using namespace boost::filesystem;` directive. ([github filesystem 285])
  * Fixed potential overload resolution ambiguity in users' code, where `path` constructors from iterators could interfere with function overloads taking a `std::initializer_list` argument. ([github filesystem 287])
  * On Windows, added more workarounds for errors returned by various filesystems when creating a directory iterator. ([github filesystem 284], [github filesystem 286])
  * On Windows, relaxed access rights needed for querying file times. ([github filesystem 290])

* [phrase library..[@/libs/flyweight/index.html Flyweight]:]
  * Added smart-pointer syntax to `boost::flyweight` (`operator*` and 
    `operator->` dereferencing to the underlying value).
  * Fixed a situation where the mutex used by
    [@/libs/flyweight/doc/reference/locking.html#simple_locking_synopsis `simple_locking`]
    was not recursive (issue [github flyweight 12]).

* [phrase library..[@/libs/geometry/ Geometry]:]
  * Improvements
    * [github_pr geometry 1140] Drop dependencies and replace boost with std in several places
    * [github_pr geometry 1154] Add missing headers so that all headers compile independently complying with Boost policy
    * [github_pr geometry 1157] Check const Ring concept in calculate_point_order
  * Solved issues
    * [github geometry 1100] Fix for union
    * [github geometry 1139] Fix for different geometry types
    * [github geometry 1158] Fix for convex hull
    * [github geometry 1161] Fix within algorithm for geometries having a pole as a vertex
    * Various fixes of errors and warnings

* [phrase library..[@/libs/iterator/ Iterator]:]
  * Added `is_iterator` type trait that allows to test whether the type qualifies as an iterator type.
  * `filter_iterator` now supports move-construction of the adopted iterator and the function object. ([github_pr iterator 79])

* [phrase library..[@/libs/json/ JSON]:]
  * The library now only throws `system_error`, except for when allocation
    failed, in which case `std::bad_alloc` is thrown.
  * Serialization behavior can now be changed by `serialize_options`.
  * Contextual conversions.
  * Parser option for more precise number parsing.
  * Support `parse_options` in stream `operator<<`.
  * Parser option to allow `Infinity` and `NaN` JSON literals.
  * Parser mode that only validates numbers rather than parsing them.
  * Numbers with exponent larger than `INT_MAX` are accepted by the parser and
    treated as infinity.
  * Fix `object` member functions that should provide strong
    guarantee.
  * Fix ambiguity of `end` call when `boost/range.hpp` is included.
  * Fix ASan failures.
  * Fix error message for `error::size_mismatch`.
  * Fix conversion into tuple with const elements.

 * [phrase library..[@/libs/locale/index.html Locale]:]
   * Bitwise/binary operators (left/right shift, binary and/or/xor/not) are no longer supported in message catalog files matching GNU gettext behavior
   * Std backend on Windows uses the classic locale instead of the system locale when the requested locale does not exist (now same as on other OSs)
   * `localization_backend_manager::get` is deprecated, use the generator instead
   * New converter classes as alternative to `to_utf`/`from_utf`/`between`
   * Fix UB on invalid index in format strings
   * Fix conversion of UTF to e.g. iso-2022-jp on Windows without ICU
   * Use `long long` as the count parameter for pluralized translations
   * Fix movability and exception specification for some classes

* [phrase library..[@/libs/log/ Log]:]
  * Fixed a possible infinite loop in `text_file_backend`, when the size of a formatted log record exceeds the `rotation_size` limit. ([github log 209])

* [phrase library..[@/libs/math/ Math]:]
  * Added Numerical evaluation of Fourier transform of Daubechies scaling functions [@https://github.com/boostorg/math/pull/921 921].
  * Added logcdf function to statistical distributions [@https://github.com/boostorg/math/pull/946 946].
  * Added support for C++23's `<stdfloat>` types [@https://github.com/boostorg/math/pull/978 978].
  * Fixed various `-Wmaybe-uninitialized` warnings
  * Fixed `round` and `trunc` functions for non-representable numbers [@https://github.com/boostorg/math/pull/968 968].
  * Fixed calculation of mode for F-distribution [@https://github.com/boostorg/math/pull/976 976].
  * Fixed overflow in beta distribution [@https://github.com/boostorg/math/pull/977 977].
  * Fixed overflow in hypergeometric distribution [@https://github.com/boostorg/math/pull/987 987].
  * Fixed calculation of median absolute deviation with non-zero center [@https://github.com/boostorg/math/pull/997 997].

* [phrase library..[@/libs/mp11/ Mp11]:]
  * Added an offset/from parameter to `mp_from_sequence`, `mp_iota`, `mp_iota_c`.
  * Added `mp_value`, `mp_list_v`, `mp_rename_v`, `mp_is_value_list`.
  * Added value list support to the primitives in `<boost/mp11/list.hpp>`.
  * Added value list support to `mp_repeat`, `mp_fill`, `mp_at`, `mp_back`, `mp_take`, `mp_pop_back`, `mp_drop`, `mp_insert`, `mp_erase`.

* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * Updated range `insert` in non-unique ordered indices to preserve insertion order
    of equivalent elements (issue [github multi_index 68]). 
  * Serialization now uses `std::size_t` instead of `unsigned long` to save and load
    the size of a `multi_index_container` (`unsigned long` is smaller than
    `std::size_t` in LLP64 data models). `multi_index_container` serialization
    [@/libs/serialization/doc/tutorial.html#versioning class version] has been bumped
    from 3 to 4 to reflect this change. 

* [phrase library..[@/libs/multiprecision/ Multiprecision]:]
  * Fixed bug in rational adapter division [@https://github.com/boostorg/multiprecision/pull/542 542].
  * Fixed handling of global precsion changes in multi-threaded environments [@https://github.com/boostorg/multiprecision/pull/552 552].
  * Fixed `cpp_int::eval_convert_to` noexcept specification [@https://github.com/boostorg/multiprecision/pull/555 555].

* [phrase library..[@/libs/mysql/ MySQL]:]
  * [*Major update.]
  * Stored procedures are now fully supported, including `SELECT` statements producing
    data and procedures with `OUT` parameters.
  * Added support for multi-queries, which allows running multiple semicolon-separated
    statements with a single call.
  * A statically-typed interface has been added, which allows parsing query results into
    user-provided types, using [@/libs/describe/ Boost.Describe] structs and tuples.
  * Text queries and prepared statements can now be executed using the new
    `connection::execute` and `connection::start_execution` functions (and their async
    counterparts). These superseed `connection::query`, `connection::execute_statement`,
    `connection::start_query` and `connection::start_statement_execution`. The new
    functions allow access to new features, like the static interface.
  * A separate compilation mode has been added to help reduce build times. Sources
    are included in `boost/mysql/src.hpp`, which must be included in exactly one
    translation unit.
  * Prepared statements can now be executed using an iterator pair to specify parameters,
    using `statement::bind` and `connection::execute`. This enables use cases where the
    number and type of parameters is not known at compile-time.
  * Prepared statement execution now accepts parameters of type `bool`, `std::optional`
    and `boost::optional`.
  * Added error codes and verified compatibility with MySQL v8.0.33 and MariaDB v11.0.
  * Fixed potential problems with Windows' `min()` and `max()` macros.
  * All assertions now use [@/libs/assert/ Boost.Assert].
  * All exceptions are now thrown via [@/libs/throw_exception/ Boost.ThrowException].
  * Immediate completions are now correctly dispatched through the I/O object executor.

* [phrase library..[@/libs/ratio/ Ratio]:]
  * Change default `BOOST_RATIO_VERSION` to 2.
  * Support for `BOOST_RATIO_EXTENSIONS` is now deprecated and will eventually
    be removed when Boost.Ratio is implemented in terms of the standard `<ratio>`
    header.

* [phrase library..[@/libs/test/ Test]:]
  * Added addtional older platforms to CI system (e.g. GCC 4.6)
  * Fixed handling of `uintptr_t` to make sure it is portable on 32-bit systems [@https://github.com/boostorg/test/pull/353 353].
  * Fixed warnings from `-Wdeprecated-copy-dtor`  and `-Wdeprecated-copy-with-user-provided-dtor` [@https://github.com/boostorg/test/pull/375 375].
  * Fixed handling of `check_is_close` for C++23 `<stdfloat>` types [@https://github.com/boostorg/test/pull/382 382].

* [phrase library..[@/libs/timer/ Timer]:]
  * Remove dependency on Boost.Chrono, Boost.System, and others.
  * Disable deprecated headers unless `BOOST_TIMER_ENABLE_DEPRECATED` is defined.

* [phrase library..[@/libs/unordered/ Unordered]:]
  * [*Major update.]
  * Added `boost::concurrent_flat_map`, a fast, thread-safe hashmap based on
    open addressing.
  * Sped up iteration of open-addressing containers.
  * In open-addressing containers, `erase(iterator)`, which previously returned
    nothing, now returns a proxy object convertible to an iterator to the next
    element. This enables the typical `it = c.erase(it)` idiom without incurring
    any performance penalty when the returned proxy is not used.

* [phrase library..[@/libs/url/ URL]:]
  * `parse_query` does not recreate `string_view`. ([@https://github.com/boostorg/url/issues/757 #757])
  * `url_view`/`string_view` constructor requires non-`url_view_base`. ([@https://github.com/boostorg/url/issues/756 #756])
  * `IP-literal` can be `IPv6addrz`. ([@https://github.com/boostorg/url/issues/711 #711])

* [phrase library..[@/libs/uuid/ UUID]:]
  * Improved generated x86 code for AVX targets. Removed the use of `lddqu` instruction on SSE3 targets, which penalize performance on Intel NetBurst CPUs but is more optimal on Skylake and later CPUs. ([github_pr uuid 138])

* [phrase library..[@/libs/variant2/ Variant2]:]
  * Added `uses_double_storage()`.

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/build/ Build]:]
  * Includes release of [@/tools/build/doc/html/#_version_4_10_1 B2 version 4.10.1].

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang, C++03: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++11: 3.4, 11.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++20: 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0

  * GCC, C++03: 4.6.3, 11, 12
  * GCC, C++11: 4.7.3, 4.8.5, 11, 12
  * GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11, 12
  * GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11, 12
  * GCC, C++20: 8.0.1, 9.1.0, 10, 11, 12

* OS X:
  * Apple Clang, C++03: 11.0.3
  * Apple Clang, C++11: 11.0.3
  * Apple Clang, C++14: 11.0.3
  * Apple Clang, C++17: 11.0.3
  * Apple Clang, C++20: 11.0.3

* Windows:
  * Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2, 14.3

[endsect]

[section Acknowledgements]

Marshall Clow and Glen Fernandes managed this release.

[endsect]
