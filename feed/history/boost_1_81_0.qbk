[article Version 1.81.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* [phrase library..[@/libs/url/ URL]:] A library for parsing, modifying,
  and printing URLs using only C++11, from Vinnie Falco and Alan de Freitas.
  Features include fast compilation, strong invariants, and strict compliance
  using a memory-friendly approach.

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/beast/ Beast]:]
  * Add `buffers_generator`
  * Add `beast::http::message_generator`
  * Added `buffer_ref`, so beast buffers can be used with asio.
  * Support for per-operation cancellation 
  * C++20 awaitable examples.
  * websocket per-message compression options
  * websocket timeout option api
  * multiple content length error
  * Support for default-completion and rebind

* [phrase library..[@/libs/container_hash/ Container Hash]:]
  * [*Major update.]
  * The specializations of `boost::hash` have been removed; it now
    always calls `hash_value`.
  * Support for `BOOST_HASH_NO_EXTENSIONS` has been removed. The
    extensions are always enabled.
  * All standard containers are now supported. This includes
    `std::forward_list` and the unordered associative containers.
  * User-defined containers (types that have `begin()` and `end()`
    member functions that return iterators) are now supported out
    of the box.
  * Described structs and classes (those annotated with
    `BOOST_DESCRIBE_STRUCT` or `BOOST_DESCRIBE_CLASS`) are now
    supported out of the box.
  * `hash_combine` has been improved.
  * The performance (and quality, as a result of the above change)
    of string hashing has been improved. `boost::hash` for strings
    now passes SMHasher in 64 bit mode.
  * The documentation has been substantially revised to reflect
    the changes.

* [phrase library..[@/libs/describe/ Describe]:]
  * To allow the inclusion of `enumerators.hpp`, `bases.hpp`, and `members.hpp`
    when the option `-pedantic` is used, the invocation of `BOOST_DESCRIBE_ENUM`
    has been moved from `modifiers.hpp` into a separate header,
    `modifier_description.hpp`. As a consequence, `modifiers.hpp` no longer
    includes `enum.hpp`. Code that has been relying on this implicit inclusion
    may fail, and will need to be fixed to include `enum.hpp`.

* [phrase library..[@/libs/system/ System]:]
  * The macro `BOOST_SYSTEM_DISABLE_THREADS` can now be defined to disable
    the use of `<mutex>` (e.g. on single-threaded libstdc++).
  * Added `value_type`, `error_type`, `in_place_value`, `in_place_error`
    to `result<>`.
  * Added `emplace` to `result<>`.

* [phrase library..[@/libs/unordered/ Unordered]:]
  * [*Major update.]
  * Added fast containers `boost::unordered_flat_map` and `boost::unordered_flat_set`
    based on open addressing.

* [phrase library..[@/libs/variant2/ Variant2]:]
  * Added support for `boost::json::value_from` and `boost::json::value_to`.

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
