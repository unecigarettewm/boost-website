<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:boostbook="urn:boost.org:boostbook">
  <channel>
    <generator>Boost Website Site Tools</generator>
    <title>Release notes for work in progress boost</title>
    <link>http://www.boost.org/</link>
    <description/>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)</copyright>
  <item><title>Version 1.52.0</title><link>http://www.boost.org/users/history/version_1_52_0.html</link><guid>http://www.boost.org/users/history/version_1_52_0.html</guid><pubDate>In Progress</pubDate><description>



  &lt;div id=&quot;version_1_52_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_SFINAE_EXPR&lt;/span&gt;&lt;/code&gt;
                for gcc-4.4, since the support was found to be too buggy.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5980&quot;&gt;#5980&lt;/a&gt; Enhance chrono I/O with H. Hinnant proposal &lt;a href=&quot;http://home.roadrunner.com/~hinnant/bloomington/chrono_io.html&quot;&gt;proposal&lt;/a&gt;
                      which has the advantage to provide I/O for system clocks using
                      the Gregorian Calendar.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5981&quot;&gt;#5981&lt;/a&gt; Add i/o state savers for duration and time_point formatting
                      state.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7059&quot;&gt;#7059&lt;/a&gt; Add low level i/o facilities.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The chrono i/o version included in Boost.Chrono 1.2.x has been
                      completly refactored in version 2.0.0
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The manipulators &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_short&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_long&lt;/span&gt;&lt;/code&gt;
                      are depreceated. You should use the parameterized form &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_fmt&lt;/span&gt;&lt;/code&gt; or the renamed
                      manipulators &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_symbol&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_prefix&lt;/span&gt;&lt;/code&gt;
                      instead.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_punct&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; facet is deprecated.
                      You should use the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__get_duration_style&lt;/span&gt;&lt;/code&gt;
                      free function to get the informations and use the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_units&lt;/span&gt;&lt;/code&gt; facet for
                      localization purposes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      When &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_CHRONO_VERSION&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;
                      the preceding deprecated functions are not available.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7381&quot;&gt;#7381&lt;/a&gt; C++11 compliance: unresolved symbol when assigning
                      a constexpr duration to a non-const local variable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Would not fix:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6871&quot;&gt;#6871&lt;/a&gt; chrono_io.hpp: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;...)&lt;/span&gt;&lt;/code&gt;
                      modifies the state of os. The neww io interface provided in
                      version 2 solves this issue. You should move to the new version.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/date_time/&quot;&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Document &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_DATE_TIME_NO_LIB&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6077&quot;&gt;#6077&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;nth_as_str&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7022&quot;&gt;#7022&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7234&quot;&gt;#7234&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/foreach/&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix alignment warning on gcc.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/function/&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Move constructors and move assignment operators added (only for compilers
                with C++11 rvalue references support) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7330&quot;&gt;#7330&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6950&quot;&gt;#6950&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7226&quot;&gt;#7226&lt;/a&gt;,&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7308&quot;&gt;#7308&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7327&quot;&gt;#7327&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7338&quot;&gt;#7338&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7341&quot;&gt;#7341&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7378&quot;&gt;#7378&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7380&quot;&gt;#7380&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7398&quot;&gt;#7398&lt;/a&gt;, and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7428&quot;&gt;#7428&lt;/a&gt;, plus others
                not in Trac.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restore &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt;&lt;/code&gt; support,
                which was accidentally removed in the last version (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7437&quot;&gt;#7437&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New floating point hasher - will hash the binary representation on
                more platforms, which should be faster.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/iterator/&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5825&quot;&gt;#5825&lt;/a&gt; constructing function_input_iterator without consuming
                      an item
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7194&quot;&gt;#7194&lt;/a&gt; Error in documentation of make_function_input_iterator
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Breaking changes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Due to the fix for &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5825&quot;&gt;#5825&lt;/a&gt;, a function_input_iterator will
                      no longer make unnecessary invokations to the wrapped nullary
                      function. For example, constructing an end iterator will now
                      not trigger an invokation; and dereferencing-and-incrementing
                      an iterator N times will trigger N invokations, not N+1 as
                      before. User code that relied on the old behavior will need
                      to be adjusted.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restored compilation on MSVC-2003 (was broken in 1.51.0) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7255&quot;&gt;#7255&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;CharType&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; function overload. &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6663&quot;&gt;#6663&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7228&quot;&gt;#7228&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Corrected moments for small degrees of freedom &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7177&quot;&gt;#7177&lt;/a&gt;
                (reported by Thomas Mang).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Corrected failure to detect bad parameters in many distributions
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6934&quot;&gt;#6934&lt;/a&gt;
                (reported by Florian Schoppmann) by adding a function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;check_out_of_range&lt;/span&gt;&lt;/code&gt; to test many
                possible bad parameters. This test revealed several distributions
                where the checks for bad parameters were ineffective, and these have
                been rectified.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issue in Hankel functions that causes incorrect values to be
                returned for &lt;em&gt;x &amp;lt; 0&lt;/em&gt; and &lt;em&gt;ν&lt;/em&gt;
                odd, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7135&quot;&gt;#7135&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6517&quot;&gt;#6517&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6362&quot;&gt;#6362&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7053&quot;&gt;#7053&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2693&quot;&gt;#2693&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6937&quot;&gt;#6937&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7099&quot;&gt;#7099&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/phoenix/&quot;&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make Phoenix work with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;-based
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Included Voronoi diagram extensions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Introduced new Segment concept.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation issues.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The data parameter to primitive transforms can now optionally have
                slots indexed by key.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Primitive transforms can now operatate on temporary expressions that
                are non-const qualified.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add callable function object types for the free functions in &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and also for some Boost.Range
                functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Boost.MPL algorithms work on Proto expression nodes.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pass_through&lt;/span&gt;&lt;/code&gt; primitive transform
                now accepts an optional &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Domain&lt;/span&gt;&lt;/code&gt;
                template parameter for specifying the target domain of the resulting
                expression.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/utility/utility.htm#result_of&quot;&gt;Result_of&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Switch &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt; on compilers for which
                support is deemed &amp;quot;good enough&amp;quot;. That means if the compiler
                implements &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf&quot;&gt;n3276&lt;/a&gt;.
                (For now, that only includes very recent versions of clang.)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; is now &amp;quot;sfinae-friendly&amp;quot;
                when it uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;.
                See &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3436.html&quot;&gt;n3436&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated Features&lt;/em&gt;: Deprecated
                features since boost 1.50 available only until boost 1.55. These
                deprecated features will be provided by default up to boost 1.52.
                If you don't want to include the deprecated features you could define
                BOOST_THREAD_DONT_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0. Since
                1.53 these features will not be included any more by default. Since
                this version, if you want to include the deprecated features yet
                you could define BOOST_THREAD_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0.
                These deprecated features will be only available until boost 1.55,
                that is you have yet 1 year to move to the new features.
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Time related functions don't using the Boost.Chrono library,
                      use the chrono overloads instead.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Breaking changes when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THREAD_VERSION&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;
                (Default value since Boost 1.53): There are some new features which
                share the same interface but with different behavior. These breaking
                features are provided by default when BOOST_THREAD_VERSION is 3,
                but the user can however choose the version 2 behavior by defining
                the corresponding macro. As for the deprecated features, these broken
                features will be only available until boost 1.55.
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6229&quot;&gt;#6229&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: Rename the
                      unique_future to future following the c++11.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6266&quot;&gt;#6266&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: thread destructor
                      should call terminate if joinable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6269&quot;&gt;#6269&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: thread move
                      assignment should call terminate if joinable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4710&quot;&gt;#4710&lt;/a&gt; C++11 compliance: Missing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7283&quot;&gt;#7283&lt;/a&gt; C++11 compliance: Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;notify_all_at_thread_exit&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7345&quot;&gt;#7345&lt;/a&gt; C++11 compliance: Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                      to recursive mutex &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;try_lock&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2361&quot;&gt;#2361&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread_specific_ptr&lt;/span&gt;&lt;/code&gt;:
                      document nature of the key, complexity and rationale.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2797&quot;&gt;#2797&lt;/a&gt; Two problems with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread_specific_ptr&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5274&quot;&gt;#5274&lt;/a&gt; failed to compile &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      with stlport 5.1.5 under msvc8.1, because of undefined class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5431&quot;&gt;#5431&lt;/a&gt; compile error in Windows CE 6.0(interlocked).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5752&quot;&gt;#5752&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;call_once&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; is unreliable on some platforms.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7045&quot;&gt;#7045&lt;/a&gt; Thread library does not automatically compile date_time.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7173&quot;&gt;#7173&lt;/a&gt; wrong function name &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;interrupt_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7200&quot;&gt;#7200&lt;/a&gt; Unable to build boost.thread modularized.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7220&quot;&gt;#7220&lt;/a&gt; gcc 4.6.2 warns about inline+dllimport functions.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7238&quot;&gt;#7238&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;sleep_for&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; does not respond to interrupt().
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7245&quot;&gt;#7245&lt;/a&gt; Minor typos on documentation related to version 3.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7272&quot;&gt;#7272&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;win32&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread_primitives&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;:
                      (Unneccessary) Warning.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7284&quot;&gt;#7284&lt;/a&gt; Clarify that there is no access priority between lock
                      and shared_lock on shared mutex.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7329&quot;&gt;#7329&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      does not compile on HPUX.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7336&quot;&gt;#7336&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THREAD_DONT_USE_SYSTEM&lt;/span&gt;&lt;/code&gt;
                      doesn't work.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7349&quot;&gt;#7349&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;packaged_task&lt;/span&gt;&lt;/code&gt;
                      holds reference to temporary.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7350&quot;&gt;#7350&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_destructor&lt;/span&gt;&lt;/code&gt;
                      does not destroy object
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/numeric/ublas/&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                improved performance of inplace_solve (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4024&quot;&gt;#4024&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                fixed coordinate_matrix for use with gcc 4.7 (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7363&quot;&gt;#7363&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                In assignment, reuse existing nodes where possible.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some work on the implementation.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/uuid/&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6118&quot;&gt;#6118&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6788&quot;&gt;#6788&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7375&quot;&gt;#7375&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0_beta1/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sub_match&lt;/span&gt;&lt;/code&gt; work
                with Boost.Range. Fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7237&quot;&gt;#7237&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_52_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang: 2.8
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cray: 8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang:
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2, 4.6.3, 4.7.0, 4.7.1, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.9
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age: 10.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: V12.1.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun: 5.10
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_52_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.51.0</title><link>http://www.boost.org/users/history/version_1_51_0.html</link><guid>http://www.boost.org/users/history/version_1_51_0.html</guid><pubDate>Mon, 20 Aug 2012 16:00:21 -0700</pubDate><description>



  &lt;div id=&quot;version_1_51_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
  Context switching library,
          from Oliver Kowalke.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_51_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_sorted_until&lt;/span&gt;&lt;/code&gt;
                ; now matches the c++11 standard behavior on ranges with duplicate
                values.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added range support for the rest of the search algorithms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unhex&lt;/span&gt;&lt;/code&gt; now uses Boost.Exception
                to signal bad input.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an incompatibility between &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iostream&lt;/span&gt;&lt;/code&gt;
                and C++11 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7162&quot;&gt;#7162&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Decorated GCC attribute names with underscores to prevent interaction
                with user-defined macros (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6415&quot;&gt;#6415&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;
                &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cctype&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, needed for some versions of
                MinGW.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use &lt;tt&gt;gcc&lt;/tt&gt;'s atomic builtins on ARM CPUs,
                when available (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7140&quot;&gt;#7140&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed strand destruction to be a no-op, to allow strand objects
                to be destroyed after their associated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                has been destroyed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for some newer versions of glibc which provide the
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_create1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                function but always fail with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ENOSYS&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7012&quot;&gt;#7012&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the SSL implementation to throw an exception if SSL engine
                initialisation fails (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6303&quot;&gt;#6303&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed another regression in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;buffered_write_stream&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6310&quot;&gt;#6310&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented various minor performance improvements, primarily targeted
                at Linux x86 and x86-64 platforms.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Deprecated a whole bunch of macros that were c++11 specific, but
                not named to show that they were c++11 specific. Made new macros
                with better names, and paired the old macros with the new ones. Updated
                the documentation to list the deprecated macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6918&quot;&gt;#6918&lt;/a&gt;
                Boost Chrono compilation failure on HP uX due to undefined pthread_getcpuclockid.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6241&quot;&gt;#6241&lt;/a&gt;
                boost::chrono compilation problems without std::wstring support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6987&quot;&gt;#6987&lt;/a&gt;
                Documentation &amp;amp; C++11.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7041&quot;&gt;#7041&lt;/a&gt;
                time_point.hpp depends on Boost.System.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7042&quot;&gt;#7042&lt;/a&gt;
                Avoiding time_point and duration dependency on time.h and CLOCK_REALTIME.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7058&quot;&gt;#7058&lt;/a&gt;
                Make it work when BOOST_NO_EXCEPTIONS is defined.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7069&quot;&gt;#7069&lt;/a&gt;
                Misspellings in clock_string&amp;lt;thread_clock&amp;gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7081&quot;&gt;#7081&lt;/a&gt;
                WinError.h capitalization in boost/detail/win/basic_types.hpp.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                points accessed through a pointer (e.g. in a linestring) should now
                be specialized without the pointer. In previous versions a type
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;/code&gt; used like
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;linestring&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt;
                had to be specalized like: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt;.
                Now the library itself removes the pointer before calling the traits
                class, so now it should be like: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                intersection was sometimes wrong for integer points, fixed
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                documentation, order of parameters in simplify was wrong, fixed
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7030&quot;&gt;7030&lt;/a&gt;
                spherical distance, fixed (by patch of Karsten Ahnert)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Refactored support for internal and bundled properties in Boost.Graph-provided
                graph types, and cleaned up named parameter functionality:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Enabled old-style (non-bundled) internal properties in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compressed_sparse_row_graph&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bundled properties should work correctly for all graph types
                      and adaptors.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6993&quot;&gt;#6993&lt;/a&gt;: Typo Bundled Properties document
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7002&quot;&gt;#7002&lt;/a&gt;: Problem with initialization of CSR bidirectional
                      graph
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7023&quot;&gt;#7023&lt;/a&gt;: Enclose internal type graphml_reader in anonymous
                      namespace
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Other bugs and warnings not in Trac
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support the standard smart pointers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;hash_value&lt;/span&gt;&lt;/code&gt; now implemented
                using SFINAE to avoid implicit casts to built in types when calling
                it.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better performance, less memory usage for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;character_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;character_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; conversions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug with volatile input parameter &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7157&quot;&gt;#7157&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;MSM&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for boost::any &lt;a href=&quot;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s03.html#any-event&quot;&gt;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s03.html#any-event&lt;/a&gt;
                or kleene &lt;a href=&quot;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s04.html#kleene-event&quot;&gt;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s04.html#kleene-event&lt;/a&gt;
                as acceptable events
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: compiler error with fsm internal table and none (compound)
                event.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: euml::defer_ leading to stack overflow.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Proto transforms get pseudo-parameter pack expansion support for
                unpacking expressions. See the &lt;a href=&quot;http://www.boost.org/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_51&quot;&gt;Release
                Notes&lt;/a&gt; for more information.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7075&quot;&gt;#7075&lt;/a&gt;
                Workaround for error: the type of partial specialization template
                parameter constant &amp;quot;n1&amp;quot; depends on another template parameter.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4258&quot;&gt;#4258&lt;/a&gt;
                Linking with boost thread does not work on mingw/gcc 4.5.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4885&quot;&gt;#4885&lt;/a&gt;
                Access violation in set_tss_data at process exit due to invalid assumption
                about TlsAlloc.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6931&quot;&gt;#6931&lt;/a&gt;
                mutex waits forwever with Intel Compiler and /debug:parallel
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7044&quot;&gt;#7044&lt;/a&gt;
                boost 1.50.0 header missing.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7052&quot;&gt;#7052&lt;/a&gt;
                Thread: BOOST_THREAD_PROVIDES_DEPRECATED_FEATURES_SINCE_V3_0_0 only
                masks thread::operator==, thread::operator!= forward declarations,
                not definitions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7066&quot;&gt;#7066&lt;/a&gt;
                An attempt to fix current_thread_tls_key static initialization order.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7074&quot;&gt;#7074&lt;/a&gt;
                Multiply defined symbol boost::allocator_arg.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7078&quot;&gt;#7078&lt;/a&gt;
                Trivial 64-bit warning fix on Windows for thread attribute stack
                size
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7089&quot;&gt;#7089&lt;/a&gt;
                BOOST_THREAD_WAIT_BUG limits functionality without solving anything
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix construction/destruction issue when using a C++11 compiler with
                a C++03 allocator (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7100&quot;&gt;#7100&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove a &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;&lt;/code&gt; to support compiling without
                exceptions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Adjust SFINAE use to try to supprt g++ 3.4 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7175&quot;&gt;#7175&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Work around buggy wide ctype facet on cygwin and mingw.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Work around absence of __isctype on some glibc implementations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;as&lt;/span&gt;&lt;/code&gt; shouldn't assume &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;/code&gt; != &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix assertion in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_regex_traits&lt;/span&gt;&lt;/code&gt;
                on libc++, thanks to John Fletcher.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_51_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2, 4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang 2.8
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang: 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.4, 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.0, 4.7.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.4, 4.5.3, 4.6.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.9
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age: 10.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.6.3, 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: V12.1.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun: 5.10
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_51_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.50.0</title><link>http://www.boost.org/users/history/version_1_50_0.html</link><guid>http://www.boost.org/users/history/version_1_50_0.html</guid><pubDate>Thu, 28 Jun 2012 08:48:57 -0400</pubDate><description>



  &lt;div id=&quot;version_1_50_0.patches&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Patches&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_50_0/001-unordered.patch&quot;&gt;Boost.Unordered patch&lt;/a&gt;
          - Fixes a bug when compiled using a C++11 compiler, but with a C++03 allocator.
          When inserting elements, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
          detects that the node can be constructed using an accidental implicit conversion
          which causes several problems.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;div id=&quot;version_1_50_0.patches.new_libraries&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
  A collection of
            useful generic algorithms, from Marshall Clow. This includes several
            different searching algorithms, as well as most of the new algorithms
            from the C++11 standard library
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/overloaded_function/&quot;&gt;Functional/OverloadedFunction&lt;/a&gt;:&lt;/span&gt;
  Overload
            different functions into a single function object, from Lorenzo Caminiti.
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/local_function/&quot;&gt;LocalFunction&lt;/a&gt;:&lt;/span&gt;
  Program
            functions locally, within other functions, directly within the scope
            where they are needed, from Lorenzo Caminiti.
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/identity_type/&quot;&gt;Utility/IdentityType&lt;/a&gt;:&lt;/span&gt;
  Wrap
            types within round parenthesis so they can always be passed as macro
            parameters, from Lorenzo Caminiti.
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div id=&quot;version_1_50_0.patches.updated_libraries&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  add missing &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;
                  &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6702&quot;&gt;#6702&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  work around for msvc which allows ctor templates to be copy ctors,
                  fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6535&quot;&gt;#6535&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  shorten filenames to meet boost guidelines, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6196&quot;&gt;#6196&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/array/&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  add support for Boost.Hash &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6791&quot;&gt;#6791&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;
                  backend to do lazy registration for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EPOLLOUT&lt;/span&gt;&lt;/code&gt;
                  events.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;
                  handling of out-of-band data, which was broken by an incomplete
                  fix in the last release.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed Asio's SSL wrapper to respect OpenSSL's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;OPENSSL_NO_ENGINE&lt;/span&gt;&lt;/code&gt;
                  feature test &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#define&lt;/span&gt;&lt;/code&gt;
                  (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6432&quot;&gt;#6432&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;object_handle&lt;/span&gt;&lt;/code&gt; so that it works
                  with Windows compilers that support C++11 move semantics (such
                  as &lt;tt&gt;g++&lt;/tt&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Improved the performance of strand rescheduling.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added support for &lt;tt&gt;g++&lt;/tt&gt; 4.7 when compiling in
                  C++11 mode (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6620&quot;&gt;#6620&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed a problem where &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal_set&lt;/span&gt;&lt;/code&gt;
                  handlers were not being delivered when the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                  was constructed with a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;concurrency_hint&lt;/span&gt;&lt;/code&gt;
                  of 1 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6657&quot;&gt;#6657&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/bimap/&quot;&gt;Bimap&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Remove spurious dependency on Boost.Serialization, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3868&quot;&gt;#3868&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Solve unused constructor parameter warning, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5749&quot;&gt;#5749&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add key_type and mapped_type (leaving data_type for backward compatibility)
                  typedefs to map views, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6031&quot;&gt;#6031&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6361&quot;&gt;#6361&lt;/a&gt;
                        integer overflow in boost::chrono::process_real_cpu_clock::now()
                        under Windows 32bits.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6628&quot;&gt;#6628&lt;/a&gt;
                        compiler warning in process_cpu_clocks.hpp.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6666&quot;&gt;#6666&lt;/a&gt;
                        thread_clock.hpp needs pthread.h.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/concept_check/&quot;&gt;Concept Check&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6738&quot;&gt;#6738&lt;/a&gt;
                        Shadowed variable warning.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/filesystem/&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Remove Filesystem Version 2 from the distribution. Version 3 is
                  now the only distributed version. Those still using V2 are urged
                  to migrate to V3 as soon as possible.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add constexpr value_type preferred_separator to class path.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5118&quot;&gt;#5118&lt;/a&gt;,
                  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;replace_extension&lt;/span&gt;&lt;/code&gt;
                  doesn't work as specified in documentation. The documentation,
                  implementation, and test cases have all had fixes applied. The
                  documentation had failed to mention that any existing extension
                  is removed. The behavior for simple cases has been reverted to
                  the Version 2 behavior, but with corrections so that complex replacements
                  now work. Two test cases from &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5118&quot;&gt;#5118&lt;/a&gt;
                  have been added.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3737&quot;&gt;#3737&lt;/a&gt;,
                  Boost.Filesystem does not compile on Windows Mobile. On Windows,
                  &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; is no longer included.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4065&quot;&gt;#4065&lt;/a&gt;,
                  Boost Filesystem lexicographic path comparison inconsistent. This
                  required multiple source code bug fixes and code cleanup, correcting
                  problems not related to lexicographical issues.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add class path member function compare for consistency with std::string.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Tighten &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FILESYSTEM_DYN_LINK&lt;/span&gt;&lt;/code&gt;
                  and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FILESYSTEM_STATIC_LINK&lt;/span&gt;&lt;/code&gt;
                  logic in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;filesystem&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                  so that one or the other is always defined, and both being defined
                  is a &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#error&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6690&quot;&gt;#6690&lt;/a&gt;
                  and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6737&quot;&gt;#6737&lt;/a&gt;,
                  resolving static linking related problems with VC++ 8 through 11.
                  Note that this fix may reintroduce codecvt thread safety problems
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4889&quot;&gt;#4889&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6320&quot;&gt;#6320&lt;/a&gt;,
                  for these compilers if static linking is used.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;+=&lt;/span&gt;&lt;/code&gt;
                  and concat functions to tack on things like suffixes or numbers.
                  Suggested by Ed Smith-Rowland and others.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6809&quot;&gt;#6809&lt;/a&gt;,
                  Implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;filesystem&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; method for MS Windows is wrong,
                  by adding &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;MOVEFILE_COPY_ALLOWED&lt;/span&gt;&lt;/code&gt;
                  to deal with renames across drives, volumes, file systems. Fix
                  has no effect on non-Windows systems.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6819&quot;&gt;#6819&lt;/a&gt;,
                  A path operand with a source that was a one character array was
                  treated as empty, even if it wasn't empty. Such arrays can occur
                  in unions or in code using C variable length array idioms.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6932&quot;&gt;#6932&lt;/a&gt;,
                  create_directories throws exception even if &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt;
                  is specified.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/foreach/&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Revert fix for &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6131&quot;&gt;#6131&lt;/a&gt;
                  which caused more harm than good.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        the return type of comparable projected point strategy for
                        integer points was wrong (integer), fixed
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        several robustness issues in intersection of segments and
                        polygons, fixed
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        invalid intersection output is filtered out
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        disjoint for multi_polygon's might incorrectly return true,
                        fixed
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Solved tickets
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6585&quot;&gt;6585&lt;/a&gt;
                        patch for alternative syntax multipoint, applied
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6584&quot;&gt;6584&lt;/a&gt;
                        patch for bug in distance, applied
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5730&quot;&gt;5730&lt;/a&gt;
                        same issue as 6584, fixed
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6166&quot;&gt;6166&lt;/a&gt;
                        patch for missing transformation, applied
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6696&quot;&gt;6696&lt;/a&gt;
                        invalid intersection output, was (by chance) already fixed
                        in Trunk before reported
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Additional functionality
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        added algorithm &amp;quot;touches&amp;quot; (OGC SF compliant) for
                        *polygon/*polygon
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4622&quot;&gt;#4622&lt;/a&gt;
                        clear_vertex on a vertex with a self-loop can cause a segmentation
                        fault.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6033&quot;&gt;#6033&lt;/a&gt;
                        Lowpoint map calculated by biconnected_components(...) is
                        sometimes wrong.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6242&quot;&gt;#6242&lt;/a&gt;
                        isomorphism doesn't reset mapping.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6435&quot;&gt;#6435&lt;/a&gt;
                        cube_topology documentation should say 3D, not 2D.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6520&quot;&gt;#6520&lt;/a&gt;
                        small_world_1_70_6_0p02.png is broken in documentation of
                        graph_parallel.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6564&quot;&gt;#6564&lt;/a&gt;
                        BGL copy constructor for subgraph does not track local vertices/edges.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6573&quot;&gt;#6573&lt;/a&gt;
                        BGL: boost::isomorphism routine fails with large graphs.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6583&quot;&gt;#6583&lt;/a&gt;
                        Dijkstra Visitor Concept docs probably show wrong type for
                        variable.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6647&quot;&gt;#6647&lt;/a&gt;
                        BGL strong_components do not compile on MSVC 8.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6656&quot;&gt;#6656&lt;/a&gt;
                        Dependent type in subgraph used without typename.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6707&quot;&gt;#6707&lt;/a&gt;
                        is_straight_line_drawing.hpp missing #include &amp;lt;map&amp;gt;.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6708&quot;&gt;#6708&lt;/a&gt;
                        Make bool boost::intersects() in is_straight_line_drawing.hpp
                        inline?
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6739&quot;&gt;#6739&lt;/a&gt;
                        Cannot use write_graphviz_dp with a constified subgraph.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6858&quot;&gt;#6858&lt;/a&gt;
                        boost::get() calls wrongly resolved by g++.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6892&quot;&gt;#6892&lt;/a&gt;
                        VertexIndexGraph concept not required for bron_kerbosch_all_cliques().
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Other bugs and warnings not in Trac.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Support &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tuple&lt;/span&gt;&lt;/code&gt;
                  when available (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6806&quot;&gt;#6806&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Avoid gcc's &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wfloat&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;equal&lt;/span&gt;&lt;/code&gt;
                  warning (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6771&quot;&gt;#6771&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add deprecation warning to the long deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;container_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iostreams/&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Improved gzip support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5908&quot;&gt;#5908&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Update tests for latest Boost.Filesystem and Boost.Test.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix some documentation errors (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6530&quot;&gt;#6530&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6650&quot;&gt;#6650&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iterator/&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5127&quot;&gt;#5127&lt;/a&gt;
                        Incorrect result_of usage in transform_iterator
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5697&quot;&gt;#5697&lt;/a&gt;
                        iterator_facade::operator-&amp;gt; is broken for proxy references
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_array/&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Concepts bug fix and Workaround for Visual Studio 2010 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4874&quot;&gt;#4874&lt;/a&gt;)
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix to assert.cpp test case (&lt;a href=&quot;https://svn.boost.org/trac/boost/changeset/78498&quot;&gt;Patch&lt;/a&gt;)
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_lexical_cast&lt;/span&gt;&lt;/code&gt; exception is
                  now globaly visible and can be catched even if code is compiled
                  with -fvisibility=hidden
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Now it is possible to compile and use library with disabled exceptions
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5800&quot;&gt;#5800&lt;/a&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Better performance, less memory usage and bugfixes for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator_range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;character_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt;
                  conversions
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed bugs and warnings: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6645&quot;&gt;#6645&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6562&quot;&gt;#6562&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6812&quot;&gt;#6812&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6852&quot;&gt;#6852&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6717&quot;&gt;#6717&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6670&quot;&gt;#6770&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6504&quot;&gt;#6504&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/locale/&quot;&gt;Locale&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed build issues with STLPort library
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Boost.System is now required depenency
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6635&quot;&gt;#6635&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6833&quot;&gt;#6833&lt;/a&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Promoted math constants to be 1st class citizens, including convenient
                  access to the most widely used built-in float, double, long double
                  via three namespaces.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added the Owen's T function and Skew Normal distribution written
                  by Benjamin Sobotta.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added Hankel functions.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Corrected issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6627&quot;&gt;#6627
                  nonfinite_num_put formatting of 0.0 is incorrect&lt;/a&gt; based
                  on a patch submitted by K R Walker.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed constant initialization mechanism so that it is thread
                  safe even for user-defined types, also so that user defined types
                  get the full precision of the constant, even when &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&lt;/code&gt;
                  does not. So for example 128-bit rational approximations will work
                  with UDT's and do the right thing, even though &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;
                  &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&lt;/code&gt; may be only 64 or
                  80 bits.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed issue in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bessel_jy&lt;/span&gt;&lt;/code&gt;
                  which causes Y[sub 8.5](4[pi]) to yield a NaN.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;MSM&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  eUML : better syntax for front-ends defined with eUML as transition
                  table only. Caution: Breaking Change!&lt;a href=&quot;http://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table&quot;&gt;http://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table&lt;/a&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: graph building was only working if initial_state defined
                  as a sequence.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: flags defined for a Terminate or Interrupt state do not
                  break the blocking function of these states any more.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: multiple deferred events from several regions were not
                  working in every case.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: visitor was passed by value to submachines.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: no_transition was not called for submachines who send an
                  event to themselves.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed warnings with gcc.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/program_options/&quot;&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Improved error reporting (&lt;a href=&quot;https://svn.boost.org/trac/boost/changeset/77827&quot;&gt;Patch
                  from Leo Goodstadt&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Support for customizing name of option's value in help messages
                  (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4781&quot;&gt;#4781&lt;/a&gt;)
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed compilation with gcc 4.7 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6790&quot;&gt;#6790&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_map/&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6539&quot;&gt;#6539&lt;/a&gt;
                        the return type of get() is not documented correctly.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6721&quot;&gt;#6721&lt;/a&gt;
                        property_map_traits documentation does not mention reference.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;-based
                  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; if and
                  only if the compiler implements N3276.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  For C++11, force parameter to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;eval_if_c&lt;/span&gt;&lt;/code&gt;
                  and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;if_c&lt;/span&gt;&lt;/code&gt; to be &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Disable &lt;tt&gt;'__forceinline not inlined'&lt;/tt&gt; warning
                  on msvc.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6498&quot;&gt;#6498&lt;/a&gt;
                        boost::ratio won't compile with default settings.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/scope_exit/&quot;&gt;ScopeExit&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  New Features:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Use variadic macros to specify captures as commas-separated
                        lists (but kept preprocessor sequence syntax for backward
                        compatibility).
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Capture the object in scope using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;this_&lt;/span&gt;&lt;/code&gt;.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Support empty captures using &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/code&gt;.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Implicit lambda-like captures using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_SCOPE_EXIT_ALL&lt;/span&gt;&lt;/code&gt;
                        on compilers that support C++11 lambda functions.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  New Features:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1850&quot;&gt;#1850&lt;/a&gt;
                        Request for unlock_guard to compliment lock_guard.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2637&quot;&gt;#2637&lt;/a&gt;
                        Request for shared_mutex duration timed_lock and timed_lock_shared.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2741&quot;&gt;#2741&lt;/a&gt;
                        Proposal to manage portable and non portable thread attributes.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3567&quot;&gt;#3567&lt;/a&gt;
                        Request for shared_lock_guard.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6194&quot;&gt;#6194&lt;/a&gt;
                        Adapt to Boost.Move.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6195&quot;&gt;#6195&lt;/a&gt;
                        c++11 compliance: Provide the standard time related interface
                        using Boost.Chrono.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6217&quot;&gt;#6217&lt;/a&gt;
                        Enhance Boost.Thread shared mutex interface following Howard
                        Hinnant proposal.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6224&quot;&gt;#6224&lt;/a&gt;
                        c++11 compliance: Add the use of standard noexcept on compilers
                        supporting them.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6226&quot;&gt;#6226&lt;/a&gt;
                        c++11 compliance: Add explicit bool conversion from locks.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6228&quot;&gt;#6228&lt;/a&gt;
                        Add promise constructor with allocator following the standard
                        c++11.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6230&quot;&gt;#6230&lt;/a&gt;
                        c++11 compliance: Follows the exception reporting mechanism
                        as defined in the c++11.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6266&quot;&gt;#6266&lt;/a&gt;
                        Breaking change: thread destructor should call terminate
                        if joinable.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6269&quot;&gt;#6269&lt;/a&gt;
                        Breaking change: thread move assignment should call terminate
                        if joinable.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6272&quot;&gt;#6272&lt;/a&gt;
                        c++11 compliance: Add thread::id hash specialization.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6273&quot;&gt;#6273&lt;/a&gt;
                        c++11 compliance: Add cv_status enum class and use it on
                        the conditions wait functions.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6231&quot;&gt;#6231&lt;/a&gt;
                        Add BasicLockable requirements in the documentation to follow
                        c++11.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6342&quot;&gt;#6342&lt;/a&gt;
                        c++11 compliance: Adapt the one_flag to the c++11 interface.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6671&quot;&gt;#6671&lt;/a&gt;
                        upgrade_lock: missing mutex and release functions.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6672&quot;&gt;#6672&lt;/a&gt;
                        upgrade_lock:: missing constructors from time related types.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6675&quot;&gt;#6675&lt;/a&gt;
                        upgrade_lock:: missing non-member swap.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Added missing packaged_task::result_type and packaged_task::
                        constructor with allocator.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Added packaged_task::reset()
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2575&quot;&gt;#2575&lt;/a&gt;
                        Bug- Boost 1.36.0 on Itanium platform.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4345&quot;&gt;#4345&lt;/a&gt;
                        thread::id and joining problem with cascade of threads.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4921&quot;&gt;#4921&lt;/a&gt;
                        BOOST_THREAD_USE_DLL and BOOST_THREAD_USE_LIB are crucial
                        and need to be documented.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5013&quot;&gt;#5013&lt;/a&gt;
                        documentation: boost::thread: pthreas_exit causes terminate().
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5173&quot;&gt;#5173&lt;/a&gt;
                        boost::this_thread::get_id is very slow.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5351&quot;&gt;#5351&lt;/a&gt;
                        interrupt a future get boost::unknown_exception.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5516&quot;&gt;#5516&lt;/a&gt;
                        Upgrade lock is not acquired when previous upgrade lock releases
                        if another read lock is present.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5990&quot;&gt;#5990&lt;/a&gt;
                        shared_future&amp;lt;T&amp;gt;::get() has wrong return type.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6174&quot;&gt;#6174&lt;/a&gt;
                        packaged_task doesn't correctly handle moving results.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6222&quot;&gt;#6222&lt;/a&gt;
                        Compile error with SunStudio: unique_future move.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6673&quot;&gt;#6673&lt;/a&gt;
                        shared_lock: move assign doesn't works with c++11.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6674&quot;&gt;#6674&lt;/a&gt;
                        shared_mutex: try_lock_upgrade_until doesn't works.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Fix issue signaled on the ML with task_object(task_object
                        const&amp;amp;) in presence of task_object(task_object&amp;amp;&amp;amp;)
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix equality for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_multiset&lt;/span&gt;&lt;/code&gt;
                  and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_multimap&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Implement &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;reserve&lt;/span&gt;&lt;/code&gt;
                  (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6857&quot;&gt;#6857&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Avoid gcc's &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wfloat&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;equal&lt;/span&gt;&lt;/code&gt;
                  and &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wshadow&lt;/span&gt;&lt;/code&gt;
                  warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6190&quot;&gt;#6190&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6771&quot;&gt;#6771&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix namespace issue with bcp (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6905&quot;&gt;#6905&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix Sun workarounds (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6784&quot;&gt;#6784&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Some internal changes to bucket allocation.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  See the &lt;a href=&quot;http://www.boost.org/doc/html/unordered/changes.html#unordered.changes.boost_1_50_0&quot;&gt;change
                  log&lt;/a&gt; for full details.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Wave V2.3.2, see the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;
                  for details.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Remove very ugly &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;/code&gt;
                  hack with a slightly less ugly one.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Replace MPL assert with static assert since it's problematic in
                  C++11, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6846&quot;&gt;#6846&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div id=&quot;version_1_50_0.patches.compilers_tested&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        Boost's primary test compilers are:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            Linux:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Intel: 11.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  LLVM Clang 2.8
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            OS X:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Intel: 11.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 4.4.4
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode: 4.4.4
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Windows:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual C++ 8.0, 9.0, 10.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1, 4.7.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            FreeBSD:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC 4.2.1, 32 and 64 bit
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            QNX:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  QCC, C++0x mode: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
        Boost's additional test compilers include:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            Linux:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang from subversion
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode: 4.3.4, 4.4.4, 4.5.3, 4.6.2
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  pgCC: 11.9
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Intel: 10.1, 11.1, 12.0, 12.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual Age 10.1
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            OS X:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang from subversion
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Intel 11.1, 12.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 4.4.4
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode: 4.4.4
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Windows:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual C++ 8.0, 10.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual C++ with STLport: 9.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual C++, Windows Mobile 5, with STLport: 9.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, mingw: 4.4.0, 4.4.7, 4.5.2, 4.5.4, 4.6.4, 4.7.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode, mingw: 4.5.2
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            AIX:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  IBM XL C/C++ Enterprise Edition, V12.1.0.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            FreeBSD:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC 4.2.1, 32 and 64 bit
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Solaris:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Sun 5.10
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div id=&quot;version_1_50_0.patches.acknowledgements&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
        &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
        Vladimir Prus and Marshall Clow managed this release.
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.49.0</title><link>http://www.boost.org/users/history/version_1_49_0.html</link><guid>http://www.boost.org/users/history/version_1_49_0.html</guid><pubDate>Fri, 24 Feb 2012 16:20:32 -0500</pubDate><description>



  &lt;div id=&quot;version_1_49_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/heap/index.html&quot;&gt;Heap&lt;/a&gt;:&lt;/span&gt;
  Priority queue data
          structures, from Tim Blechmann.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_49_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a new class template &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_waitable_timer&lt;/span&gt;&lt;/code&gt;
                based around the C++11 clock type requirements. It may be used with
                the clocks from the C++11 &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                library facility or, if those are not available, Boost.Chrono. The
                typedefs &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;high_resolution_timer&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;steady_timer&lt;/span&gt;&lt;/code&gt; and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;system_timer&lt;/span&gt;&lt;/code&gt; may
                be used to create timer objects for the standard clock types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;object_handle&lt;/span&gt;&lt;/code&gt;
                class for performing waits on Windows kernel objects. Thanks go to
                Boris Schaeling for contributing substantially to the development
                of this feature.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Linux, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; can return EAGAIN in certain circumstances.
                Remapped this to another error so that it doesn't look like a non-blocking
                operation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6048&quot;&gt;#6048&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a compile error on NetBSD (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6098&quot;&gt;#6098&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed deadlock on Mac OS X (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6275&quot;&gt;#6275&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a regression in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;buffered_write_stream&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6310&quot;&gt;#6310&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a non-paged pool &amp;quot;leak&amp;quot; on Windows when an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt; is repeatedly run without
                anything to do (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6321&quot;&gt;#6321&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reverted earlier change to allow some speculative operations to be
                performed without holding the lock, as it introduced a race condition
                in some multithreaded scenarios.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug where the second buffer in an array of two buffers may
                be ignored if the first buffer is empty.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug Fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6092&quot;&gt;#6092&lt;/a&gt;
                      Input from non integral durations makes the compiler fail.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6093&quot;&gt;#6093&lt;/a&gt;
                      [1/3]second fails as valid duration input.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6113&quot;&gt;#6113&lt;/a&gt;
                      duplicate symbol when BOOST_CHRONO_HEADER_ONLY is defined.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6243&quot;&gt;#6243&lt;/a&gt;
                      Sandia-pgi-11.9: more than one instance of overloaded function
                      &amp;quot;min&amp;quot; matches.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6257&quot;&gt;#6257&lt;/a&gt;
                      process_cpu_clock::now() on linux gives time_points 1/1000
                      times.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6499&quot;&gt;#6499&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6336&quot;&gt;#6336&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6335&quot;&gt;#6335&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6287&quot;&gt;#6287&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6205&quot;&gt;#6205&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4383&quot;&gt;#4383&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
                support for both C++11 and C++03 compilers through an internal &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;/code&gt; clone.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/filesystem/&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3714&quot;&gt;#3714&lt;/a&gt;,
                Added test cases and fixes for class path errors when assignment
                or append used self or portion of self as source.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4889&quot;&gt;#4889&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6320&quot;&gt;#6320&lt;/a&gt;,
                Locale codecvt_facet not thread safe on Windows. Move Windows, Mac
                OS X, locale and codecvt facet back to namespace scope. POSIX except
                OS X uses local static initialization (IE lazy) to ensure exceptions
                are catchable if environmental variables are misconfigured and to
                avoid use of locale(&amp;quot;&amp;quot;) if not actually used.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5652&quot;&gt;#5652&lt;/a&gt;,
                recursive_directory_iterator fails on cyclic symbolic links. Thanks
                to Daniel Aarno for the patch.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5653&quot;&gt;#5653&lt;/a&gt;,
                recursive_directory_iterator(error_code) can still throw filesystem_error.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5900&quot;&gt;#5900&lt;/a&gt;,
                directory_iterator access violation on Windows if error is thrown.
                Thanks to Andreas Eckleder for the patch.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5900&quot;&gt;#5900&lt;/a&gt;
                comment 2, a bug in director_iterator construction with error_code
                argument that caused increment to be called without the ec argument
                being passed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5989&quot;&gt;#5989&lt;/a&gt;
                by cleaning up test suite path_test.cpp code even though the ticket
                itself was not a defect, and clarifying docs; iteration over a path
                yields generic format.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5592&quot;&gt;#5592&lt;/a&gt;,
                Change Windows codecvt processing from CP_THREAD_ACP to CP_ACP.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Operations function fixes for PGI compiler, thanks to Noel Belcourt.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Relax permissions test to reflect reality, particularly on the Sandia
                test platforms.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/foreach/&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix for &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6131&quot;&gt;#6131&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Distance for multi-geometries ignored specified distance strategy.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      In difference for polygon/multi_polygon (reported 2011/10/24
                      on GGL-list).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Raise exception for calculation of distances of multi-geometrie(s)
                      where one of them is empty
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Multi DSV did not correctly use settings.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Self-intersections could sometimes be missed (introduced in
                      1.48).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Convex hull crashed on empty range (e.g. empty multi point).
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Solved tickets
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6028&quot;&gt;#6028&lt;/a&gt;
                      Documentation: closure.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6178&quot;&gt;#6178&lt;/a&gt;
                      Missing headerfile.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6021&quot;&gt;#6021&lt;/a&gt;
                      convex hull of multipoint.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Additional functionality
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Support for line/polygon intersections and differences
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Support for convert of segment/box of different point types
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Support for append for multi point
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Scalar functions (distance, area, length, perimeter) now throw
                      an empty_input_exception on empty input
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Updated support status
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Internal changes
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Updates in specializations/not_implemented for distance/convert/assign/area
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Move of wkt/dsv to io folder, making domains redundant
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Strategy concepts assigned to zero to avoid clang warnings
                      (patched by Vishnu)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5881&quot;&gt;#5881&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6033&quot;&gt;#6033&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6061&quot;&gt;#6061&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6137&quot;&gt;#6137&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6246&quot;&gt;#6246&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6239&quot;&gt;#6239&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6293&quot;&gt;#6293&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6306&quot;&gt;#6306&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6313&quot;&gt;#6313&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6371&quot;&gt;#6371&lt;/a&gt;,
                plus others not in Trac.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Re-enabled LEDA graph support (thanks to Jens Muller for the patch).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added documentation for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;edge_predecessor_recorder&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/icl/&quot;&gt;Icl&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed tickets &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6095&quot;&gt;#6095&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6210&quot;&gt;#6210&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added move semantics for constructors, assignment operators and binary
                operators.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6531&quot;&gt;#6531&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6412&quot;&gt;#6412&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6398&quot;&gt;#6398&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6340&quot;&gt;#6340&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6319&quot;&gt;#6319&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6287&quot;&gt;#6287&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6265&quot;&gt;#6265&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6233&quot;&gt;#6233&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6147&quot;&gt;#6147&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6134&quot;&gt;#6134&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6058&quot;&gt;#6058&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6054&quot;&gt;#6054&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5772&quot;&gt;#5772&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5738&quot;&gt;#5738&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5622&quot;&gt;#5622&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5552&quot;&gt;#5552&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5518&quot;&gt;#5518&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4655&quot;&gt;#4655&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4452&quot;&gt;#4452&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4383&quot;&gt;#4383&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4297&quot;&gt;#4297&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed timed functions in mutex implementations to fulfill POSIX requirements:
                &lt;em&gt;Under no circumstance shall the function fail with a timeout
                if the mutex can be locked immediately. The validity of the abs_timeout
                parameter need not be checked if the mutex can be locked immediately.&lt;/em&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6347&quot;&gt;#6347&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6223&quot;&gt;#6223&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6153&quot;&gt;#6153&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs and warnings: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6127&quot;&gt;#6127&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6132&quot;&gt;#6132&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6159&quot;&gt;#6159&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6182&quot;&gt;#6182&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6186&quot;&gt;#6186&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6193&quot;&gt;#6193&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6264&quot;&gt;#6264&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6290&quot;&gt;#6290&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6298&quot;&gt;#6298&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6400&quot;&gt;#6400&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better performance and less memory usage for boost::container::basic_string
                conversions.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/locale/&quot;&gt;Locale&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed incorrect use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;MultiByteToWideChar&lt;/span&gt;&lt;/code&gt;
                in detection of invalid input sequences.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6417&quot;&gt;#6417&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6183&quot;&gt;#6183&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6185&quot;&gt;#6185&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6395&quot;&gt;#6395&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6396&quot;&gt;#6396&lt;/a&gt;,
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_tree&quot;&gt;PropertyTree&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes for bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4840&quot;&gt;#4840&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5259&quot;&gt;#5259&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5281&quot;&gt;#5281&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5944&quot;&gt;#5944&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5757&quot;&gt;#5757&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5710&quot;&gt;#5710&lt;/a&gt;,
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5307&quot;&gt;#5307&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Force some functions to be inline, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5735&quot;&gt;#5735&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add user documentation for per-domain &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;as_expr&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;as_child&lt;/span&gt;&lt;/code&gt;; other
                doc tweaks.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix some buggy and over-complicated example programs.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add some missing copyright notices.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Spirit V2.5.2, see the '&lt;a href=&quot;http://www.boost.org/doc/libs/1_49_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_5_2.html&quot;&gt;What's
                New&lt;/a&gt;' section for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/2309&quot;&gt;#2309&lt;/a&gt;
                      Lack of g++ symbol visibility support in Boost.Thread.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/2639&quot;&gt;#2639&lt;/a&gt;
                      documentation should be extended(defer_lock, try_to_lock, ...).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3639&quot;&gt;#3639&lt;/a&gt;
                      Boost.Thread doesn't build with Sun-5.9 on Linux.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3762&quot;&gt;#3762&lt;/a&gt;
                      Thread can't be compiled with winscw (Codewarrior by Nokia).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3885&quot;&gt;#3885&lt;/a&gt;
                      document about mix usage of boost.thread and native thread
                      api.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3975&quot;&gt;#3975&lt;/a&gt;
                      Incorrect precondition for promise::set_wait_callback().
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4048&quot;&gt;#4048&lt;/a&gt;
                      thread::id formatting involves locale
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4315&quot;&gt;#4315&lt;/a&gt;
                      gcc 4.4 Warning: inline ... declared as dllimport: attribute
                      ignored.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4480&quot;&gt;#4480&lt;/a&gt;
                      OpenVMS patches for compiler issues workarounds.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4819&quot;&gt;#4819&lt;/a&gt;
                      boost.thread's documentation misprints.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5040&quot;&gt;#5040&lt;/a&gt;
                      future.hpp in boost::thread does not compile with /clr.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5423&quot;&gt;#5423&lt;/a&gt;
                      thread issues with C++0x.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5502&quot;&gt;#5502&lt;/a&gt;
                      race condition between shared_mutex timed_lock and lock_shared.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5594&quot;&gt;#5594&lt;/a&gt;
                      boost::shared_mutex not fully compatible with Windows CE.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5617&quot;&gt;#5617&lt;/a&gt;
                      boost::thread::id copy ctor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5739&quot;&gt;#5739&lt;/a&gt;
                      set-but-not-used warnings with gcc-4.6.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5826&quot;&gt;#5826&lt;/a&gt;
                      threads.cpp: resource leak on threads creation failure.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5839&quot;&gt;#5839&lt;/a&gt;
                      thread.cpp: ThreadProxy leaks on exceptions.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5859&quot;&gt;#5859&lt;/a&gt;
                      win32 shared_mutex constructor leaks on exceptions.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6100&quot;&gt;#6100&lt;/a&gt;
                      Compute hardware_concurrency() using get_nprocs() on GLIBC
                      systems.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6141&quot;&gt;#6141&lt;/a&gt;
                      Compilation error when boost.thread and boost.move are used
                      together.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6168&quot;&gt;#6168&lt;/a&gt;
                      recursive_mutex is using wrong config symbol (possible typo).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6175&quot;&gt;#6175&lt;/a&gt;
                      Compile error with SunStudio.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6200&quot;&gt;#6200&lt;/a&gt;
                      patch to have condition_variable and mutex error better handle
                      EINTR.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6207&quot;&gt;#6207&lt;/a&gt;
                      shared_lock swap compiler error on clang 3.0 c++11.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6208&quot;&gt;#6208&lt;/a&gt;
                      try_lock_wrapper swap compiler error on clang 3.0 c++11.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                On compilers without rvalue references, the containers are no longer
                movable by default, as move emulation was causing some odd quirks
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6167&quot;&gt;#6167&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6311&quot;&gt;#6311&lt;/a&gt;).
                Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_UNORDERED_USE_MOVE&lt;/span&gt;&lt;/code&gt;
                to make them movable - Boost.Move is still used for elements regardless.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix sequence point warning (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6370&quot;&gt;#6370&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better support for C++11 compilers using older standard libraries.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/uuid/&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6258&quot;&gt;#6258&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5325&quot;&gt;#5325&lt;/a&gt;
                (sha1 implementation handles messages as long as the specification)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                progress on &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6118&quot;&gt;#6118&lt;/a&gt;
                (there are fewer warnings)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Eliminate some unused variable warnings on gcc.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_49_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang 2.8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.5.2, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1, 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1, 32 and 64 bit.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC, C++0x mode: 4.4.2, 4.6.1, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.2, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.3.4, 4.4.4, 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.9
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                PathScale: 4.0.8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age 10.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode, mingw: 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw 64-bit: 4.4.7, 4.5.4, 4.6.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition, V11.1.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun 5.10
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_49_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.48.0</title><link>http://www.boost.org/users/history/version_1_48_0.html</link><guid>http://www.boost.org/users/history/version_1_48_0.html</guid><pubDate>Tue, 15 Nov 2011 10:47:30 -0500</pubDate><description>&lt;x&gt;
  
  
  
  &lt;div id=&quot;version_1_48_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/index.html&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
  Standard
          library containers and extensions, from Ion Gaztañaga.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/locale/index.html&quot;&gt;Locale&lt;/a&gt;:&lt;/span&gt;
  Provide localization
          and Unicode handling tools for C++, from Artyom Beilis.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/html/move.html&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
  Portable move semantics
          for C++03 and C++11 compilers, from Ion Gaztañaga.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_48_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented various performance improvements, including:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Using thread-local operation queues in single-threaded use
                      cases (i.e. when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;concurrency_hint&lt;/span&gt;&lt;/code&gt;
                      is 1) to eliminate a lock/unlock pair.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Allowing some &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;
                      speculative operations to be performed without holding the
                      lock.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Improving locality of reference by performing an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;'s I/O operation
                      immediately before the corresponding handler is called. Also
                      improves scalability across CPUs.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Specialising asynchronous read and write operations for buffer
                      sequences that are arrays (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;/code&gt;
                      or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;/code&gt;) of exactly two buffers.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compile error in regex overload of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_until&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5688&quot;&gt;#5688&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Windows-specific compile error by explicitly specifying the
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                function from the global namespace (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5722&quot;&gt;#5722&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt;
                implementation to not read clock unless the timer heap is non-empty.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed SSL buffer sizes to be large enough to hold a complete TLS
                record (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5854&quot;&gt;#5854&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed synchronous &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
                operations so that they obey the user's non-blocking setting (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5756&quot;&gt;#5756&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to set &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fd_set&lt;/span&gt;&lt;/code&gt;
                size at runtime when using Windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disabled MSVC warning due to const qualifier being applied to function
                type.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed crash that occurs when using Intel C++ compiler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5763&quot;&gt;#5763&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed OpenSSL initialisation to support all available algorithms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed SSL error mapping when session is gracefully shut down.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added some latency test programs.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clarified that a read operation ends when the buffer is full (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5999&quot;&gt;#5999&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed exception safety issue in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;
                initialisation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6006&quot;&gt;#6006&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Made number of strand implementations configurable via &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_STRAND_IMPLEMENTATIONS&lt;/span&gt;&lt;/code&gt;
                macro.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_ENABLE_SEQUENTIAL_STRAND_ALLOCATION&lt;/span&gt;&lt;/code&gt;
                flag which switches strand allocation to use a round-robin approach
                rather than hashing.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed potential strand starvation issue that can occur when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                is used.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/index.html&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5979&quot;&gt;#5979&lt;/a&gt;
                Added chrono rounding utilities as defined by Howard Hinnant &lt;a href=&quot;http://home.roadrunner.com/~hinnant/duration_io/chrono_util.html&quot;&gt;here&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5978&quot;&gt;#5978&lt;/a&gt;
                Add BOOST_CHRONO_HAS_PROCESS_CLOCKS to know if process clocks are
                available.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5998&quot;&gt;#5998&lt;/a&gt;
                Make possible to disable hybrid error handling.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5906&quot;&gt;#5906&lt;/a&gt;
                Take in account the constexpr as defined in the standard.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5907&quot;&gt;#5907&lt;/a&gt;
                Take in account noexcept for compilers supporting it.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some bugs.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/doc/html/chrono/appendices.html#chrono.appendices.history&quot;&gt;History&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_DECLTYPE_N3276&lt;/span&gt;&lt;/code&gt;
                config macro. (See &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf&quot;&gt;N3276&lt;/a&gt;.)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;single_view&lt;/span&gt;&lt;/code&gt;
                a random access fusion sequence.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove bogus compile-time asserts from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;distance&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cleaner implementation of segmented Fusion.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Robustness issue, in some circumstances the union failed to
                      output. Fixed.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Robustness issue, in some circumstances the calculated intersection
                      point was outside the segment. Fixed.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Concept issue, cartesian intersect didn't understand segments
                      other than the provided one. Fixed.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Sometimes self-intersections in linestrings were missed. Fixed.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The fusion coordinate system was not registered correctly.
                      Fixed.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Solved tickets:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5726&quot;&gt;#5726&lt;/a&gt;
                      (Segment intersection algorithm still assumes 'first', 'second'
                      members)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5744&quot;&gt;#5744&lt;/a&gt;
                      (mistake fusion adapt example)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5748&quot;&gt;#5748&lt;/a&gt;
                      (need include &amp;lt;boost/foreach.hpp&amp;gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5954&quot;&gt;#5954&lt;/a&gt;
                      (distance_pythagoras skips sqrt() step)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improvements on algorithms:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Checking self-intersections is now not done automatically,
                      this can blast performance.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Besides that, checking self-intersections is made faster.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Intersections now avoid outputting duplicate points. So they
                      output the minimal set.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Additional algorithms:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      covered_by: within is defined as &amp;quot;within, not on boundary&amp;quot;.
                      covered_by is &amp;quot;within or on boundary&amp;quot;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Additional functionality:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      within: strategies can now be specified for within&amp;lt;point,
                      box&amp;gt; and within&amp;lt;box, box&amp;gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      convert: a much broader range of conversions is supported
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      assign: idem, (currently partly) synonym for convert (but reversed
                      arguments)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Additional coordinate types:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Basic support for Boost.Rational
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5185&quot;&gt;#5185&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5506&quot;&gt;#5506&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5813&quot;&gt;#5813&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5919&quot;&gt;#5919&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various other bug fixes not in Trac.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed edge_descriptor type for reverse_graph to a new data type
                to avoid ambiguities with the edge_descriptor of the underlying graph.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2796&quot;&gt;#2796&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4031&quot;&gt;#4031&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4251&quot;&gt;#4251&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4452&quot;&gt;#4452&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4895&quot;&gt;#4895&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5077&quot;&gt;#5077&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5120&quot;&gt;#5120&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5123&quot;&gt;#5123&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5230&quot;&gt;#5230&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5197&quot;&gt;#5197&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5287&quot;&gt;#5287&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5294&quot;&gt;#5294&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5306&quot;&gt;#5306&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5308&quot;&gt;#5308&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5392&quot;&gt;#5392&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5409&quot;&gt;#5409&lt;/a&gt;,
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support to customize offset_ptr and allow creating custom managed
                segments that might be shared between 32 and 64 bit processes.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Shared memory in windows has again filesystem lifetime: kernel bootstamp
                and WMI use to get a reliable timestamp was causing a lot of trouble.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4797&quot;&gt;#4797&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5165&quot;&gt;#5165&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5183&quot;&gt;#5183&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5191&quot;&gt;#5191&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added code to work with Inf and NaN values on any platform (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5689&quot;&gt;#5689&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New Quickbook documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5723&quot;&gt;#5723&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better performance and less memory usage for many combinations of
                Source and Target types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better performance for C locale.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new series evaluation methods to the cyclic Bessel I, J, K
                and Y functions. Also taken great care to avoid spurious over and
                underflow of these functions. Fixes issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5560&quot;&gt;#5560&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added an example of using Inverse Chi-Squared distribution for Bayesian
                statistics, provided by Thomas Mang.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added tests to use improved version of lexical_cast which handles
                C99 nonfinites without using global facets.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Corrected wrong out-of-bound uniform distribution CDF complement
                values &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5733&quot;&gt;#5733&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled long double support on OpenBSD (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6014&quot;&gt;#6014&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed nextafter and related functions to behave in the same way
                as other implementations - so that nextafter(+INF, 0) is a finite
                value (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5832&quot;&gt;#5832&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed tuple include configuration to fix issue when using in conjunction
                with Boost.Tr1 (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5934&quot;&gt;#5934&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed class eps_tolerance to behave correctly when both ends of
                the range are zero (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6001&quot;&gt;#6001&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed missing include guards on prime.hpp (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5927&quot;&gt;#5927&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed unused/undocumented constants from constants.hpp (issue
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5982&quot;&gt;#5982&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed missing std:: prefix in nonfinite_num_facets.hpp (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5914&quot;&gt;#5914&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minor patches for Cray compiler compatibility.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;MSM&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                eUML: added easier event reprocessing: process(event_) and reprocess()
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Rewrite of internal transition tables. There were a few bugs (failing
                recursivity in internal transition tables of sub-sub machines) and
                a missing feature (unused internal transition table of the main state
                machine).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfixes
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Reverted favor_compile_time policy to Boost 1.46 state
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      none event now is convertible from any other event
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      eUML and pseudo exit states
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed not working Flag_AND
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed rare bugs causing multiple processing of the same event
                      in a submachine whose transition table contains this event
                      and a base event of it.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      gcc warnings about unused variables
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Breaking change: the new internal transition table feature causes
                a minor breaking change. In a submachine, the &amp;quot;Fsm&amp;quot; template
                parameter for guards / actions of an internal table declared using
                internal_transition_table now is the submachine, not the higher-level
                state machine. Internal transitions declared using internal rows
                in the higher-level state machine keep their behavior (the &amp;quot;Fsm&amp;quot;
                parameter is the higher-level state machine). To sum up, the internal
                transition &amp;quot;Fsm&amp;quot; parameter is the closest state machine
                containing this transition.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/conversion/index.html&quot;&gt;Numeric.Conversion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added numeric_cast_traits; see '&lt;a href=&quot;http://www.boost.org/doc/libs/1_48_0/libs/numeric/conversion/doc/html/boost_numericconversion/type_requirements_and_user_defined_types_support.html#boost_numericconversion.type_requirements_and_user_defined_types_support.udts_with_numeric_cast&quot;&gt;numeric_cast_traits&lt;/a&gt;'
                for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Breaking Change:&lt;/em&gt; Reduce numbers
                of operator overloads by using rvalue references on compilers that
                support them. Any user code that defines additional operator overloads
                on Proto expressions could potentially be rendered ambiguous by this
                change. The solution is to use a grammar to disable Proto's operators
                that are made ambiguous by any user-defined operators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Move definitions of Proto tag types into an ADL-blocking namespace.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add second template parameter to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;siwtch_&lt;/span&gt;&lt;/code&gt;
                to control dispatching to cases.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Allow dependent domains to be specified with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_EXTENDS&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_BASIC_EXTENDS&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/698&quot;&gt;#698&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5835&quot;&gt;#5835&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5958&quot;&gt;#5958&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5736&quot;&gt;#5736&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Spirit V2.5.1, see the '&lt;a href=&quot;http://www.boost.org/doc/libs/1_48_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_5_1.html&quot;&gt;What's
                New&lt;/a&gt;' section for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Extension to support &lt;a href=&quot;http://www.boost.org/libs/type_traits/doc/html/boost_typetraits/category/value_traits/operators.html&quot;&gt;operator
                detection&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved support for the C++11 standard - breaking change to equality
                and emplace.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Use Boost.Move to implement move semantics.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/doc/html/unordered/changes.html#unordered.changes.boost_1_48_0___major_update&quot;&gt;change
                log&lt;/a&gt; for full details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_48_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang 2.8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.5.1, 4.5.2, 4.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 11.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 11.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1, 32 and 64 bit.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC, C++0x mode: 4.4.2, 4.6.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang from subversion, with libc++ and GNU libstdc++
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang 2.8 x
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.4, 4.5.2, 4.5.4, 4.6.1, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.3.4, 4.4.3, 4.4.4, 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.2 x
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                PathScale: 4.0.8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age 10.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang from subversion, with libc++ and GNU libstdc++.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 11.1.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 4.4.4.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.4.4.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.2, 4.5.4, 4.6.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode, mingw: 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw 64-bit: 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition, V11.1.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1, 32 and 64 bit.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun 5.10
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_48_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/x&gt;</description></item></channel>
</rss>