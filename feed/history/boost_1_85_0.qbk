[article Version 1.85.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* [phrase library..[@/libs/charconv/ Charconv]:] A high quality implementation of `<charconv>` in C++11, from Matt Borland.
* [phrase library..[@/libs/scope/ Scope]:] A collection of scope guard utilities and a `unique_resource` wrapper, from Andrey Semashev.

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/bind/ Bind]:]
  * C++03 is no longer supported; a C++11 compiler is required.
    (This includes GCC 4.7 or later, and MSVC 12.0 (VS 2013) or later.)

* [phrase library..[@/libs/function/ Function]:]
  * C++03 is no longer supported; a C++11 compiler is required.
    (This includes GCC 4.7 or later, and MSVC 12.0 (VS 2013) or later.)

* [phrase library..[@/libs/leaf/ LEAF]:]
  * New API for transporting of error objects and exceptions between threads: `try_capture_all`.
  * `result<T>` able to transport exceptions captured via `try_capture_all`.
  * `result<T>` transporting dynamically captured error objects with improved efficiency.
  * Old `make_shared_context`/`capture` APIs are deprecated, will be removed in the next release.
  * Removed support for transporting of dynamicaly captured error objects in exceptions.

* [phrase library..[@/libs/system/ System]:]
  * C++03 is no longer supported; a C++11 compiler is required.
    (This includes GCC 4.8 or later, and MSVC 14.0 (VS 2015) or later.)
  * The deprecated header `boost/system/cygwin_error.hpp` has been removed.
  * The original and obsolete (32 bit) MinGW is no longer supported. MinGW-w64 (both 64 and 32 bit) is still supported.
  * `operator&` now works for `result<void>` (by way of taking a nullary function.)
  * Added `operator|=` for `result`.

* [phrase library..[@/libs/unordered/ Unordered]:]
  * Optimized `emplace()` for a `value_type` or `init_type` (if applicable) argument to bypass
    creating an intermediate object. The argument is already the same type as the would-be intermediate object.
  * Optimized `emplace()` for `k,v` arguments on map containers to delay constructing the object
    until it is certain that an element should be inserted. This optimization happens when the
    mapâ€™s `key_type` is move constructible or when the `k` argument is a  `key_type`.
  * Fixed support for allocators with explicit copy constructors ([github_pr unordered 234]).

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
