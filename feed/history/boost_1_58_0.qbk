[article Version 1.58.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Clow, Marshall]]
    [/ last-revision is used for the final release data]
    [last-revision ]
]

[import ext.qbk]

[/ Add attributes here as release progresses. See end of file for details. ]

[section New Libraries]

* [phrase library..[@/libs/endian Endian]:]
  Types and conversion functions for correct byte ordering and more regardless
  of processor endianness.
* [phrase library..[@/libs/sort/ Sort]:] 
  * includes spreadsort, a general-case hybrid radix sort that is faster than O(n*log(n))

* /TODO/

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * `shared_ptr` is movable and supports aliasing ([ticket 1234]).
]

* [phrase library..[@/libs/chrono/ Chrono]:]
  * ['Version] 2.0.5
  * ['Fixes:]
    * [@http://svn.boost.org/trac/boost/ticket/10778 #10778]	VC14 CTP4 Atomic don't compile with boost::chrono durations which are not TriviallyCopyable
    * [@http://svn.boost.org/trac/boost/ticket/10840 #10840] 	Missing std:: qualifier for puts call in test_7868.cpp
    * [@http://svn.boost.org/trac/boost/ticket/10851 #10851] 	Missing std:: qualifier for puts call in time_point_output.cpp
    * [@http://svn.boost.org/trac/boost/ticket/10893 #10893] 	Minor doc typo in Boost.Chrono
    * [@http://svn.boost.org/trac/boost/ticket/10992 #10992] 	Chrono IO state savers inconsistent with Boost.IO state savers
    * [@http://svn.boost.org/trac/boost/ticket/10995 #10995] 	duration_put::put_value truncates fractional part
    * [@http://svn.boost.org/trac/boost/ticket/11006 #11006] 	Impossible to instantiate time_fmt_io_saver due to several errors.
    * [@http://svn.boost.org/trac/boost/ticket/11012 #11012] 	chrono_io v2 fail to compile with boost::chrono::duration< boost::rational<int> >


* [phrase library..[@/libs/context/ Context]:]
  * support for ARM/iOS (32+64 bit)
  * class execution_context (C++14)

* [phrase library..[@/libs/conversion/ Conversion]:]
  * `polymorphic_pointer_downcast` and `polymorphic_pointer_cast` functions were added (thanks to Boris Rasin) [ticket 10780]
  * All the functions now throw exceptions using `boost::throw_exception`
  * Documnetation update

* [phrase library..[@/libs/flyweight/ Flyweight]:]
  * Added hash support both with `std::hash` and [@/doc/html/hash.html `boost::hash`]. This can be
    optionally [@/libs/flyweight/doc/reference/flyweight.html#disable_hash_support disabled] to avoid
    clashes with legacy code where this support has already been defined by the user.
  * Maintenance fixes.

* [phrase library..[@/libs/function/ Function]:]
  * Added support for functions accepting C++11 rvalues and Boost.Move rvalues [ticket 10585].

* [phrase library..[@/libs/fusion/ Fusion]:]
  * Automatic hash creation function ([@https://github.com/boostorg/fusion/pull/12 Github PR #12])
  * New ADAPT_STRUCT, ADAPT_ADT, ADAPT_ASSOC_ that deduce the members types ([ticket 9516]).
  * Add convert implementation for Boost.Tuple and std::tuple.
  * Add mpl::clear implementation for Boost.Tuple and std::tuple.
  * Use boost::declval instead of std::declval, ([ticket 10190]).
  * Remove use of `boost::blank` ([ticket 8622]).
  * Add result_of::{copy,move} ([ticket 5886]).
  * Better constexpr and noexcept support.
  * Improved SFINAE Friendliness of many metafunctions ([ticket 10676], [ticket 10443]). 
  * result_of::size::value and result_of::size::type::value are the same type now ([ticket 7304])
  * result_of::at<Seq, N>::type is now defined when sizeof of sequence is less than N ([ticket 6507], [ticket 7651]) 
  * Fix missing includes ([ticket 8457]).
  * Many documentation fixes & improvements ([ticket 6090], [ticket 5324], [@https://github.com/boostorg/fusion/pull/33 GitHub PR #33], [@https://github.com/boostorg/fusion/pull/53 GitHub PR #53], [@https://github.com/boostorg/fusion/pull/56 GitHub PR #56])

* [phrase library..[@/libs/lexical_cast/ Lexical Cast]:]
  * Now std::stream is used for conversions to float numbers [ticket 5660], [ticket 6975], [ticket 10639]

* [phrase library..[@/libs/log/ Log]:]
  * Bug fixes:
    * Fixed thread id formatting.
    * Fixed process id formatting. ([ticket 10926])
    * Fixed build failure on GNU Hurd.
    * Fixed incorrect behavior of text file sink backend in case if free space on the file system gets exhausted. The sink will no longer create lots of empty files in attempt to recover. ([ticket 11016])
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.
  
* [phrase library..[@/libs/math/ Math]:]
  * Added two new special functions - trigamma and polygamma.
  * Large update to the Elliptic integral code to use Carlson's latest algorithms - these should be more stable, more accurate
    and slightly faster than before.  Also added support for Carlson's RG integral.
  * Added ellint_d, jacobi_zeta and heuman_lambda elliptic integrals.
  * Fixed namespace scope constants so they are constexpr on conforming compilers, see [@https://svn.boost.org/trac/boost/ticket/10901 #10901].
  * Fixed various cases of spurious under/overflow in the incomplete beta and gamma functions, plus the elliptic integrals, with thanks to Rocco Romeo.
  * Fix 3-arg legendre_p and legendre_q functions to not call the policy based overload if the final argument is not actually a policy.
  * Cleaned up some dead code in the incomplete beta function, see [@https://svn.boost.org/trac/boost/ticket/10985 #10985].
  * Fixed extreme-value pdf for large valued inputs, see [@https://svn.boost.org/trac/boost/ticket/10938 #10938].
  * Switched documentation to use SVG rather than PNG graphs and equations - browsers seem to have finally caught up!


* [phrase library..[@/libs/multi_index/index.html Multi-index Containers]:]
  * The efficiency of lookup operations has improved in situations where they involve the generation
    of temporary values of `key_type`. Consider for instance the following code: 
    ```
    typedef multi_index_container<
      std::string,
      indexed_by<
        ordered_unique<identity<std::string> >
      >
    > multi_t;
    ...
    multi_t m=...;
    m.find("boost"); // passed a const char*, not a std::string    
    ```
    In previous versions of the library, the `find` operation generates several temporary
    `std::string`s (one every time an internal comparison is made). In sufficiently advanced
    compilers, this is now avoided so that only one temporary is created.
  * Maintenance fixes.

* [phrase library..[@/libs/multiprecision/ Multiprecision]:]
  * Changed `frexp` to always be non-expression template generating, see: [@https://svn.boost.org/trac/boost/ticket/10993 10993].
  * Improved support of cpp_dec_float on Cygwin and other platforms with missing long double support, see [@https://svn.boost.org/trac/boost/ticket/10924 10924].
  * Improved noexcept support and added some more tests, see [@https://svn.boost.org/trac/boost/ticket/10990 10990].
  * Various workarounds applied for Intel-15.0 and Solaris-12.4 compilers.

* [phrase library..[@/libs/phoenix/ Phoenix]:]
  * Version 3.2.0
  * ['New Features:]
    * Phoenix now has a /lazy list/ implementation as an optional extension.
  * ['New Example:]
    * A new example /bind_goose/ shows the compatibility between /boost bind/ and /boost phoenix bind/.
  * ['Fixed Bugs:]
    * [@http://svn.boost.org/trac/boost/ticket/10927 #10927] Missing `std::` qualifier for `fabs` in `phoenix/test/stdlib/cmath.cpp`
    * [@http://svn.boost.org/trac/boost/ticket/11085 #11085] Missing qualifier for pow call in `phoenix/test/function/function_tests.cpp`
    * Fixes for a number of cases failing with /bind/, /lambda/ and /let/.

* [phrase library..[@/libs/predef/ Predef]:]
  * Version 1.2
  * Added Visual Studio 2015 detection.
  * Added detection of Haiku OS.
  * Fix Android endian detection.
  * Added `predef_check` program and BBv2 integration for build configuration checks.

* [phrase library..[@/libs/thread/ Thread]:]
  * ['Version] 4.5.0
  * ['New Experimental Features:]
    * [@http://svn.boost.org/trac/boost/ticket/9600 #9600] Async: Add task_region
    * [@http://svn.boost.org/trac/boost/ticket/10611 #10611] Add emplace promise::set_value and emplace make_ready_future
    * [@http://svn.boost.org/trac/boost/ticket/10826 #10826] Add scheduled executor operations
    * [@http://svn.boost.org/trac/boost/ticket/11048 #11048] Add a serial_executor based on continuations

  * ['Fixed Bugs:]
    * [@http://svn.boost.org/trac/boost/ticket/6787 #6787] boost::thread::sleep() hangs if system time is rolled back
    * [@http://svn.boost.org/trac/boost/ticket/10734 #10734] Submit method work differently on different executors, some throw exception and some silently ignore error (thread_executor and inline_executor)
    * [@http://svn.boost.org/trac/boost/ticket/10736 #10736] Task exceptions silently ignored. I think std::terminate solution from N3785 and std::thread is better choice and more consistent.
    * [@http://svn.boost.org/trac/boost/ticket/10737 #10737] In serial_executor we have infinite wait if task throw exception.
    * [@http://svn.boost.org/trac/boost/ticket/10822 #10822] Boost.Thread fails to compile on Android
    * [@http://svn.boost.org/trac/boost/ticket/10824 #10824] Boost.Thread 1.57 breaks Windows XP compatibility for SP2 and below.
    * [@http://svn.boost.org/trac/boost/ticket/10963 #10963] future<future<T>>::then Has No Implementation
    * [@http://svn.boost.org/trac/boost/ticket/10964 #10964] future<future<T>>::unwrap().then() Deadlocks
    * [@http://svn.boost.org/trac/boost/ticket/10968 #10968] The futures returned by async() and future::then() are not blocking.
    * [@http://svn.boost.org/trac/boost/ticket/10971 #10971] shared_future::get()/get_or() must be const
    * [@http://svn.boost.org/trac/boost/ticket/10972 #10972] shared_future::then() can be called multiple times.
    * [@http://svn.boost.org/trac/boost/ticket/10979 #10979] Support T& type deduction when the make_ready_future parameter is reference_wrapper<T>
    * [@http://svn.boost.org/trac/boost/ticket/10996 #10996] Thread physical_concurrency() is failing on Windows
    * [@http://svn.boost.org/trac/boost/ticket/11035 #11035] BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE not defined for Android
    * [@http://svn.boost.org/trac/boost/ticket/11053 #11053] The attached code results in a R6025 - pure virtual function call in run_thread_exit_callbacks

* [phrase library..[@/libs/type_index/ TypeIndex]:]
  * Link time assertions added on platforms that support it

* [phrase library..[@/libs/variant/ Variant]:]
  * [*Breaking change:] Compile time checked getter is now used by default in `boost::get<U>(VariantT)` and `boost::polymorphic_get<U>(VariantT)`.
    New getter asserts that type `U` is one of the types that can be stored in `VariantT`. Define `BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT`
    to change default behavior. See
    [@/libs/variant/doc/html/variant/reference.html#header.boost.variant.get_hpp get.hpp] and
    [@/libs/variant/doc/html/variant/reference.html#header.boost.variant.polymorphic_get_hpp polymorphic_get.hpp]
    descriptions for more info [ticket 547].
  * Added missing comparison operators to variant [ticket 8620], [ticket 10811]
  * Multiple documentations fixes [ticket 10273], [ticket 10653]
  * Variadic templats enabled on Clang [ticket 10832]
  * Autodetection of return types for visitors in C++14, which makes it possible to use `boost::apply_visitor` with generic lambdas [ticket 10837]:
    ```
    auto str = boost::apply_visitor(
        [](auto v) {
            return boost::lexical_cast<std::string>(v);
        },
        variant_instance
    );
    ```
  * Improved swap functions [ticket 10882]
  * Many improvements to variadic templates, even more methods support variadics.
  * Multiple bugfixes and testing improvements including Coveralls integration


* /TODO/

[/ TODO: These libraries always use the same message, referring to their
   individual release notes. So check if they apply before the beta:

* /TODO/: [phrase library..[@/libs/spirit/ Spirit]:]
  * Spirit Vx.x, see the
    '[@/doc/libs/1_xx_x/libs/spirit/doc/html/spirit/what_s_new/spirit_x_x.html What's New]'
    section for details.

* /TODO/: [phrase library..[@/libs/wave/ Wave]:]
  * See the [@/libs/wave/ChangeLog Changelog] for details.

]

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]

[/
For Beta release, something like:

[status beta]
[download http://sourceforge.net/projects/boost/files/boost/1.58.0.beta.1/]
[download_basename boost_1_58_0_b1]
[documentation /doc/libs/1_58_0_b1/]

Add libraries to 'purpose field'.

For final release:

[status released]
[download http://sourceforge.net/projects/boost/files/boost/1.58.0/]
[download_basename boost_1_58_0]
[documentation /doc/libs/1_58_0/]

Fill in 'authors' field, and date (I normally just copy the date from
the email requesting that I update the site).

Remove this comment.
]
