[article Version 1.78.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* No new libraries.

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* /TODO/

* [phrase library..[@/libs/assert/ Assert]:]
  * Added `source_location::to_string`.

* [phrase library..[@/libs/core/ Core]:]
  * Added a generic implementation to `boost/core/cmath.hpp`, enabled when `BOOST_CORE_USE_GENERIC_CMATH`
    is defined or when the platform does not provide the necessary facilities in `<cmath>`.
  * Added `boost::core::type_name`, a utility function that returns the name of a type as a string.
  * Added `boost::span`, a C++11 implementation of C++20's `std::span`.

* [phrase library..[@/libs/describe/ Describe]:]
  * Added `has_describe_enumerators`, `has_describe_bases`, `has_describe_members`.
  * Added `enum_to_string`, `enum_from_string`.
  * Added relational and stream insertion operators.
  * Added `descriptor_by_name`, `descriptor_by_pointer`.

* [phrase library..[@/libs/dll/ DLL]:]
  * Fixed missing #include, thanks to Denis Blank ([github_pr dll 54])
  * Dropped TravisCI in favor of GithubAction CI

* [phrase library..[@/libs/lambda2/ Lambda2]:]
  * Added special cases in `operator<<` and `operator>>` when
    the first argument is a stream, to allow `std::cout << _1`.
  * Added `operator\->*`.
  * Added `first`, `second`.

* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * Added `contains` to key-based indices (issue [github multi_index 35]).
  * Added `merge` operations to key-based indices. The functionality goes beyond
    the standard specification for (unordered) associative containers in a number
    of ways, most notably:
    [itemized_list
      [The source index can be of any type, including non key-based indices.]
      [Partial merge is provided: for instance, `x.merge(y,first,last)` merges
      only the elements of `y` within \[`first`,`last`).]
    ]
  * Previous versions of `splice` for sequenced and random access indices were
    destructive, i.e. elements were copy-inserted into the destination and then
    erased from the source. Now, `splice` is based on node transfer much as
    `merge` in key-based indices, and has been similarly extended to accept source
    indices of any type: in fact, `splice` can be regarded as a frontend to the
    same functionality provided by `merge` in key-based indices. For reasons of
    backwards compatibility, the destructive behavior of `splice` has been retained
    in the case that the source and destination containers have unequal allocators.
  * The fact has been documented that index iterator types do only depend on
    `node_type` and the position of the index in its `multi_index_container`,
    (except for hashed indices, where uniqueness/non-uniqueness is also a
    dependency). This has implications on the validity of iterators to elements
    transferred by `merge` or `splice`. This property is a variant of what has been
    called [@https://wg21.link/n2980 SCARY iterators] in the C++ standard mailing
    lists. SCARYness is currently (August 2021) not mandated for standard
    containers.
  * Iterator SCARYness is now also preserved in
    [@/libs/multi_index/doc/tutorial/debug.html#safe_mode safe mode].

* [phrase library..[@/libs/pfr/ PFR]:]
  * Added missing `#include <memory>` for inclusion of `std::addressof`
  * Fixed -Wzero-length-array warning when dealing with empty aggregates
  * Fixed compilation on msvc compilers <= 1920 (thanks to Alexey Romanov aka @alexey-romanov)
  * Added basic CMakeLists.txt support (thanks to @pdimov aka Peter Dimov)
  * Multiple improvements for docs, including links to https://github.com/apolukhin/pfr_non_boost
  * Added misc/strip_boost_namespace.sh script to remove `boost::` and `BOOST_` prefixes

* [phrase library..[@/libs/system/ System]:]
  * Added support for source locations to `error_code`.
  * Added `error_code::to_string`, `error_condition::to_string`, `error_code::what`.
  * `system_error::what()` now contains the source location, if present.
  * Added `result<T, E = error_code>`, a class holding either a value or an
    error, defined in `<boost/system/result.hpp>`.

* [phrase library..[@/libs/variant2/ Variant2]:]
  * Added `<boost/variant2.hpp>`.
  * Added `unsafe_get<I>`.
  * Added `visit_by_index`.
  * Added `operator<<`.

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
