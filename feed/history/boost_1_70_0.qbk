[article Version 1.70.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[section New Libraries]

* [phrase library..[@/libs/outcome/ Outcome]:] A set of tools for reporting and handling
  function failures in contexts where ['directly] using C++ exception handling is unsuitable,
  from Niall Douglas.

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* /TODO/

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * See examples below:
  * fixed an old trac issue ([ticket 1234]).
  * fixed this GitHub issue [github interprocess 1234].
  * fixed some bug with a PR [github_pr interprocess 1234].
  * [@https://www.google.com [*link to something]]
  * [*bold text]
  * [role green [*bold green text]]
  * \u26a1 use unicode
  * Keep the list of libraries in alphabetical order please.
]

* [phrase library..[@/libs/beast/ Beast]:]
  '''<emphasis role="bold"><emphasis role="red">BIG Update!!!</emphasis></emphasis>''' The
  [@/libs/beast/doc/html/beast/quickref.html reference]
  shows a star '''<emphasis role="green">&#9733;</emphasis>''' next to each new item.
  * Beast needs your help!
    * [@https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast Tell Us]
      how you or your company use Beast
    * Please
      [@https://github.com/boostorg/beast/issues/new report]
      any bugs, feature requests, or general feedback
    * Join the [@https://cppalliance.org/slack/ [*C++ Slack Workspace]] for
      free and chat with us in the #beast and #boost channels   
    * Don't forget to [@https://github.com/boostorg/beast star the repository] \u2b50!
  * More tutorials, code like the pros!
    * [@/libs/beast/doc/html/beast/using_asio/asio_refresher.html Networking Refresher]
      teaches you from the ground up.
    * Updated [@/libs/beast/doc/html/beast/using_io/writing_composed_operations/echo.html Asynchronous Echo] example
    * Updated [@/libs/beast/doc/html/beast/using_io/writing_composed_operations/detect_ssl.html [*Detect SSL]] composed operation tutorial
    * [@/libs/beast/example/websocket/server/chat-multi websocket-chat-multi]
      threaded chat server with a JavaScript
      [@/libs/beast/example/websocket/server/chat-multi/chat_client.html browser client]
  * [@/libs/beast/doc/html/beast/ref/boost__beast__basic_stream.html `basic_stream`] and
    [@/libs/beast/doc/html/beast/ref/boost__beast__tcp_stream.html `tcp_stream`] offer:
    * Timeouts: `async_read_some`, `async_write_some` complete with
      [@/libs/beast/doc/html/beast/ref/boost__beast__error.html `error::timeout`] on expiration!     
    * Traffic-shaping policies
      [@/libs/beast/doc/html/beast/ref/boost__beast__simple_rate_policy.html `simple`] and
      [@/libs/beast/doc/html/beast/ref/boost__beast__unlimited_rate_policy.html `unlimited`],
      or a user-defined
      [@/libs/beast/doc/html/beast/concepts/RatePolicy.html ['RatePolicy]]!
    * Put the strand directly on the socket using
      [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1322r0.html P1322R0],
      no more `bind_executor` at call sites!
  * Base classes
    [@/libs/beast/doc/html/beast/ref/boost__beast__async_base.html `async_base`] and
    [@/libs/beast/doc/html/beast/ref/boost__beast__stable_async_base.html `stable_async_base`] and
    handle all composed operation boilerplate for you.
  * [@/libs/beast/doc/html/beast/ref/boost__beast__ssl_stream.html `ssl_stream`] provides a
    movable, assignable SSL stream with a flat write optimization.
  * All asynchronous operations use Asio's `async_initiate` for efficient integration with Coroutines TS.
  * \u26a1 [*['faster compilation]], define `BOOST_BEAST_SPLIT_COMPILATION` and
    `#include <`[@/libs/beast/include/boost/beast/src.hpp `boost/beast/src.hpp`]`>`
    in one of your .cpp files!
  * See the full
    [@/libs/beast/doc/html/beast/release_notes.html Release Notes]
    for a complete list of changes.

* [phrase library..[@/libs/dynamic_bitset/ Dynamic Bitset]:]
  * Disabled hardware-assisted popcount (added in 1.69.0) on MSVC due to undefined behavior
    on older CPUs. ([github dynamic_bitset 33] [github_pr dynamic_bitset 35])

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * Fixed a few instances of dereferencing `std::string::end()` in `path` implementation.
  * Fixed program termination in case of out of memory condition in directory iterators constructors and operations accepting a reference to `error_code`. ([github filesystem 58])
  * Fixed possible linking errors caused by missing definitions of static members of `path`. ([ticket 12759])
  * Fixed possible use of uninitialized data in directory iterator increment operation on Linux.
  * Added support for movability to directory iterators.
  * Added file status query overloads for `directory_entry`. This avoids a relatively expensive OS query when file status is requested for a result of dereferencing a directory iterator. ([github_pr filesystem 55])
  * Reworked `current_path` and `read_symlink` implementation to avoid possible memory exhaustion on broken or tampered with filesystems. The functions now have an internal limit of the path size they will accept from the OS, which is currently 16 MiB.
  * Increased the size of the internal buffer used by `copy_file`.

* [phrase library..[@/libs/integer/ Integer]:]
  * Added Extended Euclidean Algorithm and Modular Multiplicative Inverse function. (Nick Thompson, [github_pr integer 11])

* [phrase library..[@/libs/log/ Log]:]
  * New features:
    * Added support for generating another log file name before collecting the file in the text file sink backend. This allows to combine appending to an existing log file with timestamps and file counters in log filenames, and, consequently, file collection in general.
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.

* [phrase library..[@/libs/mp11/ Mp11]:]
  * Renamed `mp_invoke` to `mp_invoke_q`
  * Added `mp_similar`
  * Added `mp_set_union`, `mp_set_intersection`, `mp_set_difference`
  * Added `mp_not_fn`
  * Added `mp_transform_first`, `mp_transform_second`, `mp_transform_third`
  * Added `mp_filter`
  * Added `mp_eval_if_not`, `mp_eval_or`, `mp_valid_q`
  * Added `mp_back`, `mp_pop_back`

* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * `size_type` and `difference_type` are now defined as the allocator's same-named types.
    This will not make any difference in the vast majority of cases, but allows for some
    degree of control of resulting internal structures via user-defined allocator types
    (see issue [github multi_index 17] for motivation). For the moment being, this change
    is not documented in the reference section (i.e., it has semi-official status). 
  * Maintenance work.
  
* [phrase library..[@/libs/poly_collection/ PolyCollection]:]
  * Improved handling of stateful allocators and allocator propagation traits,
    after an error reported by Billy O'Neal ([github_pr poly_collection 9]).
  * Fixed a potentially serious bug with an internal cache structure.

* /TODO/

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
