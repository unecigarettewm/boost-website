[article Version 1.74.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

* [phrase library..[@/libs/stl_interfaces/ STLInterfaces]:] A library of CRTP
  bases to ease the writing of STL views, iterators, and sequence containers,
  from Zach Laine.

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* /TODO/

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/bimap/ Bimap]:]
  * Correct allocator usage (fixes C++20 compilation). (Glen Fernandes)

* [phrase library..[@/libs/config/ Config]:]
  * Implement `BOOST_NO_CXX11_OVERRIDE` and `BOOST_OVERRIDE`. (Glen Fernandes)

* [phrase library..[@/libs/core/ Core]:]
  * Implemented the allocator access utilities which provide a replacement for
    `allocator_traits` with individual traits and functions for each facility.
    They support the C++11 allocator model when possible and provide a fallback
    for C++98 compatibility. These are now used in Circular_Buffer, Wave,
    Lockfree, Heap, Smart_Ptr, Dynamic_Bitset, Format, Bimap and more.
    (Glen Fernandes)

* [phrase library..[@/libs/flyweight/index.html Flyweight]:]
  * Maintenance work.

* [phrase library..[@/libs/format/ Format]:]
  * Correct allocator usage (fixes C++20 compilation). (Glen Fernandes)
  
* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * Added [@/libs/multi_index/doc/tutorial/basics.html#node_handling node extraction and insertion]
    following the analogous interface of associative containers as introduced in C++17.
    This feature has also been extended to non key-based indices, in contrast to C++
    standard library sequence containers, which do not provide such functionality.
  * Clarified documentation on read/write key extractors (issue [github multi_index 32]).
  * Maintenance work.

* [phrase library..[@/libs/heap/ Heap]:]
  * Correct destruction of top node in `skew_heap`. (Glen Fernandes)
  * Correct and simplify allocator use. (Glen Fernandes)

* [phrase library..[@/libs/poly_collection/ PolyCollection]:]
  * Fixed internal ambiguity problem between `boost::type_erasure::any` and
    `boost::any` (issue [github poly_collection 17]).
  * Maintenance work.

* [phrase library..[@/libs/polygon/ Polygon]:]
  * C++20 fixed for `event_comparison_type`, `vertex_equality_predicate_type`,
    and `voronoi_predicates`. (Glen Fernandes)

* [phrase library..[@/libs/type_traits/ Type_Traits]:]
  * Implemented `conjunction`, `disjunction`, `negation`,
    `is_trivially_copyable`, `is_scoped_enum`, and `is_unscoped_enum`.
    (Glen Fernandes)

* [phrase library..[@/libs/yap/ YAP]:]
  * Fixed compilation errors for placeholders; they now work in the general case,
    and in particular work with yap::print().
  * constexpr all the YAP.
  * Fix printing of correct value category in yap::print().
  * Doc clarification.

* /TODO/

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/boostbook/ Boostbook]:]
  * Change encoding of generated documentation from US-ASCII to UTF-8.
    (Glen Fernandes)

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
