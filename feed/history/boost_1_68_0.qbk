[article Version 1.68.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[section New Libraries]

* [phrase library..[@/libs/yap/ YAP]:] An expression template library
  for C++14 and later, from Zach Laine.

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/beast/ Beast]:]
  * This version fixes a missing executor work guard in all composed operations
    used in the implementation. Users who are experiencing crashes related to
    asynchronous completion handlers are encouraged to upgrade.
  * For a complete list of changes, please view the official
    [@/libs/beast/doc/html/beast/release_notes.html Release Notes].

* [phrase library..[@/libs/fiber/ Fiber]:]
    * [github fiber 170]: buffered_channel::try_push has incorrect documentation
    * [github fiber 172: WIN64]: 'invalid conversion from 'HANDLE' to 'std::thread::native_handle_type' errors for builds using mingw-w64
    * [github fiber 175]: throw exception "Operation not permitted" 
    * NUMA support moved to extra library (fiber-numa); enabled via property numa (numa=on)

* [phrase library..[@/libs/coroutine2/ Coroutine2]:]
    * [github coroutine2 14]: crash while stack unwinding
    * [github coroutine2 18]: some guidance on why to use coroutine2
    * [github coroutine2 20]: failes to compile test in due to the error C2039
    * [github coroutine2 22]: undefined behaviour documentation

* [phrase library..[@/libs/context/ Context]:]
    * [github context 78]: Linker error with `context-impl=ucontext`: multiple definition of `boost::context::detail::current_rec`

* [phrase library..[@/libs/gil/ GIL]:]
  * The I/O extensions have been entirely rewritten.
  * The library now requires a C++11-compliant compiler.
  * Documentation has been reformatted and updated.

* [phrase library..[@/libs/graph/ Graph]:]
  * Conditionally replace deprecated/removed C++98 `std::bind1st` by
    `std::bind`, `std::auto_ptr` by `std::unique_ptr`, and
    `std::random_shuffle` by `std::shuffle`.  ([github_pr graph 89])
  * Fix compiler error with release builds on VS2015 ([github_pr graph 84])
  * Fix the Stanford GraphBase examples ([github_pr graph 87])
  * Fix friend declarations for iterator_core_access ([github_pr graph 103])
  * Add missing `<boost/iterator.hpp>` include ([github_pr graph 104])
  * Avoid an unused variable warning ([github_pr graph 90])
  * Fix some typos in documentation
    ([github_pr graph 88], [github_pr graph 98], [github_pr graph 102])
  * Fix some issues in tests and examples
    ([github_pr graph 85], [github_pr graph 105])
    
* [phrase library..[@/libs/multi_index/index.html Multi-index Containers]:]
  * Containers of moveable but non-copyable elements can now be serialized
    (ticket [ticket 13478]). Thanks to S'''&#233;'''bastien Paris for the report.
  * `multi_index_container`'s default constructor is no longer `explicit`
    (ticket [ticket 13518]). 

* [phrase library..[@/libs/optional/ Optional]:]
  * Added member function `has_value()` for compatibility with `std::optional` ([@https://github.com/boostorg/optional/issues/52 issue #52]).
  * Added member function `map()` for transforming `optional<T>` into `optional<U>` using a function of type `T -> U`.
  * Added member function `flat_map()` for transforming `optional<T>` into `optional<U>` using a function of type `T -> optonal<U>`.
  
* [phrase library..[@/libs/program_options/ Program Options]:]
  * Support for multiple long names for an option, thanks to Eyal Rozenberg
    ([@https://github.com/boostorg/program_options/pull/53 PR#53])
    
* [phrase library..[@/libs/math/ Math]:]
  * Support for arbitrary precision complex valued quadrature and hence contour integration
  * Improve performance of polynomial addition

* [phrase library..[@/libs/multiprecision Multiprecision]:]
  * Support for multiprecision complex numbers


* [phrase library..[@/libs/python/ Python]:]
  * Bug fixes to correct autolink support (Windows) ([github python 193])

* [phrase library..[@/libs/rational/ Rational]:]
  * Fixed undefined behavior in normalize() ([github_pr rational 19]).
  * Added pow method ([github_pr rational 21]).

* [phrase library..[@/libs/system/ System]:]
  * Add constexpr to error_code and error_condition members under C++14 and above ([github_pr system 23]).

* [phrase library..[@/libs/uuid/ Uuid]:]
  * [*Breaking change:] sha1 detail namespace header redirection
    for backwards compatibility was removed ([github_pr uuid 69]).
  * Added support for std::hash ([github_pr uuid 67]).
  * Added support for move semantics on random generators ([github_pr uuid 74]).
  * Properly handle EINTR when acquiring entropy ([github_pr uuid 74]).
  * Use getrandom(2) instead of getentropy(3) on linux ([github_pr uuid 75]).

* [phrase library..[@/libs/predef/ Predef]:]
  * Add support for __ARM_ARCH macro. (from Tim Blechmann)
  * Add detection for PTX architecture. (from Benjamin Worpitz)
  * Add nvcc compiler detection. (from Benjamin Worpitz)
  * Add support for detecting CUDA. (from Benjamin Worpitz)
  * Remove reference to obsolete BOOST_ARCH_AMD64. (from Peter Kolbus)

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * `shared_ptr` is movable and supports aliasing ([ticket 1234]).
]

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang: 3.0, 4.0.1, 6.0.1
  * Clang, C++0x: 3.0
  * Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1
  * Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1
  * Clang, C++17: 5.0.2, 6.0.1
  * GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
  * GCC, C++0x: 4.4.7
  * GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
  * GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
  * GCC, C++17: 7.3.0, 8.0.1
  * Intel, C++14: 18.0
* OS X:
  * Clang: 9.0.0, 9.1.0
  * Clang, C++11: 9.0.0, 9.1.0
  * Clang, C++14: 9.0.0, 9.1.0
  * Clang, C++17: 9.1.0
  * Clang, C++1z: 9.0.0
* Windows:
  * GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
  * GCC, C++0x: 4.6.4
  * GCC, C++11: 4.7.3, 4.8.1, 4.9.3
  * GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
  * GCC, C++17: 7.1.0, 7.2.0, 7.3.0
  * Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
* FreeBSD:
  * Clang: 4.0.0
  * Clang, C++11: 4.0.0
  * Clang, C++14: 4.0.0
  * Clang, C++1z: 4.0.0

Boost's additional test compilers include:

* Linux:
  * Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
  * Clang, C++0x: 3.0
  * Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1
  * Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0
  * Clang, C++17: 5.0.2, 6.0.1
  * GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
  * GCC, C++0x: 4.4.7
  * GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
  * GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
  * GCC, C++17: 7.3.0, 8.0.1
  * Intel, C++14: 18.0
* OS X:
  * Clang: 9.0.0, 9.1.0
  * Clang, C++11: 9.0.0, 9.1.0
  * Clang, C++14: 9.0.0, 9.1.0
  * Clang, C++17: 9.1.0
  * Clang, C++1z: 9.0.0
* Windows:
  * GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
  * GCC, C++0x: 4.6.4
  * GCC, C++11: 4.7.3, 4.8.1, 4.9.3
  * GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
  * GCC, C++17: 7.1.0, 7.2.0, 7.3.0
  * Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
* FreeBSD:
  * Clang: 4.0.0
  * Clang, C++11: 4.0.0
  * Clang, C++14: 4.0.0
  * Clang, C++1z: 4.0.0

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
