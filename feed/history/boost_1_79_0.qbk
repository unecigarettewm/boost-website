[article Version 1.79.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* /TODO/

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/core/ Core]:]
  * Made `boost::pointer_traits` SFINAE friendly, addressing LWG3545. (Glen
    Fernandes)
  * Added `boost::allocator_traits` that uses the individual allocator access
    traits. This implementation supports C++03 and above. (Glen Fernandes)
  * Updated the allocator access traits to support most of the C++11 allocator
    model in C++03. (Glen Fernandes)

* [phrase library..[@/libs/io/ IO]:]
  * Added `boost::io::basic_nullbuf`, a null stream buffer, and
    `boost::basic_onullstream`, a null output stream (Glen Fernandes).

* [phrase library..[@/libs/smart_ptr/ Smart Pointers]:]
  * Added `boost::get_allocator_pointer` to obtain the Allocator pointer from
    the result of `boost::allocate_unique` (Glen Fernandes).

* [phrase library..[@/libs/predef/ Predef]:]
  * Version 1.14.0
  * Add detection of LoongArch (from Zhang Na).

* [phrase library..[@/libs/unordered/ Unordered]:]
  * All containers have been updated to support heterogeneous `count`,
    `equal_range` and `find`.
  * All containers now implement the member function `contains`.
  * All containers have been updated to support heterogeneous `erase` and
    `extract`.
  * Changed behavior of `reserve` to eagerly allocate.
  * Various warning fixes in the test suite.
  * Update code to internally use `boost::allocator_traits`.

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
