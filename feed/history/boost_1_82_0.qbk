[article Version 1.82.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* /TODO/

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/static_string/ StaticString]:]
  * Boost.Core `string_view` and `std::string_view` interoperability

* [phrase library..[@/libs/url/ URL]:]
  * Add `url::format` with automatic percent-encoding
  * URL router example
  * `set_params` convenience function
  * Support implicit conversions to `string_view`
  * Parsing constructors are implicit
  * `string_token::arg` has virtual destructor and slice protection
  * Support `BOOST_URL_DISABLE_THREADS`
  * Improvements and Bug fixes:
    * WIN32_LEAN_AND_MEAN macro redefinition warning
    * Comparison differentiates absent and empty components
    * Detect `hier_part_rule` with empty-port-like segments
    * Segments comparison as if normalized works above root
    * hier-part path-rootless considers invalid segments
    * port as number is set to 0 when it overflows
    * ipv4 to string overflow detection algorithm

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

Marshall Clow and Glen Fernandes managed this release.

[endsect]
