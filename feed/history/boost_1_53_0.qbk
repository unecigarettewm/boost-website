[article Version 1.53.0
    [quickbook 1.5]
    [source-mode c++]
    [purpose
    New Libraries: Atomic, Coroutine, Lockfree, Multiprecision, Odeint.
    Updated Libraries: Algorithm, Array, Asio, Bimap, Chrono, Container, Context,
        Geometry, GIL, Graph, Hash, Interprocess, Intrusive,
        Lexical Cast, Locale, Math, MinMax, Move, Polygon, Random,
        Range, Ratio, Regex, Smart Pointers, StringAlgo, Thread,
        Utility, Unordered, Variant, Wave and xpressive.
    ]
    [authors [Clow, Marshall]]
    [last-revision ]
]

[include ext.qbk]

[status beta 1]
[download https://sourceforge.net/projects/boost/files/boost/1.53.0.beta.1/]
[documentation /doc/libs/1_53_0/]

[section New Libraries]

* [phrase library..[@/libs/atomic/ Atomic]:]
  C++11-style `atomic<>`, from Helge Bahmann, maintained by Tim Blechmann.
* [phrase library..[@/libs/coroutine/ Coroutine]:]
  Coroutine library, from Oliver Kowalke.
* [phrase library..[@/libs/lockfree/ Lockfree]:]
  Lockfree data structures, from Tim Blechmann.
* [phrase library..[@/libs/multiprecision/ Multiprecision]:]
  Extended precision arithmetic types for floating point, integer and
  rational arithmetic from John Maddock and Christopher Kormanyos.
* [phrase library..[@/libs/numeric/odeint/ Odeint]:]
  Solving ordinary differential equations, from Karsten Ahnert and Mario
  Mulansky.

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/algorithm/ Algorithm]:]
  * Fixed non-ASCII char in comment ([ticket 7781]).
  * Updated the Knuth-Morris-Pratt docs ([ticket 7656]).

* [phrase library..[@/libs/array/ Array]:]
  * Added support for boost::get and std::get ([ticket 7652])

* [phrase library..[@/libs/asio/ Asio]:]
  * Fixed some 64-to-32-bit conversion warnings ([ticket 7459]).
  * Fixed some small errors in documentation and comments ([ticket 7761]).
  * Fixed an error in the example embedded in `basic_socket::get_option`'s
    documentation ([ticket 7562]).
  * Changed to use `long` rather than `int` for SSL_CTX options, to match OpenSSL
    ([ticket 7209]).
  * Changed to use `_snwprintf` to address a compile error due to the changed
    `swprintf` signature in recent versions of MinGW ([ticket 7373]).
  * Fixed a deadlock that can occur on Windows when shutting down a pool of
    `io_service` threads due to running out of work ([ticket 7552]).
  * Enabled the `noexcept` qualifier for error categories ([ticket 7797]).
  * Changed UNIX domain socket example to treat errors from `accept` as non-fatal
    ([ticket 7488]).
  * Added a small block recycling optimisation to improve default memory
    allocation behaviour.

* [phrase library..[@/libs/bimap/ Bimap]:] 
  * Refactor map_view_iterator to improve error messages.
  * Fixed replace_(left/right/key/data) bug when using relations with info.
  * Fixed vector_of and list_of views `assign(size_type,value_type)` bug.
  * Fixed vector_of views `operator[](size_type)` and `at(size_type)` functions return value.

* [phrase library..[@/libs/chrono/ Chrono]:]
  * [*Deprecated:]
    * The chrono i/o version included in Boost.Chrono 1.2.x has been completly refactored in version 2.0.0
    * chrono I/O: The manipulators __duration_short, __duration_long are depreceated. You should use the parameterized form __duration_fmt or the renamed manipulators __duration_symbol and __duration_prefix  instead.
    * chrono I/O: The __duration_punct<> facet is depreceated. You should use the __get_duration_style free function to get the informations and use the __duration_units facet for localization purposes.
    * When BOOST_CHRONO_VERSION==2 the preceding deprecated functions are not available.
  * [*Fixes:]
    * [@https://svn.boost.org/trac/boost/ticket/7546 #7546] time_point<system_clock> output version 2 fails to compile
    * [@https://svn.boost.org/trac/boost/ticket/7547 #7547] time_point<system_clock> input version 2 fails to compile
    * [@https://svn.boost.org/trac/boost/ticket/7868 #7868] chrono_io parses time incorrectly (1.53 and 1.52)

* [phrase library..[@/libs/container/ Container]:]
  *  Fixed bug [@https://svn.boost.org/trac/boost/ticket/7650 #7650].
  *  Improved `vector`'s insertion performance.
  *  Changed again experimental multiallocation interface for better performance (still experimental).
  *  Added no exception support for those willing to disable exceptions in their compilers.
  *  Fixed GCC -Wshadow warnings.
  *  Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.

* [phrase library..[@/libs/context/ Context]:]
  * Support for iOS on ARM and MacOS X on x86 (32bit) added.
  * Support for SEH Overwrite Protection on Win32.

* [phrase library..[@/libs/geometry Geometry]:]
  * [*Bugfixes]
    * avoid generating output polygons with interior rings below minimum size (e.g. one or two points)
    * `geometry::disjoint` for degenerate segments (patched by Karsten Ahnert)
    * problem in `geometry::difference` for missing handling tangency, reported by H2
    * fixed `geometry::for_each` for use with Lambda's
    * fixed `geometry::comparable_distance` point-linestring (and -range, -polygon)
  * [*Additional functionality]
    * combinations for `geometry::disjoint`: point/ring, point/polygon, point/multi_polygon
    * combinations for `geometry::intersects`: point/ring, point/polygon, point/multi_polygon
  * [*Internal changes]
    * updates in specializations/not_implemented for various algorithms (as in an earlier version, these changes are still going on; they take care for simplified structs, better error reporting, and automatized documentation)
    * fixes in unit tests

* [phrase library..[@/libs/gil/ GIL]:]
  * Fixed self-assignment warnings ([ticket 4919]).

* [phrase library..[@/libs/graph/ Graph]:]
  * Fixed the following bugs from Trac: [ticket 3468], [ticket 4386],
    [ticket 5269], [ticket 7428], [ticket 7457], [ticket 7467],
    [ticket 7600], [ticket 7648], [ticket 7684], [ticket 7728],
    [ticket 7741], [ticket 7766], [ticket 7771], [ticket 7773],
    [ticket 7780], [ticket 7787], [ticket 7801]
    plus other bugs not in Trac.
  * Added support for reading from GraphML files containing multiple
    graphs.
  * Added versions of A* search specifically for trees, removing the
    need for a color map when it is acceptable to visit the same vertex
    multiple times.
  * Added VF2 subgraph isomorphism algorithm (contributed by Flavio De
    Lorenzi).

* [phrase library..[@/libs/functional/hash/ Hash]:]
  * Add support for `boost::int128_type` and `boost::uint128_type` where
    available.
  * On platforms that are known to have standard floating point functions,
    don't use the automatic detection ([ticket 7221], [ticket 7470]).

* [phrase library..[@/libs/interprocess/ Interprocess]:]
  *  Fixed GCC -Wshadow warnings.
  *  Experimental multiple allocation interface improved and changed again. Still unstable.
  *  Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
  *  [*ABI breaking]: changed node pool allocators internals for improved efficiency.
  *  Fixed bug [@https://svn.boost.org/trac/boost/ticket/7795 #7795].
  
* [phrase library..[@/libs/intrusive/ Intrusive]:]
  *  Fixed bugs
     [@https://svn.boost.org/trac/boost/ticket/7174 #7174],
     [@https://svn.boost.org/trac/boost/ticket/7529 #7529],
     [@https://svn.boost.org/trac/boost/ticket/7815 #7815].
  *  Fixed GCC -Wshadow warnings.
  *  Added missing `explicit` keyword in several intrusive container constructors.
  *  Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
  *  Small documentation fixes.

* [phrase library..[@/libs/conversion/lexical_cast.htm Lexical cast]:]
  * New character type detection algorithm for user defined types [ticket 6786].
  * Documentation updates ([ticket 7582], [ticket 7831]).
  * Fixed bugs with std::array [ticket 7799].
  * Fixed compilation with -ftrapv and numeric to numeric conversions [ticket 7814].

* [phrase library..[@/libs/locale/ Locale]:]
  * Security related bug fix, some invalid UTF-8 sequences where accepted as valid [ticket 7743]
  * Invalid Windows codepage names used [ticket 7386]
  * Fixed missing documentation, caused by a error in Doxygen formatting [ticket 7734]
  * Fixed missing std:: in some places [ticket 7701]
  * Spelling, grammar, typos fixes [ticket 7368], [ticket 7762]

* [phrase library..[@/libs/math/ Math]:]
   * Fixed issues [@https://svn.boost.org/trac/boost/ticket/7325 #7325], [@https://svn.boost.org/trac/boost/ticket/7415 #7415],
   [@https://svn.boost.org/trac/boost/ticket/7416 #7416], [@https://svn.boost.org/trac/boost/ticket/7183 #7183],
   [@https://svn.boost.org/trac/boost/ticket/7649 #7649], [@https://svn.boost.org/trac/boost/ticket/7694 #7694],
   [@https://svn.boost.org/trac/boost/ticket/4445 #4445] and [@https://svn.boost.org/trac/boost/ticket/7492 #7492].
   * Fixed mistake in calculating pooled standard deviation in two-sample students t example
   [@https://svn.boost.org/trac/boost/ticket/7402 #7402].
   * Improve complex acos/asin/atan, see [@https://svn.boost.org/trac/boost/ticket/7290 #7290], 
   [@https://svn.boost.org/trac/boost/ticket/7291 #7291].
   * Improve accuracy in some corner cases of cyl_bessel_j and gamma_p/gamma_q thanks to suggestions from Rocco Romeo.
   * Improve accuracy in Bessel J and Y with integer orders thanks to suggestions from Rocco Romeo.

* [phrase library..[@/libs/minmax/ MinMax]:]
  * Fixed a misuse of the comma operator ([ticket 7752]).
  * Updated the docs to fix broken link ([ticket 7751]).

* [phrase library..[@/libs/move/ Move]:]
  *  Better header segregation (bug
    [@https://svn.boost.org/trac/boost/ticket/6524 #6524]).
  *  Small documentation fixes
  *  Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
  *  Fixed [@https://svn.boost.org/trac/boost/ticket/7830 #7830],
           [@https://svn.boost.org/trac/boost/ticket/7832 #7832].

* [phrase library..[@/libs/polygon/ Polygon]:]
  * [*Fixes:]
    * [ticket 6366] Bug in `boost::polygon::contains` for polygon_90 type.
    * [ticket 7678] multiple definitions of `bool boost::polygon::belongs(...)`
      by multiple `#include`.
  * [*Internal changes:]
    * refactored point/segment/interval data/concept/traits.
    * added unit tests for point and interval data/concept/traits.
    * simplified `transform.hpp` to operate only in 2D.
    * removed point_3d data/concept/traits.

* [phrase library..[@/libs/random/ Random]:]
  * Now compiles with exceptions disabled ([ticket 5399]).

* [phrase library..[@/libs/range/ Range]:]
  * [*Bug fixes:]
    * [ticket 5603] the "range/any_range.hpp" header is not self-sufficient
    * [ticket 6103] boost::range_detail vs. boost::range::range_detail compiler error
  * [*Documentation fixes:]
    * [ticket 5160]
    * [ticket 5314]
    * [ticket 5440]
    * [ticket 5775]
    * [ticket 6212]
    * [ticket 7585]
    * [ticket 7843]
    * [ticket 7916]
    * [ticket 7926]

* [phrase library..[@/libs/ratio/ Ratio]:]
  * [*Fixes:]
    * [@https://svn.boost.org/trac/boost/ticket/7616 #7616] br_mul::nan - warning C4293: '<<' : shift count negative or too big, undefined behavior`.

* [phrase library..[@/libs/regex/ Regex]:]
   Fixed Issues: [@https://svn.boost.org/trac/boost/ticket/7744 #7744], [@https://svn.boost.org/trac/boost/ticket/7644 #7644].

* [phrase library..[@/libs/smart_ptr/ Smart Pointers]:]
  * [*New Features:]
    * Glen Fernandes provided implementations of make_shared and 
      allocate_shared for arrays. They achieve a single allocation for an 
      array that can be initialized with constructor arguments or 
      initializer lists as well as overloads for default initialization and no 
      value initialization. See the 
      '[@/libs/smart_ptr/make_shared_array.html make_shared and allocate_shared for arrays]'
      page for more information.
    * `shared_ptr` can now be used to hold a pointer to a dynamically
      allocated array. This is accomplished by using an array type
      (`T[]` or `T[N]`) as the template parameter.
    * Smart pointers now use `explicit operator bool` on C++11
      compilers. This can break code that passes a smart pointer to a
      function taking a `bool`, or that returns a smart pointer from a
      function with a `bool` return type. Please use `p != 0` or `!!p`
      in such cases.
    
* [phrase library..[@/libs/algorithm/string StringAlgo]:]
  * Fixed a bug where it wouldn't find overlapping patterns ([ticket 7784]).
  * Disambiguated some calls to insert ([ticket 7346]).

* [phrase library..[@/libs/thread/ Thread]:]
  * [*Deprecated features:]
    * Deprecated features since boost 1.53 will be available only until boost 1.58.
    * C++11 compliance: packaged_task<R> is deprecated, use instead packaged_task<R()>.
    * [@https://svn.boost.org/trac/boost/ticket/7537 #7537] deprecate Mutex::scoped_lock and scoped_try_lock and boost::condition

  * [*New Features:]
    * [@https://svn.boost.org/trac/boost/ticket/6270 #6270] C++11 compliance: Add thread constructor from movable callable and movable arguments
    * [@https://svn.boost.org/trac/boost/ticket/7279 #7279] C++11 compliance: Add noexcept in system related functions
    * [@https://svn.boost.org/trac/boost/ticket/7280 #7280] C++11 compliance: Add promise::...at_thread_exit functions
    * [@https://svn.boost.org/trac/boost/ticket/7281 #7281] C++11 compliance: Add ArgTypes to packaged_task template.
    * [@https://svn.boost.org/trac/boost/ticket/7282 #7282] C++11 compliance: Add packaged_task::make_ready_at_thread_exit function
    * [@https://svn.boost.org/trac/boost/ticket/7412 #7412] C++11 compliance: Add async from movable callable and movable arguments
    * [@https://svn.boost.org/trac/boost/ticket/7413 #7413] C++11 compliance: Add async when the launch policy is deferred.
    * [@https://svn.boost.org/trac/boost/ticket/7414 #7414] C++11 compliance: future::get post-condition should be valid()==false.
    * [@https://svn.boost.org/trac/boost/ticket/7422 #7422] Provide a condition variable with zero-overhead performance penality.
    * [@https://svn.boost.org/trac/boost/ticket/7444 #7444] Async: Add make_future/make_shared_future.
    * [@https://svn.boost.org/trac/boost/ticket/7540 #7540] Threads: Add a helper class that join a thread on destruction.
    * [@https://svn.boost.org/trac/boost/ticket/7541 #7541] Threads: Add a thread wrapper class that joins on destruction.
    * [@https://svn.boost.org/trac/boost/ticket/7575 #7575] C++11 compliance: A future created by async should "join" in the destructor.
    * [@https://svn.boost.org/trac/boost/ticket/7587 #7587] Synchro: Add strict_lock and nested_strict_lock.
    * [@https://svn.boost.org/trac/boost/ticket/7588 #7588] Synchro: Split the locks.hpp in several files to limit dependencies.
    * [@https://svn.boost.org/trac/boost/ticket/7590 #7590] Synchro: Add lockable concept checkers based on Boost.ConceptCheck.
    * [@https://svn.boost.org/trac/boost/ticket/7591 #7591] Add lockable traits that can be used with enable_if.
    * [@https://svn.boost.org/trac/boost/ticket/7592 #7592] Synchro: Add a null_mutex that is a no-op and that is a model of UpgardeLockable.
    * [@https://svn.boost.org/trac/boost/ticket/7593 #7593] Synchro: Add a externally_locked class.
    * [@https://svn.boost.org/trac/boost/ticket/7590 #7594] Threads: Allow to disable thread interruptions.

  * [*Fixed Bugs:]
    * [@https://svn.boost.org/trac/boost/ticket/7464 #7464] BOOST_TEST(n_alive == 1); fails due to race condition in a regression test tool.
    * [@https://svn.boost.org/trac/boost/ticket/7657 #7657] Serious performance and memory consumption hit if condition_variable methods condition notify_one or notify_all is used repeatedly.
    * [@https://svn.boost.org/trac/boost/ticket/7665 #7665] this_thread::sleep_for no longer uses steady_clock in thread.
    * [@https://svn.boost.org/trac/boost/ticket/7668 #7668] thread_group::join_all() should check whether its threads are joinable.
    * [@https://svn.boost.org/trac/boost/ticket/7669 #7669] thread_group::join_all() should catch resource_deadlock_would_occur.
    * [@https://svn.boost.org/trac/boost/ticket/7671 #7671] Error including boost/thread.hpp header on iOS.
    * [@https://svn.boost.org/trac/boost/ticket/7672 #7672] lockable_traits.hpp syntax error: "defined" token misspelled.
    * [@https://svn.boost.org/trac/boost/ticket/7798 #7798] boost::future set_wait_callback thread safety issues.
    * [@https://svn.boost.org/trac/boost/ticket/7808 #7808] Incorrect description of effects for this_thread::sleep_for and this_thread::sleep_until.
    * [@https://svn.boost.org/trac/boost/ticket/7812 #7812] Returns: cv_status::no_timeout if the call is returning because the time period specified by rel_time has elapsed, cv_status::timeout otherwise.
    * [@https://svn.boost.org/trac/boost/ticket/7874 #7874] compile warning: thread.hpp:342: warning: type attributes are honored only at type definition.
    * [@https://svn.boost.org/trac/boost/ticket/7875 #7875] BOOST_THREAD_THROW_IF_PRECONDITION_NOT_SATISFIED should not be enabled by default.
    * [@https://svn.boost.org/trac/boost/ticket/7882 #7882] wrong exception text from condition_variable::wait(unique_lock<mutex>&).
    * [@https://svn.boost.org/trac/boost/ticket/7890 #7890] thread::do_try_join_until() is missing a return type.

* [phrase library..[@/libs/unordered/ Unordered]:]
  * Remove support for the old pre-standard variadic pair constructors, and
    equality implementation. Both have been deprecated since Boost 1.48.
  * More internal implementation changes, including a much simpler
    implementation of `erase`, and removed more deprecated config macros.

* [phrase library..[@/libs/utility/ Utility]:]
  * Added [@/libs/utility/doc/html/string_ref.html string_ref], a non-owning reference to a contiguous sequence of characters.

* [phrase library..[@/libs/variant/ Variant]:]
  * Added rvalue constructors and rvalue assignment operators (for
    C++11 compatible compilers only). Library now
    can be used with move-only types ([ticket 7620], [ticket 7718]).

* [phrase library..[@/libs/wave/ Wave]:]
  * See the [@/libs/wave/ChangeLog Changelog] for details.

* [phrase library..[@/libs/xpressive/ xpressive]:]
  * Accomodate recent smart pointer changes ([ticket 7809]).

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/build/index.html Boost Build System]:]
  * Qt5 toolset
  * improved rcc support ([@https://svn.boost.org/trac/boost/ticket/7576 #7576])

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * GCC: 4.1.2, 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.2
  * GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.2
  * Intel: 11.1, 12.1
  * LLVM Clang: 2.8
  * LLVM Clang, with libc++: 3.2
* OS X:
  * GCC: 4.4.7
  * GCC, C++11 mode: 4.4.4
  * Intel: 11.1, 12.0
* Windows:
  * Visual C++: 9.0, 10.0
* FreeBSD:
  * GCC: 4.2.1, 32 and 64 bit

Boost's additional test compilers include:

* Linux:
  * Cray: 4.6.1
  * Clang: from subversion
  * LLVM Clang, with libc++: 3.2
  * GCC: 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1
  * GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.1, 4.7.2
  * pgCC: 11.9
  * Intel: 10.1, 11.1, 12.1
  * Intel, C++11 mode: 13.0.1
  * Visual Age:
* OS X:
  * Clang: from subversion
  * Clang, C++11 mode: from subversion
  * Intel: 11.1, 12.0
  * GCC: 4.4.7
  * GCC, C++11 mode: 4.4.4
* Windows:
  * Visual C++: 10.0, 11.0
  * Visual C++ with STLport: 9.0
  * Visual C++, Windows Mobile 5, with STLport: 9.0
* AIX:
  * IBM XL C/C++ Enterprise Edition: V12.1.0.1

[endsect]

[section Acknowledgements]

[@/users/people/beman_dawes.html Beman Dawes],
Eric Niebler,
[@/users/people/rene_rivera.html Rene Rivera],
Daniel James, Vladimir Prus and Marshall Clow
managed this release.

[endsect]

