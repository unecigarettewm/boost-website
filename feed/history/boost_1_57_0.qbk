[article Version 1.57.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        Updated Libraries:
        Coroutine, Flyweight, Iterator, Containers, Preprocessor,
        Containers, Thread, Utility, uBLAS.
    ]
    [authors [Clow, Marshall]]
    [/ last-revision is used for the final release data]
    [last-revision ]
]

[import ext.qbk]
[status beta]
[download http://sourceforge.net/projects/boost/files/boost-binaries/1.57.0.beta.1/]
[download_basename boost_1_57_0_b1]
[documentation /doc/libs/1_57_0_b1/]

[section Beta Issues]

There are a couple of known problems with this beta:

* There are problems building with MSVC 8.0
* There are some problems with range/detail/any_iterator.hpp.

These will be fixed before the release.

Also, the release notes are incomplete at the moment.

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/coroutine/index.html Coroutine]:]
  * [ticket 10386] MSVC link error in asymmetric_coroutine.hpp: symbol already defined
  * [ticket 10536] call to 'begin(...pull_coroutine< R > & c)' is ambiguous

* [phrase library..[@/libs/flyweight/index.html Flyweight]:]
  * Added serialization support via [@/libs/serialization/index.html Boost Serialization].
  * `flyweight` default constructor was made explicit in Boost 1.56, which introduces a
    regression in some initialization scenarios. The former non-explicit default constructor
    has been restored (ticket [ticket 10439]). 

* [phrase library..[@/libs/iterator/ Iterator]:]
  * Most components of the library were moved into the `boost::iterators` namespace. For backward compatibility the components are also accessible in the `boost` namespace.
  * Iterator operators are now conditionally defined based on the iterator category.
  * Some of the internal components of the library were made public (`minimum_category`, for example).

* [phrase library..[@/libs/multi_index/index.html Multi-index Containers]:]
  * When `std::tuple`s are available, these can be used for lookup operations
    in indices equipped with composite keys. `boost::tuple`s are also supported
    for backwards compatibility.
    
* [phrase library..[@/libs/preprocessor/ Preprocessor]:]
  * Added is_begin_parens and remove_parens.
  * Added tuple functionality to parallel all array functionality.
  * Fixed VC++ problems with empty tuple data.
  * Updated internal is_empty to use superior variadic version when variadic macros are supported.
  * Updated clang to have same variadic support as gcc.
  * Updated doc for new functionality.

* [phrase library..[@/libs/thread/ Thread]:]
  * ['New Experimental Features:]
    * [@http://svn.boost.org/trac/boost/ticket/6227 #6227] Synchro: Use of variadic templates on Generic Locking Algorithms on compilers providing them
    * [@http://svn.boost.org/trac/boost/ticket/10298 #10298] Synchro: Added queue views.
    * [@http://svn.boost.org/trac/boost/ticket/10300 #10300] Async: Added generic_executor_ref.
    * [@http://svn.boost.org/trac/boost/ticket/10552 #10552] Add make_valid_future
  * ['Fixed Bugs:]
    * [@http://svn.boost.org/trac/boost/ticket/6782 #6782] call_once uses incorrect barrier intrinsic on Visual Studio
    * [@http://svn.boost.org/trac/boost/ticket/6787 #6787] boost::thread::sleep() hangs if system time is rolled back
    * [@http://svn.boost.org/trac/boost/ticket/7665 #7665] this_thread::sleep_for no longer uses steady_clock in thread
    * [@http://svn.boost.org/trac/boost/ticket/9307 #9307] future::fallback_to assert with ERRORRRRR boost: mutex lock failed in pthread_mutex_lock: Invalid argument
    * [@http://svn.boost.org/trac/boost/ticket/9308 #9308] future::async fails with terminate called throwing an exception when called with a lambda - clang-darwin-asan11
    * [@http://svn.boost.org/trac/boost/ticket/9310 #9310] test_4648_lib fails on clang-darwin-asan11
    * [@http://svn.boost.org/trac/boost/ticket/9425 #9425] Boost promise & future does not use supplied allocator for value storage
    * [@http://svn.boost.org/trac/boost/ticket/9558 #9558] future continuations unit test hangs in get()/pthread_cond_wait() on Mac 10.7/32-bit/x86/darwin-4.2.1
    * [@http://svn.boost.org/trac/boost/ticket/9787 #9787] [windows] Small duration value passed down to basic_timed_mutex::try_lock_until and condition_variable::wait_until can cause infinite or near infinite wait for win32
    * [@http://svn.boost.org/trac/boost/ticket/9880 #9880] [windows] boost::condition_variable.timed_wait() exception if system time < 1970
    * [@http://svn.boost.org/trac/boost/ticket/10159 #10159] GCC 4.4 error sorry, unimplemented
    * [@http://svn.boost.org/trac/boost/ticket/10196 #10196] thread_specific_ptr does not support void*
    * [@http://svn.boost.org/trac/boost/ticket/10296 #10296] Boost.Thread 1.56 rc1 does not compile on Mingw
    * [@http://svn.boost.org/trac/boost/ticket/10297 #10297] Boost.Thread 1.56 rc1 hangs when built with clang on armhf
    * [@http://svn.boost.org/trac/boost/ticket/10340 #10340] No boost::promise<T>::set_value(const T&) overload present in C++03 mode
    * [@http://svn.boost.org/trac/boost/ticket/10425 #10425] Missing documentation for when_all/when_any.
    * [@http://svn.boost.org/trac/boost/ticket/10426 #10426] Take in account the deferred futures in when_all.
    * [@http://svn.boost.org/trac/boost/ticket/10427 #10427] Take in account the deferred and ready futures in when_any.
    * [@http://svn.boost.org/trac/boost/ticket/10428 #10428] Adapt to new unique_ptr interface in Boost.Move
    * [@http://svn.boost.org/trac/boost/ticket/10465 #10465] Missing implementation of when_all/when_any when the result is a tuple.
    * [@http://svn.boost.org/trac/boost/ticket/10476 #10476] classes using BOOST_THREAD_MOVABLE_ONLY<T> dont satisfy is_copy_constructible<T>::value == false
    * [@http://svn.boost.org/trac/boost/ticket/10478 #10478] Data race in boost/thread/future.hpp
    * [@http://svn.boost.org/trac/boost/ticket/10529 #10529] The pthread/condition_variable_any constructor reports incorrect error code for pthread_cond_init
    * [@http://svn.boost.org/trac/boost/ticket/10563 #10563] shared_future<R>::then should be const

* [phrase library..[@/libs/utility/ Utility]:]
  * The `next()` and `prior()` functions taking distance arguments were reworked. The code now work correctly when the distance is unsigned or both arguments are integers. The new code relies on the availability of operators supported by the first argument to select the correct implementation.
  
* [phrase library..[@/libs/numeric/ublas/ uBLAS]:]
  * removed doxygen documentation to make the distribution lighter
  * the interface of matrices and vectors has been extended with cbegin, cend, crbegin and crend member functions, as defined in c++11
  * New facades matrix_row and matrix_column to access to the matrices as an array of rows and an array of columns, respectively.
  * various bug fixes
  * removed warnings with MSVC for unused parameters
  * regression tests now mostly in green for all configuration and compilers !

* /TODO: More details to come/

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang: 3.0, 3.1, 3.2, 3.3, 3.4
  * Clang, C++14: 3.5, 3.6
  * GCC: 4.4.7, 4.5.3, 4.6.4, 4.7.3, 4.8.1, 4.8.2
  * GCC, C++98: 4.9.1
  * GCC, C++11: 4.4.7, 4.8.2, 4.8.3, 4.9.1
  * GCC, C++14: 4.9.1
  * Intel: 13.1, 14.0
  * Intel, C++11: 13.1, 14.0
  * QCC: 4.4.2
* OS X:
  * Apple Clang: 6.0
  * Apple Clang, C++11: 6.0
  * Apple Clang, C++14: 6.0
  * GCC: 4.2.1, 4.9.1
  * Intel: 12.0
* Windows:
  * GCC, mingw: 4.4.0, 4.4.7. 4.5.4, 4.6.3, 4.7.2, 4.7.3, 4.8.0, 4.8.2, 4.9.0
  * Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0
* FreeBSD:
  * GCC: 4.2.1
* QNX:
  * QCC: 4.4.2

Boost's additional test compilers include:

* Linux:
  * Clang: 3.0, 3.1, 3.2, 3.3, 3.4.2
  * Clang, C++14: 3.5.0, 3.6.0
  * GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.8.2, 5.0 /(experimental)/
  * GCC, C++11: 4.4.7, 4.8.2, 4.8.3, 4.9.1
  * GCC, C++14: 4.9.1
  * Intel: 11.1, 12.1, 13.0, 13.1, 14.0
  * Intel, C++11: 13.1, 14.0
* OS X:
  * Apple Clang: 6.0
  * Apple Clang, C++11: 6.0
  * Apple Clang, C++14: 6.0
  * Clang: trunk
  * Clang, C++11: trunk
  * GCC: 4.2.1, 4.9.1
  * Intel: 12.0
* Windows:
  * GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.0, 4.8.2, 4.9.0
  * Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0
* FreeBSD:
  * GCC: 4.2.1
* QNX:
  * QCC: 4.4.2

[endsect]

[section Acknowledgements]

[@/users/people/beman_dawes.html Beman Dawes],
Eric Niebler,
[@/users/people/rene_rivera.html Rene Rivera],
Daniel James, Vladimir Prus and Marshall Clow
managed this release.

[endsect]

[/
For Beta release, something like:

[status beta]
[download http://sourceforge.net/projects/boost/files/boost/1.57.0.beta.1/]
[download_basename boost_1_57_0_b1]
[documentation /doc/libs/1_57_0_b1/]

Add libraries to 'purpose field'.

For final release:

[status released]
[download http://sourceforge.net/projects/boost/files/boost/1.57.0/]
[download_basename boost_1_57_0]
[documentation /doc/libs/1_57_0/]

Fill in 'authors' field, and date (I normally just copy the date from
the email requesting that I update the site).

Remove this comment.
]
