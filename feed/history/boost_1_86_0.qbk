[article Version 1.86.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* /TODO/

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/atomic/ Atomic]:]
  * Use [@https://man.openbsd.org/OpenBSD-6.2/futex.2 `futex(2)`] system call on OpenBSD since recent OpenBSD versions have removed support for `syscall(2)`.

* [phrase library..[@/libs/beast/ Beast]:]
  * API Changes
    * Added HTTP status code 418 `I'm a teapot`.
  * Fixes
    * Narrowing conversion in `read_size_hint_db()`.
    * Overloads that are ambiguous when using default completion tokens.
    * Misplaced static_assert in `http::basic_fields` move-assignment operator.
    * Underflow of `bytes_transferred` in WebSocket partial write operations.
    * `websocket::stream::read_size_hint()` does not exceed `read_message_max`.
    * Various warnings in tests.
    * Error handling in SSL shutdown operations in examples.
    * Annotate fallthrough case in zlib.
    * Handling of expired timers in `basic_stream::ops::transfer_op`.
    * Ambiguity in `test::basic_stream` constructor overloads.
    * Partial parsing of the final chunk in `http::parser`.
  * Improvements
    * Graceful shutdown in `server_flex_awaitable` example.
    * Simplified awaitable examples.
    * Added fuzzing targets.
    * Remove superfluous uses of `std::bind` in some examples.
    * `ssl_stream` does not use `flat_stream`.
  * Documentation
    * `ssl_stream` and `flat_stream` marked as deprecated.
    * `net::ssl::stream` is canonical in snippets and examples.
    * Added `SSL/TLS Shutdown Procedure` section.
  * Acknowledgements
    * tyler92, Ruslan Zakirov, Orgad Shaneh, Alexander Kernozhitsky

* [phrase library..[@/libs/compat/ Compat]:]
  * Added `bind_front.hpp`, `bind_back.hpp`, `invoke.hpp`, `mem_fn.hpp`, `integer_sequence.hpp` and `type_traits.hpp`.
  * Added `function_ref.hpp`.

* [phrase library..[@/libs/core/ Core]:]
  * Added a `boost/core/pointer_in_range.hpp` header with a `pointer_in_range`
    function template to check if a pointer is within a given range.
  * Fixed `type_name` for abstract classes. ([github core 172])
  * Fixed `boost/core/type_name.hpp` compilation error with MSVC with disabled native `wchar_t` type.
    ([github core 173])

* [phrase library..[@/libs/crc/ CRC]:]
  * C++03 is no longer supported; a C++11 compiler is required.
    (This includes GCC 4.6 or later, and MSVC 10.0 (VS 2010) or later.)
  * Removed dependencies on Array, Config, Integer, and TypeTraits. The
    library is now standalone.

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * `is_empty` operation is now better protected against concurrent filesystem modifications.
  * On POSIX systems, `is_empty` now indicates error if invoked on a file other than a regular file or a directory.
  * On Windows, fixed `file_size` and `is_empty` operating on symlinks rather than the files the symlinks refer to. ([github filesystem 313])
  * `directory_entry::refresh` no longer throws an exception if the file referenced by the entry doesn't exist. This makes
    `directory_entry::status` and `directory_entry::symlink_status`, as well as methods based on them, behave similarly
    to the equivalent standalone operations. The fact that the file does not exist is still indicated via the `error_code` returned
    by the corresponding `directory_entry::refresh` overload, or can be seen by testing if the file type returned by `directory_entry::status`
    or `directory_entry::symlink_status` calls is `file_type::file_not_found`. ([github filesystem 314])
  * Fixed `weakly_canonical` testing path elements for existence relative to the current path instead of the base path specified in the call,
    if the input path was a relative path.
  * On Windows, fixed `weakly_canonical` producing incorrect result path when the input path started with "..". ([github filesystem 311])

* [phrase library..[@/libs/format/ Format]:]
  * C++03 is no longer supported; a C++11 compiler is required.
    (This includes GCC 4.7 or later, and MSVC 12.0 (VS 2013) or later.)

* [phrase library..[@/libs/function/ Function]:]
  * Removed dependency on Boost.TypeTraits.
  * Brought back the `argN_type` typedefs that were accidentally lost in 1.85.

* [phrase library..[@/libs/gil/ GIL]:]
  * Added
    * Added `tell()` and `error()` functions to `istream_device` and `ostream_device` classes ([github_pr gil 747]).
  * Changed
    * Don't ignore custom color converter in `color_converted_view` function ([github_pr gil 726]).
    * Added workaround for conflict with `min()` and `max()` macros on WinAPI ([github_pr gil 745]).
    * The use of `boost::filesystem` in GIL is now configurable in CMake via
      option `BOOST_GIL_USE_BOOST_FILESYSTEM` ([github_pr gil 743]).
  * Fixed
    * Fixed convolution in `convolve_2d` ([github_pr gil  723])
    * Normalize Gaussian 2D kernel to avoid darkening ([github_pr gil 725])
    * Wrong buffer size in path string conversion functions for `std::wstring`
      is fixed, avoiding buffer overflows when using I/O-related functions with
      `std::wstring` paths ([github_pr gil 746]).
  * Acknowledgements
    * Christoph Gringmuth, Christopher Kormanyos, nicolacandussi, Dirk Stolle, Olzhas Zhumabek

* [phrase library..[@/libs/graph/ Graph]:]
  * _Major_ update: C++14 is the new minimum standard; this was partly dictated by dependencies (at least to C++11) and partly by choice. If you require support for an older standard, please contact the maintainer.
  * Remove direct dependency on Boost.Regex.
  * Fix several compilation errors caused by not explicitly including common headers.
  * `isomorphism`: Fix docs, ignore `vertex_max_invariant` parameter in favour of cheaply calculating upper exclusive bound, fix bug with Associative Property Map, improve space efficiency from linear in the size of the maximum invariant to linear in the size of g1.
  * `boykov_kolmogorov_max_flow`: Fix named parameter overload.
  * `adj_list_edge_iterator`: Fix maybe-uninitialized warnings.
  * `hawick_circuits`: Add a parameter to optionally limit the depth of the search, causing a potentially suboptimal answer to be returned early.
  * `disjoint_sets`: Improve performance of `link_sets` by removing redundant lookup of set representatives.
  * `maximum_adjacency_search`: Refactor and more tests.
  * `property`: Use `BOOST_ATTRIBUTE_NO_UNIQUE_ADDRESS` to remove wasted space.
  * `labeled_graph`: Fix `remove_labeled_vertex` so that it actually removes the label too.
  * `r_c_shortest_paths`: Fix bug that the single-solution variant did not always return the shortest path.
  * `read_graphviz`: Fix stack overflow (oss-fuzz issue 66719) and non-keyword subgraph parsing.
  * Many miscellaneous improvements: broken links, typos, etc.

* [phrase library..[@/libs/lexical_cast/ LexicalCast]:]
  * Fixed conversion of `std::basic_string_view` and `boost::basic_string_view`
    containing one or more `\0` characters. Issue was introduced in 1.85.0.

* [phrase library..[@/libs/locale/ Locale]:]
  * Add support for custom allocators in `conv::utf_to_utf`
  * Don't build examples by default

* [phrase library..[@/libs/log/ Log]:]
  * Added a workaround for `windres.exe` issue, when it is used in CMake to compile event log resource files on MinGW-w64.
    ([github_pr log 231])

* [phrase library..[@/libs/mysql/ MySQL]:]
  * The long-deprecated functions `query`, `start_query`, `execute_statement` and `start_statement_execution`
    (and their async equivalents) have been removed.
  * Breaking changes to experimental APIs:
    * The `identifier` class (client-side SQL formatting) has been removed. Use the new
      format specifiers feature, instead.
    * The required interface for custom formatters has been changed to accomodate the new
      format specifiers API.
    * `any_connection::async_connect` now requires that its `connect_params` argument be kept
      alive until the operation completes. The overload taking a `const connect_params*`
      has been removed.
    * `character_set::name` is now a `const char*` instead of a `string_view`,
      as MySQL character set names can't contain NULL characters.
    * `any_connection` internal buffer is now limited to 64MB. If you need to read
      or write rows bigger than that, increase `any_connection_params::max_buffer_size`.
      `connection` and their helper typedefs are not limited.
    * Renamed `any_connection_params::initial_read_buffer_size` to `initial_buffer_size`.
    * Renamed `pool_params::initial_read_buffer_size` to `initial_buffer_size`.
  * New experimental API: [*pipelines]. Pipelines can increase efficiency by coalescing
    several requests in a single network packet. Pipelines can be used to run text queries,
    prepare, execute and close statements, reset session state and set the connection's character set.
  * Client-side SQL formatting now supports ranges out of the box. Formatting can be further
    customized using the new `sequence` function. Use cases like batch inserts and
    batch lookups can be significantly simplified using this functionality.
  * Client-side SQL formatting now supports format specifiers which modify how values are formatted.
    `{:i}` formats a string as a dynamic SQL identifiers, and `{:r}` outputs a raw unescaped
  * The static interface (`static_results` and `static_execution_state`) now supports Boost.Pfr types
    using `pfr_by_name` and `pfr_by_position`. Added `underlying_row_t` to support such types.
  * `date` and `datetime` can now be constructed from and converted to C++20 `std::chrono::local_time`.
  * Added `any_connection_params::max_buffer_size`, which allows to set a limit to the connection's
    internal buffer.
  * Added `is_fatal_error`, which allows users can now distinguish between fatal
    (which require closing and re-opening the connection) and non-fatal error codes.
  * Added `formattable_ref`, a type-erased reference type that can refer to any
    type satisfying the `Formattable` concept. 
  * Fixed an ODR violation under MSVC which could
    cause crashes in release builds when using Boost.MySQL with other code also
    using `asio::coroutine` in different translation units.

* [phrase library..[@/libs/stacktrace/ Stacktrace]:]
  * [*Big new feature: stacktrace from arbitrary exception for Windows].
    `std::stacktrace::from_current_exception()` now works on Windows platform.
    Many thanks to [@https://github.com/huangqinjin huangqinjin] for the
    implementation [github_pr stacktrace 159]
    Now on POSIX and Windows the `from_current_exception() ` function
    returns the stacktrace of the current exception object as if the stacktrace
    was captured at the point of throwing the exception.
  * Fixed inclusion of rarely used Windows SDK headers which can cause
    conflict with other code using Windows SDK. Thanks to
    [@https://github.com/mabrarov Marat Abrarov] for fixing the issue
    [github_pr stacktrace 157].
  * Build option `boost.stacktrace.from_exception` now properly works
    on MacOS. Thanks to [@https://github.com/pdimov Peter Dimov] for the fix
    [github_pr stacktrace 166].
  * Fixed a typo in assert expression. Thanks to [@https://github.com/Ukilele Kilian Henneberger]
    for the bug report [github stacktrace 164].
  * Fixed shadowing warnings. Thanks to [@https://github.com/nigels-com Nigel Stewart]
    for the bug report [github stacktrace 141].
  * Added `dladdr` minimal support for AIX. Many thanks to Clément Chigot
    for the implementation [github_pr stacktrace 114].
  * Added `Boost::stacktrace` CMake alias that refers to the best supported
    implementation of Boost.Stacktrace on the platform. Thanks to [@https://github.com/leha-bot Alex]
    for the feature [github_pr stacktrace 167].
  * Significant improvement of CMake: multiple fixes, added many new tests,
    improved CI. Many thanks to [@https://github.com/pdimov Peter Dimov] for all the improvements.
  * Fix addr2line work when the process is looked up via `PATH`. Thanks to
    [@https://github.com/Schreischildkroete Schreischildkroete] for the bug report and to
    [@https://github.com/j-jr-richter Jens Richter] for fix [github stacktrace 72].

* [phrase library..[@/libs/uuid/ UUID]:]
  * _Major_ update.
  * C++03 is no longer supported, a C++11 compiler is required.
    (This includes GCC 4.8 or later, MSVC 14.0 (VS 2015) or later, and MinGW-w64.)
  * Decreased number of Boost dependencies from 39 (in total) to just 5.
  * Updated to reflect the newer [@https://datatracker.ietf.org/doc/rfc9562/ RFC 9562].
  * Added generators for time-based UUIDs.
  * _Many_ other improvements, see the [@/libs/uuid/doc/html/uuid.html#changes revision history].

* [phrase library..[@/libs/winapi/ WinAPI]:]
  * Added `BOOST_USE_WINAPI_VERSION` CMake option, which allows users to specify the Windows version for Boost to target.

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/boostbook/ BoostBook]:]
  * DTD updated: `constructor`, `copy-assignment` and `destructor` elements are now allowed inside `method-group` elements.
  * Many fixes and improvements in Doxygen-generated documentation:
    * Fixed duplicate equal signs in Doxygen-generated enum value initializers.
    * Disabled alphabetical sorting of function arguments. The sorting can be re-enabled by setting the new `boost.sort.params`
      XSL parameter to 1.
    * Added support for custom class member grouping. See Doxygen tags `@name` and `@{`/`@}`.
    * Added support for Doxygen references to classes, methods, enums, variables, etc. (see `@ref` tag).
    * Added support for `@remark` and `@important` tags.
    * Added support for `@parblock` tags, which can be used to place multiple paragraphs under a tag that expects a single
      paragraph as an argument (e.g. `@returns`).
    * Template parameter defaults that refer to implementation details are now concealed, similar to function parameter defaults.
    * Improved presentation of unnamed enums. Instead of showing a synthesized name such as `@0`, the name is either omitted
      or is `[unnamed]`, if the name is necessary to introduce a link to the enum documentation.
    * Changed the "See Also" (`@sa`) blocks to be displayed inline, similar to "Returns".
    * Fixed presentation of multiple exception specifications (`@throws`).
    * Added support for free form description of throwing behavior. If the exception type after the `@throws` tag is "~" then
      the exception type is omitted from the output, and the following description is displayed directly in the "Throws" section.
    * Removed redundant spaces in return types and template parameters.

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
