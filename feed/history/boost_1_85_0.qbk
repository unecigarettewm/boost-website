[article Version 1.85.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* [phrase library..[@/libs/charconv/ Charconv]:] A high quality implementation of `<charconv>` in C++11, from Matt Borland.
* [phrase library..[@/libs/scope/ Scope]:] A collection of scope guard utilities and a `unique_resource` wrapper, from Andrey Semashev.

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/beast/ Beast]:]
  * API Changes
    * The status code list has been updated to conform with the IANA registry.
  * Fixes
    * Unreachable code warning in `buffers_cat.hpp`.
    * Connection error handling in `websocker_server_awaitable` example.
    * Concurrent calls to `async_write` in advanced server examples.
    * zlib name conflicts with minizip.
    * host string should be updated after `SSL_set_tlsext_host_name()`.
  * Improvements
    * `asio::associator` is specialized for `bind_wrapper` and `bind_front_wrapper`.
    * Add non-allocating overload for error category message function.
  * Documentation
    * Specifies when calling `http::message::prepare_payload()` is optional.
    * Operations affected by `basic_stream::expires_after()`.
    * `teardown()` and `async_teardown()` are customization points.
    * Moving or copying `http::serializer` after first usage is undefined behaviour.
    * `websocket::permessage_deflate` should be configured before performing the WebSocket handshake.
    * `bytes_transferred` in http reads operations reports the number of bytes consumed by the HTTP parser.
  * Acknowledgements
    * Emile Cormier, JohannesWilde, yhzx233

* [phrase library..[@/libs/bimap/ Bimap]:] 
  * Fixed heterogeneous lookup for side collections ([github_pr bimap 42]).

* [phrase library..[@/libs/bind/ Bind]:]
  * C++03 is no longer supported; a C++11 compiler is required.
    (This includes GCC 4.7 or later, and MSVC 12.0 (VS 2013) or later.)

* [phrase library..[@/libs/conversion/ Conversion]:]
  * Removed outdated mentions of `boost::lexical_cast` that is not part of the
    library any more. Thanks to
    [@https://github.com/eoan-ermine Danil Sidoruk] for the PR
    [github_pr conversion 28]!

* [phrase library..[@/libs/function/ Function]:]
  * C++03 is no longer supported; a C++11 compiler is required.
    (This includes GCC 4.7 or later, and MSVC 12.0 (VS 2013) or later.)

* [phrase library..[@/libs/json/ JSON]:]
  * Boost.Endian is now used to deal with endianness.
  * Aliases to Boost.System and Boost.Container components are
    deprecated and [*will be completely removed in 1.87.0].
  * Conversion of described classes supports private members.
  * Rvalue reference overload for `visit`.
  * Add conversion support for path-like types.
  * Parsing into described classes correctly considers inherited
    members.
  * Conversion of self-referential sequences is disabled.
  * Fixed reference handling in visit.

* [phrase library..[@/libs/leaf/ LEAF]:]
  * New API for transporting of error objects and exceptions between threads: `try_capture_all`.
  * `result<T>` able to transport exceptions captured via `try_capture_all`.
  * `result<T>` transporting dynamically captured error objects with improved efficiency.
  * Old `make_shared_context`/`capture` APIs are deprecated, will be removed in the next release.
  * Removed support for transporting of dynamicaly captured error objects in exceptions.

* [phrase library..[@/libs/lexical_cast/ LexicalCast]:]
  * Significant rewrite of the internal logic to separate optimized and C++ Standard Library IO-based streams:
    * C++ Standard Library based streams now constructed in less cases leading to [*better performance];
    * less template instantiations and simpler code;
    * always use `std::char_traits` (do not use custom traits from input/output types as it leads to linktime or runtime errors);
    * fixed missuse of forward declared boost::array (thanks to [@https://github.com/13steinj 13steinj] for the report [github lexical_cast 64]!);
    * support for `volatile` input types was dropped, following the C++ Standard Library trend.
  * Optimized conversions from std::basic_string_view and boost::basic_string_view  [github lexical_cast 30].
  * Dropped dependency on Boost.NumericConversion and Boost.MPL. Fixed some cases
    of converting floting point types to arithmetics.
  * The library now compiles and works fine with `-fno-sanitize-recover=integer` [github lexical_cast 45].

* [phrase library..[@/libs/locale/ Locale]:]
  * Fix linker issues due to missing typeinfo for `char8_t` in C++20 mode
  * Fix IConv compile flags when using ICU that has a bundled IConv
  * `collator` now throws on construction, if at all, as documented
  * `collator` no longer derives from `std::collator` to avoid possible type confusing when it isn't available for the current backend [github_pr locale 216]
  * Throw an exception when a faulty IConv library is detected (e.g. on some MacOS versions) instead of looping indefinitely [github_pr locale 218]
  * Reduce resolution of `date_time` to seconds as milliseconds where not easily available causing confusion [github locale 221]

* [phrase library..[@/libs/math/ Math]:]
  * Added a new collection of optimization algorithms:
    * Differential Evolution [github_pr math 1062]
    * JSO [github_pr math 1065]
    * Random Search [github_pr math 1071]
    * CMA-ES [github_pr math 1074]

  * Fix Divide by 0 warning in NCF survival function
  * Fix constexpr depth limits of ccmath::floor/ceil fail for large arguments
  * Improve accuracy of quartic_roots
  * Fix cstdfloat numeric limits detection macro for libstdc++14
  * Fix for MSVC UCRT defining _Complex_I in complex.h when using C++14 [github_pr math 1060]
  * Improve cstdfloat iostream [github_pr math 1066]
  * Fix redefnition of Boost.Config macros when using standalone mode in a non-standalone environment
  * Significant improvements to code coverage with associated bug fixes

* [phrase library..[@/libs/msm/ MSM]:]
  * [* Major Update]. Backend update (back11). Requires C++ 11. The documentation now uses it as default.
  * [* Big new feature]. New front-end (PlantUML). Requires C++ 20 
  * Various Bugfixes (compiler errors and warnings, priority of deferred events)

* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * Fixed documentation errors.

* [phrase library..[@/libs/multiprecision/ Multiprecision]:]
  * Fix deprecation warnings from C++23 <limits> [github_pr multiprecision 575]
  * Fix cpp_bin_float for small bit counts [github_pr multiprecision 577]
  * Fix -Wpessimizing-move [github_pr multiprecision 580]
  * Add covecov runs
  * Reduce truncation in cpp_dec_float multiplication [github_pr multiprecision 585]
  * Fix complex_adaptor to match precision requirements [github_pr multiprecision 597]
  * Fix for breaking changes in tommath [github_pr multiprecision 603]
  * Fix for types that can be converted to number participting in arithmetic operator overloads [github multiprecision 608]

* [phrase library..[@/libs/mysql/ MySQL]:]
  * [*Breaking change]: Boost.MySQL now requires linking to the new [*Boost.Charconv] compiled library.
    This addresses a locale-dependency problem, increases efficiency, and powers the new client-side SQL formatting feature.
  * Added experimental support for [*connection pools], which allows re-using sessions and provides
    built-in reconnection and error handling.
  * Added experimental support for [*type-erased connections] (`any_connection` class).
    `any_connection` is not a template and features simpler connection establishment and reconnection semantics.
  * Added experimental support for [*client-side SQL formatting functions] (`format_sql` and `format_sql_to`).
    These allow securely composing queries client-side, which enables patterns like batch inserts,
    dynamic filters or PATCH-like updates.
  * Fixed a performance issue affecting `close_statement` and `async_close_statement` that could cause significant delays in application code.
  * Added support for building with `BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT`.
  * The deprecated execution interface (`connection::query`, `connection::start_query`,
    `connection::execute_statement`, `connection::start_statement_execution` and their async counterparts)
    now triggers warnings, as it's scheduled for removal in Boost 1.86.
  * Fixed a bug that caused some error messages to be truncated.
  * Warning cleanup. Builds are now clean from warnings when building with `-Wall` and `-Wextra`.
  * All `field_view` constructors are now stable.
  * The library internals have been rewritten using a sans-io approach to reduce complexity.

* [phrase library..[@/libs/numeric/odeint/ Odeint]:]
  * [*Breaking change]: The library now explicitly requires C++14 instead of implicitly by including Boost.Math
  * Fix compatibility with Thrust 1.10.0
  * Removed C++03 Boost components:
    * Array
    * Bind 
    * Function
    * Static_assert

* [phrase library..[@/libs/pfr/ PFR]:]
  * `boost::pfr::get_name` now can work with local types on some compilers.
    Thanks to [@https://github.com/schaumb Bela Schaum] for the PR [github_pr pfr 152]!
  * Removed unused implementation details. Thanks to
    [@https://github.com/denzor200 Denis Mikhailov] for the PR [github_pr pfr 154].
  * Allow throwing exceptions from `boost::pfr::structure_to_tuple`. Thanks to
    [@https://github.com/denzor200 Denis Mikhailov] for the bug report [github pfr 155].
  * Field reflection trick is now described in the docs. Thanks to all the
    discussion participans in [github pfr 150]!

* [phrase library..[@/libs/random/ Random]:]
  * Added splitmix64 PRNG [github_pr random 89]

* [phrase library..[@/libs/system/ System]:]
  * C++03 is no longer supported; a C++11 compiler is required.
    (This includes GCC 4.8 or later, and MSVC 14.0 (VS 2015) or later.)
  * The deprecated header `boost/system/cygwin_error.hpp` has been removed.
  * The original and obsolete (32 bit) MinGW is no longer supported. MinGW-w64 (both 64 and 32 bit) is still supported.
  * `operator&` now works for `result<void>` (by way of taking a nullary function.)
  * Added `operator|=` for `result`.

* [phrase library..[@/libs/stacktrace/ Stacktrace]:]
  * [*Big new feature: stacktrace from arbitrary exception].
    On some POSIX platforms `std::stacktrace::from_current_exception()` now
    returns the stacktrace of the current exception object as if the stacktrace
    was captures at the point of throwing the exception. Many thanks to
    Andrei Nekrashevich for prototyping the idea in `libsfe`.
  * Fixed memory consumption on Windows with `boost_stacktrace_windbg`. Thanks
    to [@https://github.com/ycyclop ycyclop] for reporting the issue
    [github stacktrace 111], to [@https://github.com/correa Thiago A. Correa]
    for providing more information, to
    [@https://github.com/akarpovskii Andrei Karpovskii] for providing a
    possible fix.
  * Fixed library build with non hidden visibility. Thanks to
    [@https://github.com/JBouwer Jan Bouwer] for the report and information on
    how to fix it.
  * Added a separate section on async signal safety to the docs. Many thanks
    to [@https://github.com/tworonix tworonix] for highlighting the problem
    in [github stacktrace 131]
    and to [@https://github.com/itrofimow itrofimow] for information on the
    problem.

* [phrase library..[@/libs/stl_interfaces/ STLInterfaces]:]
  * Change the behavior of `iterator_interface` for input iterators in C++20
    and later, to more closely follow the C++20 concepts.
  * Remove hidden friends from `iterator_interface` to fix errors about
    concepts being redefined with different constraints.
  * Add a new `v3` inline namespace, containing a new iterator_interface based
    on deducing this instead of CRTP (C++23 and later).
  * Add an rvalue-qualified overload of `closure::operator()`, to prevent
    dangling temporaries.

* [phrase library..[@/libs/test/ Test]:]
  * Respect library-spcific _NO_LIB macros [github_pr test 406]
  * Supress MSVC C4702 from __builtin_unreachable() on intentionally unreachable code 
  * Fix boost::function streaming error [github_pr test 411]

* [phrase library..[@/libs/unordered/ Unordered]:]
  * Optimized `emplace()` for a `value_type` or `init_type` (if applicable) argument to bypass
    creating an intermediate object. The argument is already the same type as the would-be intermediate object.
  * Optimized `emplace()` for `k,v` arguments on map containers to delay constructing the object
    until it is certain that an element should be inserted. This optimization happens when the
    map’s `key_type` is move constructible or when the `k` argument is a  `key_type`.
  * Fixed support for allocators with explicit copy constructors ([github_pr unordered 234]).
  * Fixed bug in the `const` version of `unordered_multimap::find(k, hash, eq)` ([github_pr unordered 238]).
  
* [phrase library..[@/libs/variant/ Variant]:]
  * Removed more of the pre-C++11 macro and workarounds.

* [phrase library..[@/libs/wave/ Wave]:]
  Fixed bugs:
  * [github wave 200]: Emitted pragmas lack terminating newline
  * [github wave 202]: YYMARKER not updated when fill called on BOOST_WAVE_BSIZE boundary

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/build/ Build]:]
  * Includes release of [@/tools/build/doc/html/#_version_5_1_0 B2 version 5.1.0].

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang, C++03: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++11: 3.4, 11.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++20: 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0

  * GCC, C++03: 4.6.3, 11, 12
  * GCC, C++11: 4.7.3, 4.8.5, 11, 12
  * GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11, 12
  * GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11, 12
  * GCC, C++20: 8.0.1, 9.1.0, 10, 11, 12

* OS X:
  * Apple Clang, C++03: 11.0.3
  * Apple Clang, C++11: 11.0.3
  * Apple Clang, C++14: 11.0.3
  * Apple Clang, C++17: 11.0.3
  * Apple Clang, C++20: 11.0.3

* Windows:
  * Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2, 14.3

[endsect]

[section Acknowledgements]

Marshall Clow and Glen Fernandes managed this release.

[endsect]
