(feed/history/boost_1_64_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_64_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <em>TODO</em>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_64_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed possible incorrect code generation in 64-bit atomic operations
"                on 32-bit x86 with gcc versions older than 4.7 and compatible compilers.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                new API: call/cc
"              </div>
"            </li>
"            <li>
"              <div>
"                deprecated API:execution-context
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/12719">#12719</a> segmentation fault when built with mingw-w64
"              </div>
"            </li>
"            <li>
"              <div>
"                #38: context_entry() crashes on macOS
"              </div>
"            </li>
"            <li>
"              <div>
"                #39: Unknown directive .cpu on aarch64 with Clang 3.8 on Android
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented <code><span class="keyword">constexpr</span></code>
"                <code><span class="identifier">addressof</span></code> on compilers
"                that support C++11 <code><span class="keyword">constexpr</span></code>
"                and SFINAE expressions. <code><span class="identifier">BOOST_CORE_NO_CONSTEXPR_ADDRESSOF</span></code>
"                macro indicates when <code><span class="keyword">constexpr</span></code>
"                <code><span class="identifier">addressof</span></code> is not
"                available.
"              </div>
"            </li>
"            <li>
"              <div>
"                In <code><span class="identifier">lightweight_test</span><span class="special">.</span><span class="identifier">hpp</span></code>,
"                added new macros <code><span class="identifier">BOOST_TEST_ALL_EQ</span></code>
"                and <code><span class="identifier">BOOST_TEST_ALL_WITH</span></code>
"                for testing container contents.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/coroutine2/">Coroutine2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                #4: coroutine2&lt;&gt; does not accept std::bind
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                #100: ASIO: unbuffered_channel / scheduler notify issue
"              </div>
"            </li>
"            <li>
"              <div>
"                #106: Passing a fixed_stack allocator to async/packaged_task doesn't
"                compile
"              </div>
"            </li>
"            <li>
"              <div>
"                #111: endless-loop in buffered_channel::try_value_pop()
"              </div>
"            </li>
"            <li>
"              <div>
"                (un)bounded_channel&lt;&gt; removed
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Big push to ensure all functions in also in C99 are compatible with
"                Annex F.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved accuracy of the Bessel functions I0, I1, K0 and K1, see
"                <a href="https://svn.boost.org/trac/boost/ticket/12066">12066</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision/">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                In <code><span class="identifier">cpp_bin_float</span></code>
"                prevent double rounding when converting to a denormalized float.
"                See <a href="https://svn.boost.org/trac/boost/ticket/12527">#12527</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in integer sqrt for very small integers. See <a href="https://svn.boost.org/trac/boost/ticket/12559">#12559</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix conversion to signed-zero in <code><span class="identifier">cpp_bin_float</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Change <code><span class="identifier">cpp_bin_float</span></code>
"                rounding code to round at arbitrary location so we can use it for
"                conversions, see <a href="https://svn.boost.org/trac/boost/ticket/12527">#12527</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve performance of 128-bit bit-scan operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix subtraction of very small quantities in <code><span class="identifier">cpp_bin_float</span></code>.
"                See: <a href="https://svn.boost.org/trac/boost/ticket/12580">#12580</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Bring error handling into line with C99 Annex F. See <a href="https://svn.boost.org/trac/boost/ticket/12581">#12581</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bitwise export of trivial <code><span class="identifier">cpp_int</span></code>'s,
"                see <a href="https://svn.boost.org/trac/boost/ticket/12627">#12627</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <code><span class="identifier">ilogb</span></code> (and code
"                that uses it) to consistently return the smallest value of the exponent
"                type when the argument is zero, see <a href="https://svn.boost.org/trac/boost/ticket/12625">#12625</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Allow conversion from <code><span class="identifier">__float128</span></code>
"                to <code><span class="identifier">cpp_bin_float</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in left shift of <code><span class="identifier">cpp_int</span></code>
"                which would result in bit-loss, see <a href="https://svn.boost.org/trac/boost/ticket/12790">#12790</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bugs in bounded but variable precision <code><span class="identifier">cpp_int</span></code>'s
"                caused by over-aggressive constexpr optimization, see <a href="https://svn.boost.org/trac/boost/ticket/12798">#12798</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/program_options/">Program Options</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for storing values into <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">optional</span></code>,
"                thanks to Ed Catmur (<a href="https://svn.boost.org/trac/boost/ticket/7495">#7495</a>,
"                <a href="https://github.com/boostorg/program_options/pull/18">PR#18</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/regex/">Regex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Compiling with Oracle C++ toolset is no longer restricted to static
"                linking.
"              </div>
"            </li>
"            <li>
"              <div>
"                Big effort to de-fuzz the library using libFuzzer and fix identified
"                issues, see: <a href="https://svn.boost.org/trac/boost/ticket/12818">#12818</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/smart_ptr/">Smart Pointers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Rewrite of <code><span class="identifier">allocate_shared</span></code>
"                and <code><span class="identifier">make_shared</span></code> for
"                arrays for a more optimal and more maintainable implementation (Glen
"                Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Pointer cast functions with move semantics (Chris Glover)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_traits/">TypeTraits</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added new trait <code><span class="identifier">make_void</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <em>TODO</em>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_64_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          <em>TODO</em>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          <em>TODO</em>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_64_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <em>TODO</em>
"    </p>
"  </div>
"
-hash
"0c7b3999490dce0edade02c4ee72d7eb59ebc51f61bbe70953111c1b3a3aff8a
-id
"version_1_64_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: Updated Libraries:
"
-title_xml
"Version 1.64.0
)
