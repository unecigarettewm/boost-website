[article Version 1.73.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries: Nowide
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* [phrase library..[@/libs/nowide/ Nowide]:] Standard library functions with UTF-8 API on Windows, from Artyom Beilis.

* /TODO/

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* /TODO/

* [phrase library..[@/libs/any/ Any]:]
  * Speedup compilation by not including `<algorithm>`.
  * Maintenance work, including CI hardening.

* [phrase library..[@/libs/assert/ Assert]:]
  * Added `source_location`.

* [phrase library..[@/libs/context/ Context]:]
  * [github context 133]: IBM Z: Fix fcontext routines
  * [github context 132]: mips64/n64: .align 3
  * [github context 131]: Use OSPLAT MIPS32/MIPS64 to set different ABI
  * [github context 129]: Fix non-PIC in RISC-V assembly

* [phrase library..[@/libs/conversion/ Conversion]:]
  * Added `boost::polymorphic_downcast` for references (thanks to Julien Delacroix for the patch).
  * Significant docs update.

* [phrase library..[@/libs/dll/ DLL]:]
  * Fixes and tests for demangling in `boost::dll::smart_library` (thanks to Ramil Gauss for [github dll 35]).
  * Make UB sanitizers happy with `boost::dll::load_mode::type` [github dll 30].
  * Ceased dependence on MPL improving compile times (thanks to Nikita Kniazev for [github dll 34]).
  * Clang and ICC on Windows fixes and CI support for those platforms (thanks to Nikita Kniazev [github dll 33]).
  * Maintenance work, including CI hardening and tests improving.

* [phrase library..[@/libs/flyweight/index.html Flyweight]:]
  * Maintenance work.

* [phrase library..[@/libs/lexical_cast/ LexicalCast]:]
  * Maintenance work, including CI hardening and better workarounds for broken standard libraries (thanks to Nikita Kniazev [github lexical_cast 32], [github lexical_cast 33]).

* [phrase library..[@/libs/mp11/ Mp11]:]
  * Added `mp_unique_if` (contributed by Kris Jusiak)
  * Added `mp_flatten`
  * Added `mp_rotate_left`, `mp_rotate_right` (contributed by Duncan Barber)
  * Added `mp_compose`
  * Added `mp_power_set`
  * Added `mp_partial_sum`
  * Added `mp_iterate`

* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * `multi_index_container` is now [@https://en.cppreference.com/w/cpp/named_req/AllocatorAwareContainer `AllocatorAware`].
  * Swapping of internal `KeyFromValue`, `Compare`, `Hash` and `Pred` objects now
    selects the appropriate `swap` function between `std::swap` and ADL candidates,
    in accordance with standard specifications in [*\[swappable.requirements\]]
    (issue [github multi_index 29]). 
  * Provided some internal copy constructors and assignment operators whose
    default implicit definition is deprecated in C++11 onwards ([*\[depr.impldec\]]),
    which was warned about on some compilers. 
  * Maintenance work. 

* [phrase library..[@/libs/outcome/ Outcome]:]
  * Enhancements:
    * Performance of Outcome-based code compiled by clang has been greatly improved. The previous implementation of Outcome's status bitfield confused clang's optimiser, which caused low quality codegen. Unlike most codegen issues, this was noticeably in empirical benchmarks of real world code, as was shown by [@https://wg21.link/P1886 P1886 *Error speed benchmarking*].
    * The safe part of the [@https://github.com/ned14/outcome/tree/better_optimisation `better_optimisation`] Outcome v2.2.0 future branch was merged to Outcome v2.1.3 which includes a new status bitfield implementation. This appears to not confuse clang's optimiser, and clang 9 produces code which routinely beats GCC 9's code for various canned use cases.
    * Installability is now CI tested per commit. Due to installability of standalone Outcome (e.g. `make install`) breaking itself rather more frequently than is ideal, installability is now tested on CI per commit.
  * Bug fixes:
    * [@https://github.com/ned14/outcome/issues/214 #214] Newer Concepts implementing compilers were unhappy with the early check for destructibility of `T` and `E`, so removed template constraints, falling back to static assert which runs later in the type instantiation sequence.
    * [@https://github.com/ned14/outcome/issues/220 #220] A false positive undefined behaviour sanitiser failure in some use cases of Experimental Outcome was worked around to avoid the failure message.

* [phrase library..[@/libs/poly_collection/ PolyCollection]:]
  * Suppressed a potential redundant move warning in `boost::poly_collection::for_each`.
  * Fixed a bug by which elements were copied rather than moved in
    allocator-extended move construction and move assigment between collections
    with non-propagating, unequal allocators.
  * Allocator-extended move construction no longer decays to allocator-extended copy
    construction for the legacy version of libstdc++-v3 shipped with GCC 4.8
    (which can also be used by Clang).

* [phrase library..[@/libs/stacktrace/ Stacktrace]:]
  * Added documentation on distribution of PDBs [github stacktrace 55], [github stacktrace 47] (thanks to emptyVoid and Roger Orr for information and to zlojvavan for testing).
  * Fixed msvc-9 build
  * Maintenance work, including test fixes [github stacktrace 86], fixing typos [github stacktrace 84], CI improvements and hardening, inspect tool fixes.

* [phrase library..[@/libs/throw_exception/ ThrowException]:]
  * Added an overload of `throw_exception` that takes a `boost::source_location`
    object.
  * NOTE: Projects using `BOOST_THROW_EXCEPTION` with exceptions disabled will need
    to add a definition of this new overload.

* [phrase library..[@/libs/type_index/ TypeIndex]:]
  * Maintenance work, including CI integration with inspect tool.

* [phrase library..[@/libs/variant/ Variant]:]
  * Removed unused includes (thanks to Nikita Kniazev [github variant 74]).
  * Maintenance work, including typo fixes.

* [phrase library..[@/libs/variant2/ Variant2]:]
  * Added support for `std::hash`, `boost::hash`.
  * `variant<T...>` is now trivial when all types in `T...` are trivial.
    This improves performance by enabling it to be passed to, and returned
    from, functions in registers.

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/build/ B2]:]
  * Includes release [@https://github.com/boostorg/build/releases/tag/4.2.0 4.2.0] of B2.
  * WARNING: Since version 4.0.0 B2 requires a capable C++11 compiler to bootstrap.
    This is only needed to build B2 itself not to build Boost for your use.

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
